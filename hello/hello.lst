
hello.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	ef c4 20    	mov.w     #0xc4e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	a0 d8 23    	mov.w     #0x3d8a, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	70 3e 02    	call      0x3e70 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	a0 07 20    	mov.w     #0x7a, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	0c 39 04    	goto      0x390c <___digitalRead>
    11e4:	00 00 00 
    11e6:	c8 38 04    	goto      0x38c8 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	2e 39 04    	goto      0x392e <___analogRead>
    11ec:	00 00 00 
    11ee:	fa 25 04    	goto      0x25fa <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	3c 26 04    	goto      0x263c <___putc_buffer>
    11f4:	00 00 00 
    11f6:	1e 26 04    	goto      0x261e <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	2c 27 04    	goto      0x272c <___getc_buffer>
    11fc:	00 00 00 
    11fe:	6e 17 04    	goto      0x176e <_prout>
    1200:	00 00 00 
    1202:	1a 1c 04    	goto      0x1c1a <_closeall>
    1204:	00 00 00 
    1206:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1208:	00 00 00 

0000120a <_close>:
    120a:	0a 00 fa    	lnk       #0xa
    120c:	11 00 20    	mov.w     #0x1, w1
    120e:	b1 bf 9f    	mov.w     w1, [w15-10]
    1210:	c0 bf 9f    	mov.w     w0, [w15-8]
    1212:	6a 80 57    	sub.w     w15, #0xa, w0
    1214:	87 08 07    	rcall     0x2324 <_doclose>
    1216:	4f b8 97    	mov.w     [w15-8], w0
    1218:	00 80 fa    	ulnk      
    121a:	00 00 06    	return    

0000121c <_remove>:
    121c:	0a 00 fa    	lnk       #0xa
    121e:	51 00 20    	mov.w     #0x5, w1
    1220:	b1 bf 9f    	mov.w     w1, [w15-10]
    1222:	c0 bf 9f    	mov.w     w0, [w15-8]
    1224:	6a 80 57    	sub.w     w15, #0xa, w0
    1226:	80 08 07    	rcall     0x2328 <_doremove>
    1228:	5f b8 97    	mov.w     [w15-6], w0
    122a:	00 80 fa    	ulnk      
    122c:	00 00 06    	return    

0000122e <_sbrk>:
    122e:	88 9f be    	mov.d     w8, [w15++]
    1230:	80 04 78    	mov.w     w0, w9
    1232:	60 62 80    	mov.w     0xc4c, w0
    1234:	00 00 e0    	cp0.w     w0
    1236:	04 00 3a    	bra       NZ, 0x1240 <.L2>
    1238:	0e 00 07    	rcall     0x1256 <_brk>
    123a:	00 84 eb    	setm.w    w8
    123c:	00 00 e0    	cp0.w     w0
    123e:	08 00 35    	bra       LT, 0x1250 <.L3>

00001240 <.L2>:
    1240:	68 62 80    	mov.w     0xc4c, w8
    1242:	09 00 e0    	cp0.w     w9
    1244:	05 00 32    	bra       Z, 0x1250 <.L3>
    1246:	09 00 44    	add.w     w8, w9, w0
    1248:	06 00 07    	rcall     0x1256 <_brk>
    124a:	00 00 e0    	cp0.w     w0
    124c:	01 00 3d    	bra       GE, 0x1250 <.L3>
    124e:	00 84 eb    	setm.w    w8

00001250 <.L3>:
    1250:	08 00 78    	mov.w     w8, w0
    1252:	4f 04 be    	mov.d     [--w15], w8
    1254:	00 00 06    	return    

00001256 <_brk>:
    1256:	80 00 78    	mov.w     w0, w1
    1258:	01 00 e0    	cp0.w     w1
    125a:	03 00 3a    	bra       NZ, 0x1262 <.L2>
    125c:	00 00 20    	mov.w     #0x0, w0
    125e:	60 62 88    	mov.w     w0, 0xc4c
    1260:	00 00 05    	retlw.w   #0x0, w0

00001262 <.L2>:
    1262:	00 80 eb    	setm.w    w0
    1264:	02 00 20    	mov.w     #0x0, w2
    1266:	82 8f 50    	sub.w     w1, w2, [w15]
    1268:	02 00 3e    	bra       GTU, 0x126e <.L3>
    126a:	61 62 88    	mov.w     w1, 0xc4c
    126c:	00 00 eb    	clr.w     w0

0000126e <.L3>:
    126e:	00 00 06    	return    

00001270 <___subsf3>:
    1270:	03 f0 a2    	btg.w     w3, #0xf

00001272 <___addsf3>:
    1272:	88 9f be    	mov.d     w8, [w15++]
    1274:	8a 9f be    	mov.d     w10, [w15++]
    1276:	8c 1f 78    	mov.w     w12, [w15++]
    1278:	f7 00 07    	rcall     0x1468 <__funpack2>
    127a:	fe 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    127c:	64 50 e1    	cp.w      w10, #0x4
    127e:	4f 00 32    	bra       Z, 0x131e <aisinfinite>

00001280 <checkspecialb>:
    1280:	64 20 e1    	cp.w      w4, #0x4
    1282:	52 00 32    	bra       Z, 0x1328 <return2>
    1284:	03 82 6c    	xor.w     w9, w3, w4
    1286:	07 00 3b    	bra       NN, 0x1296 <getsign>
    1288:	09 05 d0    	sl.w      w9, w10
    128a:	03 06 d0    	sl.w      w3, w12
    128c:	82 0f 54    	sub.w     w8, w2, [w15]
    128e:	0c 06 5d    	subb.w    w10, w12, w12
    1290:	02 00 39    	bra       NC, 0x1296 <getsign>
    1292:	02 00 32    	bra       Z, 0x1298 <gotsign>
    1294:	89 01 78    	mov.w     w9, w3

00001296 <getsign>:
    1296:	03 06 78    	mov.w     w3, w12

00001298 <gotsign>:
    1298:	85 82 55    	sub.w     w11, w5, w5
    129a:	04 00 3d    	bra       GE, 0x12a4 <expcanonical>
    129c:	00 03 fd    	exch      w0, w6
    129e:	81 03 fd    	exch      w1, w7
    12a0:	85 02 ea    	neg.w     w5, w5
    12a2:	8b 85 42    	add.w     w5, w11, w11

000012a4 <expcanonical>:
    12a4:	84 0f 72    	ior.w     w4, w4, [w15]
    12a6:	02 00 3b    	bra       NN, 0x12ac <nonegate>
    12a8:	60 00 10    	subr.w    w0, #0x0, w0
    12aa:	e0 80 18    	subbr.w   w1, #0x0, w1

000012ac <nonegate>:
    12ac:	60 11 b8    	mul.uu    w2, #0x0, w2
    12ae:	00 05 eb    	clr.w     w10
    12b0:	7a 28 e1    	cp.w      w5, #0x1a
    12b2:	0a 00 39    	bra       NC, 0x12c8 <aligniter>
    12b4:	06 00 78    	mov.w     w6, w0
    12b6:	c7 5d dd    	sl.w      w11, #0x7, w11
    12b8:	f7 07 b2    	and.w     #0x7f, w7
    12ba:	87 80 75    	ior.w     w11, w7, w1
    12bc:	2d 00 37    	bra       0x1318 <signoff>

000012be <align>:
    12be:	82 81 71    	ior.w     w3, w2, w3
    12c0:	0a 01 78    	mov.w     w10, w2
    12c2:	61 05 60    	and.w     w0, #0x1, w10
    12c4:	81 80 d1    	asr.w     w1, w1
    12c6:	00 80 d3    	rrc.w     w0, w0

000012c8 <aligniter>:
    12c8:	85 02 e9    	dec.w     w5, w5
    12ca:	f9 ff 3b    	bra       NN, 0x12be <align>

000012cc <aligned>:
    12cc:	06 04 40    	add.w     w0, w6, w8
    12ce:	87 84 48    	addc.w    w1, w7, w9
    12d0:	02 00 3b    	bra       NN, 0x12d6 <normalizesum>
    12d2:	60 04 14    	subr.w    w8, #0x0, w8
    12d4:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012d6 <normalizesum>:
    12d6:	09 88 a3    	btst.z    w9, #0x8
    12d8:	07 00 32    	bra       Z, 0x12e8 <checknormal>
    12da:	8a 81 71    	ior.w     w3, w10, w3
    12dc:	82 81 71    	ior.w     w3, w2, w3
    12de:	61 01 64    	and.w     w8, #0x1, w2
    12e0:	89 04 d1    	lsr.w     w9, w9
    12e2:	08 84 d3    	rrc.w     w8, w8
    12e4:	8b 05 e8    	inc.w     w11, w11
    12e6:	17 00 37    	bra       0x1316 <round>

000012e8 <checknormal>:
    12e8:	09 78 a3    	btst.z    w9, #0x7
    12ea:	13 00 3a    	bra       NZ, 0x1312 <discardguard>

000012ec <underflow>:
    12ec:	0b 00 e0    	cp0.w     w11
    12ee:	13 00 34    	bra       LE, 0x1316 <round>
    12f0:	8b 05 e9    	dec.w     w11, w11
    12f2:	08 04 44    	add.w     w8, w8, w8
    12f4:	89 84 4c    	addc.w    w9, w9, w9
    12f6:	0a 44 74    	ior.b     w8, w10, w8
    12f8:	09 78 a3    	btst.z    w9, #0x7
    12fa:	0d 00 3a    	bra       NZ, 0x1316 <round>

000012fc <normalizeloop>:
    12fc:	0b 00 e0    	cp0.w     w11
    12fe:	07 00 34    	bra       LE, 0x130e <normalizeexit>
    1300:	8b 05 e9    	dec.w     w11, w11
    1302:	08 04 44    	add.w     w8, w8, w8
    1304:	89 84 4c    	addc.w    w9, w9, w9
    1306:	01 00 3a    	bra       NZ, 0x130a <normalizetest>
    1308:	0b 00 20    	mov.w     #0x0, w11

0000130a <normalizetest>:
    130a:	09 78 a3    	btst.z    w9, #0x7
    130c:	f7 ff 32    	bra       Z, 0x12fc <normalizeloop>

0000130e <normalizeexit>:
    130e:	00 01 eb    	clr.w     w2
    1310:	02 00 37    	bra       0x1316 <round>

00001312 <discardguard>:
    1312:	82 81 71    	ior.w     w3, w2, w3
    1314:	0a 01 78    	mov.w     w10, w2

00001316 <round>:
    1316:	6d 00 07    	rcall     0x13f2 <__fpack>

00001318 <signoff>:
    1318:	0c f0 a7    	btsc.w    w12, #0xf
    131a:	01 f0 a0    	bset.w    w1, #0xf
    131c:	b6 00 37    	bra       0x148a <__fbopExit>

0000131e <aisinfinite>:
    131e:	64 20 e1    	cp.w      w4, #0x4
    1320:	02 00 3a    	bra       NZ, 0x1326 <return8>
    1322:	83 8f 6c    	xor.w     w9, w3, [w15]
    1324:	b6 00 33    	bra       N, 0x1492 <__fbopReturnNaN>

00001326 <return8>:
    1326:	08 01 be    	mov.d     w8, w2

00001328 <return2>:
    1328:	02 00 be    	mov.d     w2, w0
    132a:	af 00 37    	bra       0x148a <__fbopExit>

0000132c <___divsf3>:
    132c:	88 9f be    	mov.d     w8, [w15++]
    132e:	8a 9f be    	mov.d     w10, [w15++]
    1330:	8c 1f 78    	mov.w     w12, [w15++]
    1332:	9a 00 07    	rcall     0x1468 <__funpack2>
    1334:	a1 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    1336:	03 86 6c    	xor.w     w9, w3, w12
    1338:	64 50 e1    	cp.w      w10, #0x4
    133a:	2e 00 32    	bra       Z, 0x1398 <aisinfinite>
    133c:	64 20 e1    	cp.w      w4, #0x4
    133e:	33 00 32    	bra       Z, 0x13a6 <returnZero>
    1340:	61 50 e1    	cp.w      w10, #0x1
    1342:	2f 00 32    	bra       Z, 0x13a2 <aiszero>
    1344:	61 20 e1    	cp.w      w4, #0x1
    1346:	31 00 32    	bra       Z, 0x13aa <returnInf>

00001348 <finitenonzero>:
    1348:	85 85 55    	sub.w     w11, w5, w11
    134a:	eb 07 b0    	add.w     #0x7e, w11
    134c:	09 00 20    	mov.w     #0x0, w9
    134e:	08 04 20    	mov.w     #0x40, w8
    1350:	05 00 37    	bra       0x135c <diventry>

00001352 <divnext>:
    1352:	08 04 44    	add.w     w8, w8, w8
    1354:	89 84 4c    	addc.w    w9, w9, w9
    1356:	0a 00 31    	bra       C, 0x136c <divdone>

00001358 <divloop>:
    1358:	06 03 43    	add.w     w6, w6, w6
    135a:	87 83 4b    	addc.w    w7, w7, w7

0000135c <diventry>:
    135c:	00 01 53    	sub.w     w6, w0, w2
    135e:	81 81 5b    	subb.w    w7, w1, w3
    1360:	f8 ff 33    	bra       N, 0x1352 <divnext>
    1362:	02 03 be    	mov.d     w2, w6
    1364:	08 00 a0    	bset.w    w8, #0x0
    1366:	08 04 44    	add.w     w8, w8, w8
    1368:	89 84 4c    	addc.w    w9, w9, w9
    136a:	f6 ff 39    	bra       NC, 0x1358 <divloop>

0000136c <divdone>:
    136c:	c6 39 dd    	sl.w      w7, #0x6, w3
    136e:	83 01 73    	ior.w     w6, w3, w3
    1370:	01 00 32    	bra       Z, 0x1374 <stickyok>
    1372:	13 00 20    	mov.w     #0x1, w3

00001374 <stickyok>:
    1374:	89 04 d1    	lsr.w     w9, w9
    1376:	08 84 d3    	rrc.w     w8, w8
    1378:	09 98 a3    	btst.z    w9, #0x9
    137a:	05 00 32    	bra       Z, 0x1386 <guardused>
    137c:	08 00 a7    	btsc.w    w8, #0x0
    137e:	03 00 a0    	bset.w    w3, #0x0
    1380:	89 04 d1    	lsr.w     w9, w9
    1382:	08 84 d3    	rrc.w     w8, w8
    1384:	8b 05 e8    	inc.w     w11, w11

00001386 <guardused>:
    1386:	89 04 d1    	lsr.w     w9, w9
    1388:	08 84 d3    	rrc.w     w8, w8
    138a:	00 01 eb    	clr.w     w2
    138c:	02 81 d2    	rlc.w     w2, w2
    138e:	31 00 07    	rcall     0x13f2 <__fpack>

00001390 <return0>:
    1390:	01 f0 a1    	bclr.w    w1, #0xf
    1392:	0c f0 a7    	btsc.w    w12, #0xf
    1394:	01 f0 a0    	bset.w    w1, #0xf
    1396:	79 00 37    	bra       0x148a <__fbopExit>

00001398 <aisinfinite>:
    1398:	64 20 e1    	cp.w      w4, #0x4
    139a:	7b 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

0000139c <return8>:
    139c:	08 01 be    	mov.d     w8, w2

0000139e <return2>:
    139e:	02 00 be    	mov.d     w2, w0
    13a0:	f7 ff 37    	bra       0x1390 <return0>

000013a2 <aiszero>:
    13a2:	61 20 e1    	cp.w      w4, #0x1
    13a4:	76 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000013a6 <returnZero>:
    13a6:	60 00 b8    	mul.uu    w0, #0x0, w0
    13a8:	f3 ff 37    	bra       0x1390 <return0>

000013aa <returnInf>:
    13aa:	00 00 20    	mov.w     #0x0, w0
    13ac:	01 f8 27    	mov.w     #0x7f80, w1
    13ae:	f0 ff 37    	bra       0x1390 <return0>

000013b0 <___eqsf2>:
    13b0:	14 00 20    	mov.w     #0x1, w4
    13b2:	a6 00 37    	bra       0x1500 <__fcompare>

000013b4 <___gesf2>:
    13b4:	f4 ff 2f    	mov.w     #0xffff, w4
    13b6:	a4 00 37    	bra       0x1500 <__fcompare>

000013b8 <___fixunssfsi>:
    13b8:	00 01 be    	mov.d     w0, w2
    13ba:	41 00 07    	rcall     0x143e <__funpack>
    13bc:	04 70 a7    	btsc.w    w4, #0x7
    13be:	03 f0 a1    	bclr.w    w3, #0xf
    13c0:	03 f8 a3    	btst.z    w3, #0xf
    13c2:	13 00 3a    	bra       NZ, 0x13ea <returnzero>
    13c4:	65 09 b1    	sub.w     #0x96, w5
    13c6:	10 00 32    	bra       Z, 0x13e8 <exit>
    13c8:	09 00 35    	bra       LT, 0x13dc <shiftright>
    13ca:	69 28 e1    	cp.w      w5, #0x9
    13cc:	02 00 35    	bra       LT, 0x13d2 <shiftleft>
    13ce:	01 00 28    	mov.w     #0x8000, w1
    13d0:	00 00 05    	retlw.w   #0x0, w0

000013d2 <shiftleft>:
    13d2:	00 00 40    	add.w     w0, w0, w0
    13d4:	81 80 48    	addc.w    w1, w1, w1
    13d6:	85 02 e9    	dec.w     w5, w5
    13d8:	fc ff 3a    	bra       NZ, 0x13d2 <shiftleft>
    13da:	00 00 06    	return    

000013dc <shiftright>:
    13dc:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13de:	05 00 35    	bra       LT, 0x13ea <returnzero>

000013e0 <shiftrightloop>:
    13e0:	81 00 d1    	lsr.w     w1, w1
    13e2:	00 80 d3    	rrc.w     w0, w0
    13e4:	85 02 e8    	inc.w     w5, w5
    13e6:	fc ff 3a    	bra       NZ, 0x13e0 <shiftrightloop>

000013e8 <exit>:
    13e8:	00 00 06    	return    

000013ea <returnzero>:
    13ea:	80 00 eb    	clr.w     w1
    13ec:	00 00 05    	retlw.w   #0x0, w0

000013ee <___floatunsisf>:
    13ee:	60 11 b8    	mul.uu    w2, #0x0, w2
    13f0:	a2 00 37    	bra       0x1536 <___floatundisf>

000013f2 <__fpack>:
    13f2:	81 00 20    	mov.w     #0x8, w1
    13f4:	61 80 55    	sub.w     w11, #0x1, w0
    13f6:	0b 00 3d    	bra       GE, 0x140e <notsubnormal>
    13f8:	0b 00 20    	mov.w     #0x0, w11
    13fa:	61 fe 2f    	mov.w     #0xffe6, w1
    13fc:	01 00 e1    	cp.w      w0, w1
    13fe:	1d 00 34    	bra       LE, 0x143a <zerosig>

00001400 <subnormal>:
    1400:	82 81 71    	ior.w     w3, w2, w3
    1402:	61 01 64    	and.w     w8, #0x1, w2
    1404:	89 04 d1    	lsr.w     w9, w9
    1406:	08 84 d3    	rrc.w     w8, w8
    1408:	00 00 e8    	inc.w     w0, w0
    140a:	fa ff 3a    	bra       NZ, 0x1400 <subnormal>
    140c:	71 00 20    	mov.w     #0x7, w1

0000140e <notsubnormal>:
    140e:	61 00 64    	and.w     w8, #0x1, w0
    1410:	03 00 70    	ior.w     w0, w3, w0
    1412:	02 00 60    	and.w     w0, w2, w0
    1414:	09 00 32    	bra       Z, 0x1428 <packupandgo>
    1416:	61 04 44    	add.w     w8, #0x1, w8
    1418:	e0 84 4c    	addc.w    w9, #0x0, w9
    141a:	09 88 a5    	btst.z    w9, w1
    141c:	05 00 32    	bra       Z, 0x1428 <packupandgo>
    141e:	8b 05 e8    	inc.w     w11, w11
    1420:	68 08 e1    	cp.w      w1, #0x8
    1422:	02 00 3a    	bra       NZ, 0x1428 <packupandgo>
    1424:	89 04 d1    	lsr.w     w9, w9
    1426:	08 84 d3    	rrc.w     w8, w8

00001428 <packupandgo>:
    1428:	f2 0f 20    	mov.w     #0xff, w2
    142a:	02 58 e1    	cp.w      w11, w2
    142c:	05 00 3d    	bra       GE, 0x1438 <overflow>
    142e:	c7 5d dd    	sl.w      w11, #0x7, w11
    1430:	f9 07 b2    	and.w     #0x7f, w9
    1432:	89 80 75    	ior.w     w11, w9, w1
    1434:	08 00 78    	mov.w     w8, w0
    1436:	00 00 06    	return    

00001438 <overflow>:
    1438:	0b f8 27    	mov.w     #0x7f80, w11

0000143a <zerosig>:
    143a:	8b 00 78    	mov.w     w11, w1
    143c:	00 00 05    	retlw.w   #0x0, w0

0000143e <__funpack>:
    143e:	c7 0a de    	lsr.w     w1, #0x7, w5
    1440:	f1 07 b2    	and.w     #0x7f, w1
    1442:	f5 0f b2    	and.w     #0xff, w5
    1444:	08 00 32    	bra       Z, 0x1456 <zeroorsub>
    1446:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1448:	02 00 32    	bra       Z, 0x144e <nanorinf>

0000144a <finitereturn>:
    144a:	01 70 a0    	bset.w    w1, #0x7
    144c:	24 00 05    	retlw.w   #0x2, w4

0000144e <nanorinf>:
    144e:	81 0f 70    	ior.w     w0, w1, [w15]
    1450:	01 00 32    	bra       Z, 0x1454 <infinite>
    1452:	04 08 05    	retlw.w   #0x80, w4

00001454 <infinite>:
    1454:	44 00 05    	retlw.w   #0x4, w4

00001456 <zeroorsub>:
    1456:	81 0f 70    	ior.w     w0, w1, [w15]
    1458:	02 00 3a    	bra       NZ, 0x145e <subnormal>
    145a:	14 00 05    	retlw.w   #0x1, w4

0000145c <normalize>:
    145c:	85 02 e9    	dec.w     w5, w5

0000145e <subnormal>:
    145e:	00 00 40    	add.w     w0, w0, w0
    1460:	81 c0 48    	addc.b    w1, w1, w1
    1462:	fc ff 3b    	bra       NN, 0x145c <normalize>
    1464:	01 70 a0    	bset.w    w1, #0x7
    1466:	24 00 05    	retlw.w   #0x2, w4

00001468 <__funpack2>:
    1468:	00 04 be    	mov.d     w0, w8
    146a:	e9 ff 07    	rcall     0x143e <__funpack>
    146c:	00 03 be    	mov.d     w0, w6
    146e:	04 05 be    	mov.d     w4, w10
    1470:	02 00 be    	mov.d     w2, w0
    1472:	e5 ff 07    	rcall     0x143e <__funpack>
    1474:	84 4f 75    	ior.b     w10, w4, [w15]
    1476:	00 00 06    	return    

00001478 <__fPropagateNaN>:
    1478:	02 00 be    	mov.d     w2, w0
    147a:	64 50 e1    	cp.w      w10, #0x4
    147c:	05 00 36    	bra       LEU, 0x1488 <return0>
    147e:	64 20 e1    	cp.w      w4, #0x4
    1480:	02 00 36    	bra       LEU, 0x1486 <return8>
    1482:	09 68 a3    	btst.z    w9, #0x6
    1484:	01 00 3a    	bra       NZ, 0x1488 <return0>

00001486 <return8>:
    1486:	08 00 be    	mov.d     w8, w0

00001488 <return0>:
    1488:	01 60 a0    	bset.w    w1, #0x6

0000148a <__fbopExit>:
    148a:	4f 06 78    	mov.w     [--w15], w12
    148c:	4f 05 be    	mov.d     [--w15], w10
    148e:	4f 04 be    	mov.d     [--w15], w8
    1490:	00 00 06    	return    

00001492 <__fbopReturnNaN>:
    1492:	f0 ff 2f    	mov.w     #0xffff, w0
    1494:	f1 ff 27    	mov.w     #0x7fff, w1
    1496:	f9 ff 37    	bra       0x148a <__fbopExit>

00001498 <___mulsf3>:
    1498:	88 9f be    	mov.d     w8, [w15++]
    149a:	8a 9f be    	mov.d     w10, [w15++]
    149c:	8c 1f 78    	mov.w     w12, [w15++]
    149e:	e4 ff 07    	rcall     0x1468 <__funpack2>
    14a0:	eb ff 33    	bra       N, 0x1478 <__fPropagateNaN>
    14a2:	03 86 6c    	xor.w     w9, w3, w12
    14a4:	64 50 e1    	cp.w      w10, #0x4
    14a6:	24 00 32    	bra       Z, 0x14f0 <aisinfinite>
    14a8:	64 20 e1    	cp.w      w4, #0x4
    14aa:	27 00 32    	bra       Z, 0x14fa <bisinfinite>
    14ac:	61 50 e1    	cp.w      w10, #0x1
    14ae:	22 00 32    	bra       Z, 0x14f4 <return8>
    14b0:	61 20 e1    	cp.w      w4, #0x1
    14b2:	21 00 32    	bra       Z, 0x14f6 <return2>
    14b4:	8b 85 42    	add.w     w5, w11, w11
    14b6:	eb 07 b1    	sub.w     #0x7e, w11
    14b8:	01 34 b8    	mul.uu    w6, w1, w8
    14ba:	00 3a b8    	mul.uu    w7, w0, w4
    14bc:	08 04 42    	add.w     w4, w8, w8
    14be:	89 84 4a    	addc.w    w5, w9, w9
    14c0:	01 3a b8    	mul.uu    w7, w1, w4
    14c2:	00 30 b8    	mul.uu    w6, w0, w0
    14c4:	88 80 40    	add.w     w1, w8, w1
    14c6:	09 01 4a    	addc.w    w4, w9, w2
    14c8:	04 00 33    	bra       N, 0x14d2 <formsticky>
    14ca:	00 00 40    	add.w     w0, w0, w0
    14cc:	81 80 48    	addc.w    w1, w1, w1
    14ce:	02 01 49    	addc.w    w2, w2, w2
    14d0:	8b 05 e9    	dec.w     w11, w11

000014d2 <formsticky>:
    14d2:	c9 09 dd    	sl.w      w1, #0x9, w3
    14d4:	83 01 70    	ior.w     w0, w3, w3
    14d6:	01 00 32    	bra       Z, 0x14da <formRandSig>
    14d8:	13 00 20    	mov.w     #0x1, w3

000014da <formRandSig>:
    14da:	c8 14 de    	lsr.w     w2, #0x8, w9
    14dc:	48 14 dd    	sl.w      w2, #0x8, w8
    14de:	47 09 de    	lsr.w     w1, #0x7, w2
    14e0:	12 00 b2    	and.w     #0x1, w2
    14e2:	c8 08 de    	lsr.w     w1, #0x8, w1
    14e4:	08 84 70    	ior.w     w1, w8, w8
    14e6:	85 ff 07    	rcall     0x13f2 <__fpack>

000014e8 <return0>:
    14e8:	01 f0 a1    	bclr.w    w1, #0xf
    14ea:	0c f0 a7    	btsc.w    w12, #0xf
    14ec:	01 f0 a0    	bset.w    w1, #0xf
    14ee:	cd ff 37    	bra       0x148a <__fbopExit>

000014f0 <aisinfinite>:
    14f0:	61 20 e1    	cp.w      w4, #0x1
    14f2:	cf ff 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000014f4 <return8>:
    14f4:	08 01 be    	mov.d     w8, w2

000014f6 <return2>:
    14f6:	02 00 be    	mov.d     w2, w0
    14f8:	f7 ff 37    	bra       0x14e8 <return0>

000014fa <bisinfinite>:
    14fa:	61 50 e1    	cp.w      w10, #0x1
    14fc:	fc ff 3a    	bra       NZ, 0x14f6 <return2>
    14fe:	c9 ff 37    	bra       0x1492 <__fbopReturnNaN>

00001500 <__fcompare>:
    1500:	88 9f be    	mov.d     w8, [w15++]
    1502:	8a 9f be    	mov.d     w10, [w15++]
    1504:	84 1f 78    	mov.w     w4, [w15++]
    1506:	b0 ff 07    	rcall     0x1468 <__funpack2>
    1508:	4f 00 78    	mov.w     [--w15], w0
    150a:	11 00 33    	bra       N, 0x152e <exit>
    150c:	f0 ff 2f    	mov.w     #0xffff, w0
    150e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1510:	06 00 3b    	bra       NN, 0x151e <comparemag>
    1512:	04 05 65    	and.w     w10, w4, w10
    1514:	0a 00 a7    	btsc.w    w10, #0x0
    1516:	08 00 37    	bra       0x1528 <returnEqual>
    1518:	09 f0 a6    	btss.w    w9, #0xf
    151a:	10 00 20    	mov.w     #0x1, w0
    151c:	08 00 37    	bra       0x152e <exit>

0000151e <comparemag>:
    151e:	82 0f 54    	sub.w     w8, w2, [w15]
    1520:	83 8f 5c    	subb.w    w9, w3, [w15]
    1522:	03 00 39    	bra       NC, 0x152a <adjust>
    1524:	10 00 20    	mov.w     #0x1, w0
    1526:	01 00 3e    	bra       GTU, 0x152a <adjust>

00001528 <returnEqual>:
    1528:	00 00 20    	mov.w     #0x0, w0

0000152a <adjust>:
    152a:	09 f0 a7    	btsc.w    w9, #0xf
    152c:	00 00 ea    	neg.w     w0, w0

0000152e <exit>:
    152e:	4f 05 be    	mov.d     [--w15], w10
    1530:	4f 04 be    	mov.d     [--w15], w8
    1532:	00 00 e0    	cp0.w     w0
    1534:	00 00 06    	return    

00001536 <___floatundisf>:
    1536:	88 9f be    	mov.d     w8, [w15++]
    1538:	8a 9f be    	mov.d     w10, [w15++]
    153a:	00 82 70    	ior.w     w1, w0, w4
    153c:	04 02 71    	ior.w     w2, w4, w4
    153e:	04 82 71    	ior.w     w3, w4, w4
    1540:	26 00 32    	bra       Z, 0x158e <return0>
    1542:	00 04 be    	mov.d     w0, w8
    1544:	02 00 be    	mov.d     w2, w0
    1546:	60 11 b8    	mul.uu    w2, #0x0, w2
    1548:	6b 09 20    	mov.w     #0x96, w11
    154a:	95 02 20    	mov.w     #0x29, w5
    154c:	01 82 cf    	ff1l      w1, w4
    154e:	0a 00 39    	bra       NC, 0x1564 <fixshift>
    1550:	05 41 b1    	sub.b     #0x10, w5
    1552:	00 82 cf    	ff1l      w0, w4
    1554:	07 00 39    	bra       NC, 0x1564 <fixshift>
    1556:	05 41 b1    	sub.b     #0x10, w5
    1558:	09 82 cf    	ff1l      w9, w4
    155a:	04 00 39    	bra       NC, 0x1564 <fixshift>
    155c:	05 41 b1    	sub.b     #0x10, w5
    155e:	08 82 cf    	ff1l      w8, w4
    1560:	01 00 39    	bra       NC, 0x1564 <fixshift>
    1562:	05 41 b1    	sub.b     #0x10, w5

00001564 <fixshift>:
    1564:	05 42 52    	sub.b     w4, w5, w4
    1566:	12 00 32    	bra       Z, 0x158c <round>
    1568:	0a 00 3b    	bra       NN, 0x157e <shiftleft>

0000156a <shiftright>:
    156a:	82 81 71    	ior.w     w3, w2, w3
    156c:	61 01 64    	and.w     w8, #0x1, w2
    156e:	81 00 d1    	lsr.w     w1, w1
    1570:	00 80 d3    	rrc.w     w0, w0
    1572:	89 84 d3    	rrc.w     w9, w9
    1574:	08 84 d3    	rrc.w     w8, w8
    1576:	8b 05 e8    	inc.w     w11, w11
    1578:	04 42 e8    	inc.b     w4, w4
    157a:	f7 ff 3a    	bra       NZ, 0x156a <shiftright>
    157c:	07 00 37    	bra       0x158c <round>

0000157e <shiftleft>:
    157e:	08 04 44    	add.w     w8, w8, w8
    1580:	89 84 4c    	addc.w    w9, w9, w9
    1582:	00 00 48    	addc.w    w0, w0, w0
    1584:	81 80 48    	addc.w    w1, w1, w1
    1586:	8b 05 e9    	dec.w     w11, w11
    1588:	04 42 e9    	dec.b     w4, w4
    158a:	f9 ff 3a    	bra       NZ, 0x157e <shiftleft>

0000158c <round>:
    158c:	32 ff 07    	rcall     0x13f2 <__fpack>

0000158e <return0>:
    158e:	4f 05 be    	mov.d     [--w15], w10
    1590:	4f 04 be    	mov.d     [--w15], w8
    1592:	00 00 06    	return    

00001594 <_puts>:
    1594:	01 b0 20    	mov.w     #0xb00, w1
    1596:	2f 00 07    	rcall     0x15f6 <_fputs>
    1598:	80 00 78    	mov.w     w0, w1
    159a:	00 80 eb    	setm.w    w0
    159c:	01 00 e0    	cp0.w     w1
    159e:	04 00 35    	bra       LT, 0x15a8 <.L2>
    15a0:	01 b0 20    	mov.w     #0xb00, w1
    15a2:	a0 00 20    	mov.w     #0xa, w0
    15a4:	02 00 07    	rcall     0x15aa <_fputc>
    15a6:	4f 80 de    	asr.w     w0, #0xf, w0

000015a8 <.L2>:
    15a8:	00 00 06    	return    

000015aa <_fputc>:
    15aa:	88 9f be    	mov.d     w8, [w15++]
    15ac:	8a 1f 78    	mov.w     w10, [w15++]
    15ae:	00 04 be    	mov.d     w0, w8
    15b0:	c9 00 90    	mov.w     [w9+8], w1
    15b2:	69 00 90    	mov.w     [w9+12], w0
    15b4:	80 8f 50    	sub.w     w1, w0, [w15]
    15b6:	05 00 39    	bra       NC, 0x15c2 <.L2>
    15b8:	09 00 78    	mov.w     w9, w0
    15ba:	91 00 07    	rcall     0x16de <__Fwprep>
    15bc:	80 80 eb    	setm.w    w1
    15be:	00 00 e0    	cp0.w     w0
    15c0:	16 00 35    	bra       LT, 0x15ee <.L3>

000015c2 <.L2>:
    15c2:	08 45 78    	mov.b     w8, w10
    15c4:	49 00 90    	mov.w     [w9+8], w0
    15c6:	08 58 78    	mov.b     w8, [w0++]
    15c8:	c0 04 98    	mov.w     w0, [w9+8]
    15ca:	19 00 78    	mov.w     [w9], w0
    15cc:	00 b8 a3    	btst.z    w0, #0xb
    15ce:	04 00 3a    	bra       NZ, 0x15d8 <.L4>
    15d0:	00 a8 a3    	btst.z    w0, #0xa
    15d2:	07 00 32    	bra       Z, 0x15e2 <.L5>
    15d4:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    15d6:	05 00 3a    	bra       NZ, 0x15e2 <.L5>

000015d8 <.L4>:
    15d8:	09 00 78    	mov.w     w9, w0
    15da:	2a 03 07    	rcall     0x1c30 <__DNKfflush>
    15dc:	80 80 eb    	setm.w    w1
    15de:	00 00 e0    	cp0.w     w0
    15e0:	06 00 3a    	bra       NZ, 0x15ee <.L3>

000015e2 <.L5>:
    15e2:	00 c0 20    	mov.w     #0xc00, w0
    15e4:	19 00 60    	and.w     w0, [w9], w0
    15e6:	02 00 32    	bra       Z, 0x15ec <.L6>
    15e8:	49 00 90    	mov.w     [w9+8], w0
    15ea:	e0 04 98    	mov.w     w0, [w9+12]

000015ec <.L6>:
    15ec:	8a 80 fb    	ze        w10, w1

000015ee <.L3>:
    15ee:	01 00 78    	mov.w     w1, w0
    15f0:	4f 05 78    	mov.w     [--w15], w10
    15f2:	4f 04 be    	mov.d     [--w15], w8
    15f4:	00 00 06    	return    

000015f6 <_fputs>:
    15f6:	88 9f be    	mov.d     w8, [w15++]
    15f8:	8a 9f be    	mov.d     w10, [w15++]
    15fa:	8c 1f 78    	mov.w     w12, [w15++]
    15fc:	80 04 78    	mov.w     w0, w9
    15fe:	01 04 78    	mov.w     w1, w8
    1600:	2f 00 37    	bra       0x1660 <.L2>

00001602 <.L9>:
    1602:	c8 00 90    	mov.w     [w8+8], w1
    1604:	68 00 90    	mov.w     [w8+12], w0
    1606:	80 8f 50    	sub.w     w1, w0, [w15]
    1608:	04 00 39    	bra       NC, 0x1612 <.L3>
    160a:	08 00 78    	mov.w     w8, w0
    160c:	68 00 07    	rcall     0x16de <__Fwprep>
    160e:	00 00 e0    	cp0.w     w0
    1610:	3a 00 35    	bra       LT, 0x1686 <.L13>

00001612 <.L3>:
    1612:	00 40 20    	mov.w     #0x400, w0
    1614:	18 00 60    	and.w     w0, [w8], w0
    1616:	0a 00 32    	bra       Z, 0x162c <.L5>
    1618:	a1 00 20    	mov.w     #0xa, w1
    161a:	09 00 78    	mov.w     w9, w0
    161c:	50 00 07    	rcall     0x16be <_strrchr>
    161e:	00 06 78    	mov.w     w0, w12
    1620:	0c 00 e0    	cp0.w     w12
    1622:	04 00 32    	bra       Z, 0x162c <.L5>
    1624:	61 85 14    	subr.w    w9, #0x1, w10
    1626:	0a 05 46    	add.w     w12, w10, w10
    1628:	cf d5 de    	asr.w     w10, #0xf, w11
    162a:	04 00 37    	bra       0x1634 <.L6>

0000162c <.L5>:
    162c:	09 00 78    	mov.w     w9, w0
    162e:	3b 00 07    	rcall     0x16a6 <_strlen>
    1630:	00 05 be    	mov.d     w0, w10
    1632:	00 06 eb    	clr.w     w12

00001634 <.L6>:
    1634:	48 00 90    	mov.w     [w8+8], w0
    1636:	68 01 90    	mov.w     [w8+12], w2
    1638:	00 01 51    	sub.w     w2, w0, w2
    163a:	cf 91 de    	asr.w     w2, #0xf, w3
    163c:	8a 0f 51    	sub.w     w2, w10, [w15]
    163e:	8b 8f 59    	subb.w    w3, w11, [w15]
    1640:	02 00 31    	bra       C, 0x1646 <.L7>
    1642:	02 05 be    	mov.d     w2, w10
    1644:	00 06 eb    	clr.w     w12

00001646 <.L7>:
    1646:	0a 01 be    	mov.d     w10, w2
    1648:	89 00 78    	mov.w     w9, w1
    164a:	22 00 07    	rcall     0x1690 <_memcpy>
    164c:	48 00 90    	mov.w     [w8+8], w0
    164e:	0a 00 40    	add.w     w0, w10, w0
    1650:	40 04 98    	mov.w     w0, [w8+8]
    1652:	0c 00 e0    	cp0.w     w12
    1654:	04 00 32    	bra       Z, 0x165e <.L8>
    1656:	08 00 78    	mov.w     w8, w0
    1658:	eb 02 07    	rcall     0x1c30 <__DNKfflush>
    165a:	00 00 e0    	cp0.w     w0
    165c:	14 00 3a    	bra       NZ, 0x1686 <.L13>

0000165e <.L8>:
    165e:	8a 84 44    	add.w     w9, w10, w9

00001660 <.L2>:
    1660:	19 04 e0    	cp0.b     [w9]
    1662:	cf ff 3a    	bra       NZ, 0x1602 <.L9>
    1664:	00 80 20    	mov.w     #0x800, w0
    1666:	18 00 60    	and.w     w0, [w8], w0
    1668:	06 00 32    	bra       Z, 0x1676 <.L10>
    166a:	08 00 78    	mov.w     w8, w0
    166c:	e1 02 07    	rcall     0x1c30 <__DNKfflush>
    166e:	80 00 78    	mov.w     w0, w1
    1670:	00 80 eb    	setm.w    w0
    1672:	01 00 e0    	cp0.w     w1
    1674:	09 00 3a    	bra       NZ, 0x1688 <.L4>

00001676 <.L10>:
    1676:	01 c0 20    	mov.w     #0xc00, w1
    1678:	98 80 60    	and.w     w1, [w8], w1
    167a:	00 00 eb    	clr.w     w0
    167c:	05 00 32    	bra       Z, 0x1688 <.L4>
    167e:	48 00 90    	mov.w     [w8+8], w0
    1680:	60 04 98    	mov.w     w0, [w8+12]
    1682:	00 00 eb    	clr.w     w0
    1684:	01 00 37    	bra       0x1688 <.L4>

00001686 <.L13>:
    1686:	00 80 eb    	setm.w    w0

00001688 <.L4>:
    1688:	4f 06 78    	mov.w     [--w15], w12
    168a:	4f 05 be    	mov.d     [--w15], w10
    168c:	4f 04 be    	mov.d     [--w15], w8
    168e:	00 00 06    	return    

00001690 <_memcpy>:
    1690:	02 02 be    	mov.d     w2, w4
    1692:	80 01 eb    	clr.w     w3
    1694:	04 00 37    	bra       0x169e <.L2>

00001696 <.L3>:
    1696:	61 f0 79    	mov.b     [w1+w3], [w0+w3]
    1698:	61 02 52    	sub.w     w4, #0x1, w4
    169a:	e0 82 5a    	subb.w    w5, #0x0, w5
    169c:	83 01 e8    	inc.w     w3, w3

0000169e <.L2>:
    169e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    16a0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    16a2:	f9 ff 3a    	bra       NZ, 0x1696 <.L3>
    16a4:	00 00 06    	return    

000016a6 <_strlen>:
    16a6:	80 00 78    	mov.w     w0, w1
    16a8:	00 00 eb    	clr.w     w0

000016aa <.L2>:
    16aa:	61 0a b8    	mul.uu    w1, #0x1, w4
    16ac:	61 01 b8    	mul.uu    w0, #0x1, w2
    16ae:	04 03 41    	add.w     w2, w4, w6
    16b0:	00 00 e8    	inc.w     w0, w0
    16b2:	64 41 79    	mov.b     [w4+w2], w2
    16b4:	02 04 e0    	cp0.b     w2
    16b6:	f9 ff 3a    	bra       NZ, 0x16aa <.L2>
    16b8:	01 00 53    	sub.w     w6, w1, w0
    16ba:	cf 80 de    	asr.w     w0, #0xf, w1
    16bc:	00 00 06    	return    

000016be <_strrchr>:
    16be:	88 9f be    	mov.d     w8, [w15++]
    16c0:	60 11 b8    	mul.uu    w2, #0x0, w2

000016c2 <.L3>:
    16c2:	61 03 b8    	mul.uu    w0, #0x1, w6
    16c4:	61 12 b8    	mul.uu    w2, #0x1, w4
    16c6:	04 04 43    	add.w     w6, w4, w8
    16c8:	85 84 4b    	addc.w    w7, w5, w9
    16ca:	66 42 7a    	mov.b     [w6+w4], w4
    16cc:	81 4f 52    	sub.b     w4, w1, [w15]
    16ce:	01 00 3a    	bra       NZ, 0x16d2 <.L2>
    16d0:	88 01 78    	mov.w     w8, w3

000016d2 <.L2>:
    16d2:	02 01 e8    	inc.w     w2, w2
    16d4:	04 04 e0    	cp0.b     w4
    16d6:	f5 ff 3a    	bra       NZ, 0x16c2 <.L3>
    16d8:	03 00 78    	mov.w     w3, w0
    16da:	4f 04 be    	mov.d     [--w15], w8
    16dc:	00 00 06    	return    

000016de <__Fwprep>:
    16de:	88 9f be    	mov.d     w8, [w15++]
    16e0:	8a 1f 78    	mov.w     w10, [w15++]
    16e2:	00 04 78    	mov.w     w0, w8
    16e4:	c8 00 90    	mov.w     [w8+8], w1
    16e6:	68 01 90    	mov.w     [w8+12], w2
    16e8:	00 00 eb    	clr.w     w0
    16ea:	82 8f 50    	sub.w     w1, w2, [w15]
    16ec:	3d 00 39    	bra       NC, 0x1768 <.L2>
    16ee:	18 00 78    	mov.w     [w8], w0
    16f0:	22 00 29    	mov.w     #0x9002, w2
    16f2:	02 01 60    	and.w     w0, w2, w2
    16f4:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    16f6:	07 00 32    	bra       Z, 0x1706 <.L3>
    16f8:	01 20 24    	mov.w     #0x4200, w1
    16fa:	00 00 e0    	cp0.w     w0
    16fc:	01 00 3d    	bra       GE, 0x1700 <.L4>
    16fe:	01 20 20    	mov.w     #0x200, w1

00001700 <.L4>:
    1700:	00 8c 70    	ior.w     w1, w0, [w8]
    1702:	00 80 eb    	setm.w    w0
    1704:	31 00 37    	bra       0x1768 <.L2>

00001706 <.L3>:
    1706:	02 00 26    	mov.w     #0x6000, w2
    1708:	02 00 60    	and.w     w0, w2, w0
    170a:	82 0f 50    	sub.w     w0, w2, [w15]
    170c:	09 00 3a    	bra       NZ, 0x1720 <.L5>
    170e:	38 00 90    	mov.w     [w8+6], w0
    1710:	80 8f 50    	sub.w     w1, w0, [w15]
    1712:	06 00 39    	bra       NC, 0x1720 <.L5>
    1714:	08 00 78    	mov.w     w8, w0
    1716:	8c 02 07    	rcall     0x1c30 <__DNKfflush>
    1718:	80 00 78    	mov.w     w0, w1
    171a:	00 80 eb    	setm.w    w0
    171c:	01 00 e0    	cp0.w     w1
    171e:	24 00 3a    	bra       NZ, 0x1768 <.L2>

00001720 <.L5>:
    1720:	18 05 78    	mov.w     [w8], w10
    1722:	00 c0 20    	mov.w     #0xc00, w0
    1724:	00 00 65    	and.w     w10, w0, w0
    1726:	19 00 3a    	bra       NZ, 0x175a <.L6>
    1728:	a8 04 90    	mov.w     [w8+4], w9
    172a:	60 02 20    	mov.w     #0x26, w0
    172c:	08 00 40    	add.w     w0, w8, w0
    172e:	80 8f 54    	sub.w     w9, w0, [w15]
    1730:	14 00 3a    	bra       NZ, 0x175a <.L6>
    1732:	00 20 20    	mov.w     #0x200, w0
    1734:	01 00 20    	mov.w     #0x0, w1
    1736:	ac 03 07    	rcall     0x1e90 <_malloc>
    1738:	20 04 98    	mov.w     w0, [w8+4]
    173a:	00 00 e0    	cp0.w     w0
    173c:	05 00 3a    	bra       NZ, 0x1748 <.L7>
    173e:	29 04 98    	mov.w     w9, [w8+4]
    1740:	49 04 98    	mov.w     w9, [w8+8]
    1742:	89 04 e8    	inc.w     w9, w9
    1744:	39 04 98    	mov.w     w9, [w8+6]
    1746:	08 00 37    	bra       0x1758 <.L11>

00001748 <.L7>:
    1748:	0a 60 a0    	bset.w    w10, #0x6
    174a:	0a 0c 78    	mov.w     w10, [w8]
    174c:	40 04 98    	mov.w     w0, [w8+8]
    174e:	01 20 20    	mov.w     #0x200, w1
    1750:	80 80 40    	add.w     w1, w0, w1
    1752:	31 04 98    	mov.w     w1, [w8+6]
    1754:	40 0c 98    	mov.w     w0, [w8+24]
    1756:	50 0c 98    	mov.w     w0, [w8+26]

00001758 <.L11>:
    1758:	15 02 07    	rcall     0x1b84 <__Closreg>

0000175a <.L6>:
    175a:	28 00 90    	mov.w     [w8+4], w0
    175c:	50 04 98    	mov.w     w0, [w8+10]
    175e:	38 00 90    	mov.w     [w8+6], w0
    1760:	60 04 98    	mov.w     w0, [w8+12]
    1762:	00 00 26    	mov.w     #0x6000, w0
    1764:	18 0c 70    	ior.w     w0, [w8], [w8]
    1766:	00 00 eb    	clr.w     w0

00001768 <.L2>:
    1768:	4f 05 78    	mov.w     [--w15], w10
    176a:	4f 04 be    	mov.d     [--w15], w8
    176c:	00 00 06    	return    

0000176e <_prout>:
    176e:	88 1f 78    	mov.w     w8, [w15++]
    1770:	8a 9f be    	mov.d     w10, [w15++]
    1772:	00 04 78    	mov.w     w0, w8
    1774:	01 00 78    	mov.w     w1, w0
    1776:	02 05 be    	mov.d     w2, w10
    1778:	88 00 78    	mov.w     w8, w1
    177a:	02 02 be    	mov.d     w2, w4
    177c:	12 00 20    	mov.w     #0x1, w2
    177e:	03 00 20    	mov.w     #0x0, w3
    1780:	e1 02 07    	rcall     0x1d44 <_fwrite>
    1782:	8a 0f 50    	sub.w     w0, w10, [w15]
    1784:	8b 8f 58    	subb.w    w1, w11, [w15]
    1786:	01 00 32    	bra       Z, 0x178a <.L2>
    1788:	00 04 eb    	clr.w     w8

0000178a <.L2>:
    178a:	08 00 78    	mov.w     w8, w0
    178c:	4f 05 be    	mov.d     [--w15], w10
    178e:	4f 04 78    	mov.w     [--w15], w8
    1790:	00 00 06    	return    

00001792 <__printf_cdnopsuxX>:
    1792:	00 00 fa    	lnk       #0x0
    1794:	e8 81 57    	sub.w     w15, #0x8, w3
    1796:	4f b9 97    	mov.w     [w15-8], w2
    1798:	01 b0 20    	mov.w     #0xb00, w1
    179a:	e0 76 21    	mov.w     #0x176e, w0
    179c:	02 00 07    	rcall     0x17a2 <___Printf_cdnopsuxX>
    179e:	00 80 fa    	ulnk      
    17a0:	00 00 06    	return    

000017a2 <___Printf_cdnopsuxX>:
    17a2:	62 00 fa    	lnk       #0x62
    17a4:	88 9f be    	mov.d     w8, [w15++]
    17a6:	8a 9f be    	mov.d     w10, [w15++]
    17a8:	00 05 78    	mov.w     w0, w10
    17aa:	81 04 78    	mov.w     w1, w9
    17ac:	02 04 78    	mov.w     w2, w8
    17ae:	83 00 78    	mov.w     w3, w1
    17b0:	60 f9 2f    	mov.w     #0xff96, w0
    17b2:	0f 00 40    	add.w     w0, w15, w0
    17b4:	90 02 07    	rcall     0x1cd6 <__Vacopy>
    17b6:	8a 97 9f    	mov.w     w10, [w15-96]
    17b8:	99 97 9f    	mov.w     w9, [w15-94]
    17ba:	00 00 eb    	clr.w     w0
    17bc:	a0 9f 9f    	mov.w     w0, [w15-76]

000017be <.L29>:
    17be:	18 85 fb    	ze        [w8], w10
    17c0:	8a 04 fb    	se        w10, w9
    17c2:	0a 05 ea    	neg.w     w10, w10
    17c4:	4f 55 de    	lsr.w     w10, #0xf, w10
    17c6:	50 02 20    	mov.w     #0x25, w0
    17c8:	80 8f 54    	sub.w     w9, w0, [w15]
    17ca:	0e 00 32    	bra       Z, 0x17e8 <.L3>
    17cc:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    17ce:	0c 00 3a    	bra       NZ, 0x17e8 <.L3>
    17d0:	12 00 20    	mov.w     #0x1, w2
    17d2:	03 00 20    	mov.w     #0x0, w3
    17d4:	88 00 78    	mov.w     w8, w1
    17d6:	1f 90 97    	mov.w     [w15-94], w0
    17d8:	0f 92 97    	mov.w     [w15-96], w4
    17da:	04 00 01    	call      w4
    17dc:	90 97 9f    	mov.w     w0, [w15-94]
    17de:	00 00 e0    	cp0.w     w0
    17e0:	9d 00 32    	bra       Z, 0x191c <.L27>
    17e2:	2f 98 97    	mov.w     [w15-76], w0
    17e4:	00 00 e8    	inc.w     w0, w0
    17e6:	a0 9f 9f    	mov.w     w0, [w15-76]

000017e8 <.L3>:
    17e8:	0a 04 44    	add.w     w8, w10, w8
    17ea:	50 02 20    	mov.w     #0x25, w0
    17ec:	80 8f 54    	sub.w     w9, w0, [w15]
    17ee:	04 00 32    	bra       Z, 0x17f8 <.L5>
    17f0:	09 00 e0    	cp0.w     w9
    17f2:	e5 ff 3a    	bra       NZ, 0x17be <.L29>
    17f4:	2f 98 97    	mov.w     [w15-76], w0
    17f6:	93 00 37    	bra       0x191e <.L4>

000017f8 <.L5>:
    17f8:	00 00 eb    	clr.w     w0
    17fa:	80 9f 9f    	mov.w     w0, [w15-80]
    17fc:	f0 97 9f    	mov.w     w0, [w15-82]
    17fe:	e0 97 9f    	mov.w     w0, [w15-84]
    1800:	d0 97 9f    	mov.w     w0, [w15-86]
    1802:	c0 97 9f    	mov.w     w0, [w15-88]
    1804:	b0 97 9f    	mov.w     w0, [w15-90]
    1806:	c0 9f 9f    	mov.w     w0, [w15-72]
    1808:	80 04 eb    	clr.w     w9
    180a:	08 00 37    	bra       0x181c <.L7>

0000180c <.L8>:
    180c:	c1 c2 20    	mov.w     #0xc2c, w1
    180e:	81 00 50    	sub.w     w0, w1, w1
    1810:	81 00 d0    	sl.w      w1, w1
    1812:	02 c2 20    	mov.w     #0xc20, w2
    1814:	82 80 40    	add.w     w1, w2, w1
    1816:	4f 98 97    	mov.w     [w15-72], w0
    1818:	11 00 70    	ior.w     w0, [w1], w0
    181a:	c0 9f 9f    	mov.w     w0, [w15-72]

0000181c <.L7>:
    181c:	61 41 b8    	mul.uu    w8, #0x1, w2
    181e:	61 48 b8    	mul.uu    w9, #0x1, w0
    1820:	02 05 40    	add.w     w0, w2, w10
    1822:	e2 45 78    	mov.b     [w2+w0], w11
    1824:	8b 00 fb    	se        w11, w1
    1826:	c0 c2 20    	mov.w     #0xc2c, w0
    1828:	3e 02 07    	rcall     0x1ca6 <_strchr>
    182a:	89 04 e8    	inc.w     w9, w9
    182c:	00 00 e0    	cp0.w     w0
    182e:	ee ff 3a    	bra       NZ, 0x180c <.L8>
    1830:	a1 c2 b3    	mov.b     #0x2a, w1
    1832:	81 cf 55    	sub.b     w11, w1, [w15]
    1834:	0e 00 3a    	bra       NZ, 0x1852 <.L9>
    1836:	bf 88 97    	mov.w     [w15-106], w1
    1838:	01 80 e9    	dec2.w    w1, w0
    183a:	b0 8f 9f    	mov.w     w0, [w15-106]
    183c:	10 00 78    	mov.w     [w0], w0
    183e:	b0 9f 9f    	mov.w     w0, [w15-74]
    1840:	00 00 e0    	cp0.w     w0
    1842:	05 00 3d    	bra       GE, 0x184e <.L10>
    1844:	00 00 ea    	neg.w     w0, w0
    1846:	b0 9f 9f    	mov.w     w0, [w15-74]
    1848:	4f 98 97    	mov.w     [w15-72], w0
    184a:	00 20 a0    	bset.w    w0, #0x2
    184c:	c0 9f 9f    	mov.w     w0, [w15-72]

0000184e <.L10>:
    184e:	0a 04 e8    	inc.w     w10, w8
    1850:	12 00 37    	bra       0x1876 <.L11>

00001852 <.L9>:
    1852:	b0 9f 9f    	mov.w     w0, [w15-74]
    1854:	60 00 b8    	mul.uu    w0, #0x0, w0
    1856:	06 00 37    	bra       0x1864 <.L12>

00001858 <.L14>:
    1858:	f3 ff 27    	mov.w     #0x7fff, w3
    185a:	83 0f 50    	sub.w     w0, w3, [w15]
    185c:	02 00 32    	bra       Z, 0x1862 <.L13>
    185e:	6a 02 b9    	mul.su    w0, #0xa, w4
    1860:	04 00 41    	add.w     w2, w4, w0

00001862 <.L13>:
    1862:	81 00 e8    	inc.w     w1, w1

00001864 <.L12>:
    1864:	61 52 b8    	mul.uu    w10, #0x1, w4
    1866:	61 09 b8    	mul.uu    w1, #0x1, w2
    1868:	04 04 41    	add.w     w2, w4, w8
    186a:	64 41 79    	mov.b     [w4+w2], w2
    186c:	02 01 fb    	se        w2, w2
    186e:	02 03 b1    	sub.w     #0x30, w2
    1870:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1872:	f2 ff 36    	bra       LEU, 0x1858 <.L14>
    1874:	b0 9f 9f    	mov.w     w0, [w15-74]

00001876 <.L11>:
    1876:	e0 c2 b3    	mov.b     #0x2e, w0
    1878:	98 4f 10    	subr.b    w0, [w8], [w15]
    187a:	03 00 32    	bra       Z, 0x1882 <.L15>
    187c:	00 80 eb    	setm.w    w0
    187e:	90 9f 9f    	mov.w     w0, [w15-78]
    1880:	21 00 37    	bra       0x18c4 <.L16>

00001882 <.L15>:
    1882:	08 00 78    	mov.w     w8, w0
    1884:	a1 c2 b3    	mov.b     #0x2a, w1
    1886:	d0 cf 10    	subr.b    w1, [++w0], [w15]
    1888:	07 00 3a    	bra       NZ, 0x1898 <.L17>
    188a:	3f 89 97    	mov.w     [w15-106], w2
    188c:	82 80 e9    	dec2.w    w2, w1
    188e:	b1 8f 9f    	mov.w     w1, [w15-106]
    1890:	91 00 78    	mov.w     [w1], w1
    1892:	91 9f 9f    	mov.w     w1, [w15-78]
    1894:	00 04 e8    	inc.w     w0, w8
    1896:	16 00 37    	bra       0x18c4 <.L16>

00001898 <.L17>:
    1898:	00 00 eb    	clr.w     w0
    189a:	90 9f 9f    	mov.w     w0, [w15-78]
    189c:	80 00 eb    	clr.w     w1
    189e:	06 00 37    	bra       0x18ac <.L18>

000018a0 <.L20>:
    18a0:	f3 ff 27    	mov.w     #0x7fff, w3
    18a2:	83 0f 50    	sub.w     w0, w3, [w15]
    18a4:	02 00 32    	bra       Z, 0x18aa <.L19>
    18a6:	6a 02 b9    	mul.su    w0, #0xa, w4
    18a8:	04 00 41    	add.w     w2, w4, w0

000018aa <.L19>:
    18aa:	81 00 e8    	inc.w     w1, w1

000018ac <.L18>:
    18ac:	08 02 e8    	inc.w     w8, w4
    18ae:	80 02 eb    	clr.w     w5
    18b0:	61 09 b8    	mul.uu    w1, #0x1, w2
    18b2:	02 03 42    	add.w     w4, w2, w6
    18b4:	83 83 4a    	addc.w    w5, w3, w7
    18b6:	64 41 79    	mov.b     [w4+w2], w2
    18b8:	02 01 fb    	se        w2, w2
    18ba:	02 03 b1    	sub.w     #0x30, w2
    18bc:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    18be:	f0 ff 36    	bra       LEU, 0x18a0 <.L20>
    18c0:	90 9f 9f    	mov.w     w0, [w15-78]
    18c2:	06 04 78    	mov.w     w6, w8

000018c4 <.L16>:
    18c4:	98 44 78    	mov.b     [w8], w9
    18c6:	89 00 fb    	se        w9, w1
    18c8:	80 c1 20    	mov.w     #0xc18, w0
    18ca:	ed 01 07    	rcall     0x1ca6 <_strchr>
    18cc:	00 00 e0    	cp0.w     w0
    18ce:	02 00 32    	bra       Z, 0x18d4 <.L25>
    18d0:	08 04 e8    	inc.w     w8, w8
    18d2:	01 00 37    	bra       0x18d6 <.L21>

000018d4 <.L25>:
    18d4:	80 44 eb    	clr.b     w9

000018d6 <.L21>:
    18d6:	a9 7f 9f    	mov.b     w9, [w15-70]
    18d8:	80 c6 b3    	mov.b     #0x68, w0
    18da:	80 cf 54    	sub.b     w9, w0, [w15]
    18dc:	04 00 3a    	bra       NZ, 0x18e6 <.L22>
    18de:	98 cf 14    	subr.b    w9, [w8], [w15]
    18e0:	0a 00 3a    	bra       NZ, 0x18f6 <.L23>
    18e2:	66 40 50    	sub.b     w0, #0x6, w0
    18e4:	06 00 37    	bra       0x18f2 <.L30>

000018e6 <.L22>:
    18e6:	c0 c6 b3    	mov.b     #0x6c, w0
    18e8:	80 cf 54    	sub.b     w9, w0, [w15]
    18ea:	05 00 3a    	bra       NZ, 0x18f6 <.L23>
    18ec:	98 cf 14    	subr.b    w9, [w8], [w15]
    18ee:	03 00 3a    	bra       NZ, 0x18f6 <.L23>
    18f0:	65 40 40    	add.b     w0, #0x5, w0

000018f2 <.L30>:
    18f2:	a0 7f 9f    	mov.b     w0, [w15-70]
    18f4:	08 04 e8    	inc.w     w8, w8

000018f6 <.L23>:
    18f6:	18 01 fb    	se        [w8], w2
    18f8:	c3 fb 2f    	mov.w     #0xffbc, w3
    18fa:	8f 81 41    	add.w     w3, w15, w3
    18fc:	61 f9 2f    	mov.w     #0xff96, w1
    18fe:	8f 80 40    	add.w     w1, w15, w1
    1900:	80 f9 2f    	mov.w     #0xff98, w0
    1902:	0f 00 40    	add.w     w0, w15, w0
    1904:	10 00 07    	rcall     0x1926 <___Putfld_cdnopsuxX>
    1906:	00 00 e0    	cp0.w     w0
    1908:	09 00 3a    	bra       NZ, 0x191c <.L27>
    190a:	c1 fb 2f    	mov.w     #0xffbc, w1
    190c:	8f 80 40    	add.w     w1, w15, w1
    190e:	80 f9 2f    	mov.w     #0xff98, w0
    1910:	0f 00 40    	add.w     w0, w15, w0
    1912:	49 04 07    	rcall     0x21a6 <__Puttxt>
    1914:	00 00 e0    	cp0.w     w0
    1916:	02 00 35    	bra       LT, 0x191c <.L27>
    1918:	08 04 e8    	inc.w     w8, w8
    191a:	51 ff 37    	bra       0x17be <.L29>

0000191c <.L27>:
    191c:	00 80 eb    	setm.w    w0

0000191e <.L4>:
    191e:	4f 05 be    	mov.d     [--w15], w10
    1920:	4f 04 be    	mov.d     [--w15], w8
    1922:	00 80 fa    	ulnk      
    1924:	00 00 06    	return    

00001926 <___Putfld_cdnopsuxX>:
    1926:	88 9f be    	mov.d     w8, [w15++]
    1928:	8a 1f 78    	mov.w     w10, [w15++]
    192a:	00 04 78    	mov.w     w0, w8
    192c:	e0 c6 b3    	mov.b     #0x6e, w0
    192e:	80 4f 51    	sub.b     w2, w0, [w15]
    1930:	c3 00 32    	bra       Z, 0x1ab8 <.L8>
    1932:	15 00 3c    	bra       GT, 0x195e <.L10>
    1934:	6b 40 50    	sub.b     w0, #0xb, w0
    1936:	80 4f 51    	sub.b     w2, w0, [w15]
    1938:	24 00 32    	bra       Z, 0x1982 <.L6>
    193a:	0a 00 3c    	bra       GT, 0x1950 <.L11>
    193c:	70 40 50    	sub.b     w0, #0x10, w0
    193e:	80 4f 51    	sub.b     w2, w0, [w15]
    1940:	fc 00 32    	bra       Z, 0x1b3a <.L4>
    1942:	65 40 40    	add.b     w0, #0x5, w0
    1944:	80 4f 51    	sub.b     w2, w0, [w15]
    1946:	68 00 32    	bra       Z, 0x1a18 <.L5>
    1948:	50 c2 b3    	mov.b     #0x25, w0
    194a:	80 4f 51    	sub.b     w2, w0, [w15]
    194c:	0d 01 3a    	bra       NZ, 0x1b68 <.L2>
    194e:	09 01 37    	bra       0x1b62 <.L57>

00001950 <.L11>:
    1950:	40 c6 b3    	mov.b     #0x64, w0
    1952:	80 4f 51    	sub.b     w2, w0, [w15]
    1954:	1b 00 32    	bra       Z, 0x198c <.L7>
    1956:	65 40 40    	add.b     w0, #0x5, w0
    1958:	80 4f 51    	sub.b     w2, w0, [w15]
    195a:	06 01 3a    	bra       NZ, 0x1b68 <.L2>
    195c:	17 00 37    	bra       0x198c <.L7>

0000195e <.L10>:
    195e:	30 c7 b3    	mov.b     #0x73, w0
    1960:	80 4f 51    	sub.b     w2, w0, [w15]
    1962:	eb 00 32    	bra       Z, 0x1b3a <.L4>
    1964:	07 00 3c    	bra       GT, 0x1974 <.L12>
    1966:	64 40 50    	sub.b     w0, #0x4, w0
    1968:	80 4f 51    	sub.b     w2, w0, [w15]
    196a:	56 00 32    	bra       Z, 0x1a18 <.L5>
    196c:	00 40 e8    	inc.b     w0, w0
    196e:	80 4f 51    	sub.b     w2, w0, [w15]
    1970:	fb 00 3a    	bra       NZ, 0x1b68 <.L2>
    1972:	d5 00 37    	bra       0x1b1e <.L58>

00001974 <.L12>:
    1974:	50 c7 b3    	mov.b     #0x75, w0
    1976:	80 4f 51    	sub.b     w2, w0, [w15]
    1978:	4f 00 32    	bra       Z, 0x1a18 <.L5>
    197a:	63 40 40    	add.b     w0, #0x3, w0
    197c:	80 4f 51    	sub.b     w2, w0, [w15]
    197e:	f4 00 3a    	bra       NZ, 0x1b68 <.L2>
    1980:	4b 00 37    	bra       0x1a18 <.L5>

00001982 <.L6>:
    1982:	11 81 e9    	dec2.w    [w1], w2
    1984:	82 08 78    	mov.w     w2, [w1]
    1986:	78 00 90    	mov.w     [w8+14], w0
    1988:	12 41 78    	mov.b     [w2], w2
    198a:	ec 00 37    	bra       0x1b64 <.L55>

0000198c <.L7>:
    198c:	28 60 90    	mov.b     [w8+34], w0
    198e:	c4 c6 b3    	mov.b     #0x6c, w4
    1990:	84 4f 50    	sub.b     w0, w4, [w15]
    1992:	07 00 3a    	bra       NZ, 0x19a2 <.L14>
    1994:	11 02 78    	mov.w     [w1], w4
    1996:	64 00 52    	sub.w     w4, #0x4, w0
    1998:	80 08 78    	mov.w     w0, [w1]
    199a:	10 02 be    	mov.d     [w0], w4
    199c:	4f ab de    	asr.w     w5, #0xf, w6
    199e:	86 03 78    	mov.w     w6, w7
    19a0:	11 00 37    	bra       0x19c4 <.L15>

000019a2 <.L14>:
    19a2:	14 c7 b3    	mov.b     #0x71, w4
    19a4:	84 4f 50    	sub.b     w0, w4, [w15]
    19a6:	03 00 32    	bra       Z, 0x19ae <.L47>
    19a8:	a4 c6 b3    	mov.b     #0x6a, w4
    19aa:	84 4f 50    	sub.b     w0, w4, [w15]
    19ac:	06 00 3a    	bra       NZ, 0x19ba <.L17>

000019ae <.L47>:
    19ae:	11 02 78    	mov.w     [w1], w4
    19b0:	68 00 52    	sub.w     w4, #0x8, w0
    19b2:	80 08 78    	mov.w     w0, [w1]
    19b4:	30 02 be    	mov.d     [w0++], w4
    19b6:	20 03 be    	mov.d     [w0--], w6
    19b8:	05 00 37    	bra       0x19c4 <.L15>

000019ba <.L17>:
    19ba:	11 80 e9    	dec2.w    [w1], w0
    19bc:	80 08 78    	mov.w     w0, [w1]
    19be:	10 02 78    	mov.w     [w0], w4
    19c0:	cf a2 de    	asr.w     w4, #0xf, w5
    19c2:	61 2b b9    	mul.su    w5, #0x1, w6

000019c4 <.L15>:
    19c4:	04 9c be    	mov.d     w4, [w8++]
    19c6:	06 94 be    	mov.d     w6, [w8--]
    19c8:	28 60 90    	mov.b     [w8+34], w0
    19ca:	81 c6 b3    	mov.b     #0x68, w1
    19cc:	81 4f 50    	sub.b     w0, w1, [w15]
    19ce:	0d 00 32    	bra       Z, 0x19ea <.L21>
    19d0:	21 c6 b3    	mov.b     #0x62, w1
    19d2:	81 4f 50    	sub.b     w0, w1, [w15]
    19d4:	04 00 3a    	bra       NZ, 0x19de <.L20>
    19d6:	04 02 fb    	se        w4, w4
    19d8:	cf a2 de    	asr.w     w4, #0xf, w5
    19da:	61 2b b9    	mul.su    w5, #0x1, w6
    19dc:	08 00 37    	bra       0x19ee <.L48>

000019de <.L20>:
    19de:	41 c7 b3    	mov.b     #0x74, w1
    19e0:	81 4f 50    	sub.b     w0, w1, [w15]
    19e2:	03 00 32    	bra       Z, 0x19ea <.L21>
    19e4:	e6 c0 40    	add.b     w1, #0x6, w1
    19e6:	81 4f 50    	sub.b     w0, w1, [w15]
    19e8:	04 00 3a    	bra       NZ, 0x19f2 <.L19>

000019ea <.L21>:
    19ea:	cf a2 de    	asr.w     w4, #0xf, w5
    19ec:	61 2b b9    	mul.su    w5, #0x1, w6

000019ee <.L48>:
    19ee:	04 9c be    	mov.d     w4, [w8++]
    19f0:	06 94 be    	mov.d     w6, [w8--]

000019f2 <.L19>:
    19f2:	38 02 be    	mov.d     [w8++], w4
    19f4:	28 03 be    	mov.d     [w8--], w6
    19f6:	78 00 90    	mov.w     [w8+14], w0
    19f8:	d1 c2 b3    	mov.b     #0x2d, w1
    19fa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19fc:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    19fe:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a00:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a02:	08 00 35    	bra       LT, 0x1a14 <.L49>
    1a04:	88 10 90    	mov.w     [w8+32], w1
    1a06:	01 18 a3    	btst.z    w1, #0x1
    1a08:	02 00 32    	bra       Z, 0x1a0e <.L24>
    1a0a:	b1 c2 b3    	mov.b     #0x2b, w1
    1a0c:	03 00 37    	bra       0x1a14 <.L49>

00001a0e <.L24>:
    1a0e:	01 08 a3    	btst.z    w1, #0x0
    1a10:	4e 00 32    	bra       Z, 0x1aae <.L33>
    1a12:	01 c2 b3    	mov.b     #0x20, w1

00001a14 <.L49>:
    1a14:	81 71 78    	mov.b     w1, [w3+w0]
    1a16:	49 00 37    	bra       0x1aaa <.L56>

00001a18 <.L5>:
    1a18:	28 60 90    	mov.b     [w8+34], w0
    1a1a:	c4 c6 b3    	mov.b     #0x6c, w4
    1a1c:	84 4f 50    	sub.b     w0, w4, [w15]
    1a1e:	06 00 3a    	bra       NZ, 0x1a2c <.L25>
    1a20:	11 02 78    	mov.w     [w1], w4
    1a22:	64 00 52    	sub.w     w4, #0x4, w0
    1a24:	80 08 78    	mov.w     w0, [w1]
    1a26:	10 02 be    	mov.d     [w0], w4
    1a28:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a2a:	11 00 37    	bra       0x1a4e <.L26>

00001a2c <.L25>:
    1a2c:	14 c7 b3    	mov.b     #0x71, w4
    1a2e:	84 4f 50    	sub.b     w0, w4, [w15]
    1a30:	03 00 32    	bra       Z, 0x1a38 <.L50>
    1a32:	a4 c6 b3    	mov.b     #0x6a, w4
    1a34:	84 4f 50    	sub.b     w0, w4, [w15]
    1a36:	06 00 3a    	bra       NZ, 0x1a44 <.L28>

00001a38 <.L50>:
    1a38:	11 02 78    	mov.w     [w1], w4
    1a3a:	68 00 52    	sub.w     w4, #0x8, w0
    1a3c:	80 08 78    	mov.w     w0, [w1]
    1a3e:	30 02 be    	mov.d     [w0++], w4
    1a40:	20 03 be    	mov.d     [w0--], w6
    1a42:	05 00 37    	bra       0x1a4e <.L26>

00001a44 <.L28>:
    1a44:	11 80 e9    	dec2.w    [w1], w0
    1a46:	80 08 78    	mov.w     w0, [w1]
    1a48:	10 02 78    	mov.w     [w0], w4
    1a4a:	80 02 eb    	clr.w     w5
    1a4c:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a4e <.L26>:
    1a4e:	04 9c be    	mov.d     w4, [w8++]
    1a50:	06 94 be    	mov.d     w6, [w8--]
    1a52:	28 60 90    	mov.b     [w8+34], w0
    1a54:	81 c6 b3    	mov.b     #0x68, w1
    1a56:	81 4f 50    	sub.b     w0, w1, [w15]
    1a58:	03 00 3a    	bra       NZ, 0x1a60 <.L29>
    1a5a:	80 02 eb    	clr.w     w5
    1a5c:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a5e:	0e 00 37    	bra       0x1a7c <.L51>

00001a60 <.L29>:
    1a60:	21 c6 b3    	mov.b     #0x62, w1
    1a62:	81 4f 50    	sub.b     w0, w1, [w15]
    1a64:	04 00 3a    	bra       NZ, 0x1a6e <.L31>
    1a66:	04 82 fb    	ze        w4, w4
    1a68:	80 02 eb    	clr.w     w5
    1a6a:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a6c:	07 00 37    	bra       0x1a7c <.L51>

00001a6e <.L31>:
    1a6e:	41 c7 b3    	mov.b     #0x74, w1
    1a70:	81 4f 50    	sub.b     w0, w1, [w15]
    1a72:	03 00 32    	bra       Z, 0x1a7a <.L32>
    1a74:	e6 c0 40    	add.b     w1, #0x6, w1
    1a76:	81 4f 50    	sub.b     w0, w1, [w15]
    1a78:	03 00 3a    	bra       NZ, 0x1a80 <.L30>

00001a7a <.L32>:
    1a7a:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a7c <.L51>:
    1a7c:	04 9c be    	mov.d     w4, [w8++]
    1a7e:	06 94 be    	mov.d     w6, [w8--]

00001a80 <.L30>:
    1a80:	08 10 90    	mov.w     [w8+32], w0
    1a82:	00 38 a3    	btst.z    w0, #0x3
    1a84:	14 00 32    	bra       Z, 0x1aae <.L33>
    1a86:	38 02 be    	mov.d     [w8++], w4
    1a88:	28 03 be    	mov.d     [w8--], w6
    1a8a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a8c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a8e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a90:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a92:	0d 00 32    	bra       Z, 0x1aae <.L33>
    1a94:	80 c7 b3    	mov.b     #0x78, w0
    1a96:	80 4f 51    	sub.b     w2, w0, [w15]
    1a98:	03 00 32    	bra       Z, 0x1aa0 <.L34>
    1a9a:	80 c5 b3    	mov.b     #0x58, w0
    1a9c:	80 4f 51    	sub.b     w2, w0, [w15]
    1a9e:	07 00 3a    	bra       NZ, 0x1aae <.L33>

00001aa0 <.L34>:
    1aa0:	78 00 90    	mov.w     [w8+14], w0
    1aa2:	01 c3 b3    	mov.b     #0x30, w1
    1aa4:	81 71 78    	mov.b     w1, [w3+w0]
    1aa6:	00 00 e8    	inc.w     w0, w0
    1aa8:	82 71 78    	mov.b     w2, [w3+w0]

00001aaa <.L56>:
    1aaa:	00 00 e8    	inc.w     w0, w0
    1aac:	70 04 98    	mov.w     w0, [w8+14]

00001aae <.L33>:
    1aae:	78 00 90    	mov.w     [w8+14], w0
    1ab0:	80 81 41    	add.w     w3, w0, w3
    1ab2:	63 04 98    	mov.w     w3, [w8+12]
    1ab4:	82 40 78    	mov.b     w2, w1
    1ab6:	3e 00 37    	bra       0x1b34 <.L54>

00001ab8 <.L8>:
    1ab8:	28 61 90    	mov.b     [w8+34], w2
    1aba:	c3 c6 b3    	mov.b     #0x6c, w3
    1abc:	11 80 e9    	dec2.w    [w1], w0
    1abe:	83 4f 51    	sub.b     w2, w3, [w15]
    1ac0:	22 00 32    	bra       Z, 0x1b06 <.L39>
    1ac2:	0a 00 3c    	bra       GT, 0x1ad8 <.L43>
    1ac4:	e4 c1 51    	sub.b     w3, #0x4, w3
    1ac6:	83 4f 51    	sub.b     w2, w3, [w15]
    1ac8:	25 00 32    	bra       Z, 0x1b14 <.L53>
    1aca:	83 c1 e8    	inc2.b    w3, w3
    1acc:	83 4f 51    	sub.b     w2, w3, [w15]
    1ace:	13 00 32    	bra       Z, 0x1af6 <.L38>
    1ad0:	e8 c1 51    	sub.b     w3, #0x8, w3
    1ad2:	83 4f 51    	sub.b     w2, w3, [w15]
    1ad4:	1e 00 3a    	bra       NZ, 0x1b12 <.L35>
    1ad6:	0a 00 37    	bra       0x1aec <.L59>

00001ad8 <.L43>:
    1ad8:	43 c7 b3    	mov.b     #0x74, w3
    1ada:	83 4f 51    	sub.b     w2, w3, [w15]
    1adc:	1b 00 32    	bra       Z, 0x1b14 <.L53>
    1ade:	e6 c1 41    	add.b     w3, #0x6, w3
    1ae0:	83 4f 51    	sub.b     w2, w3, [w15]
    1ae2:	11 00 32    	bra       Z, 0x1b06 <.L39>
    1ae4:	e9 c1 51    	sub.b     w3, #0x9, w3
    1ae6:	83 4f 51    	sub.b     w2, w3, [w15]
    1ae8:	14 00 3a    	bra       NZ, 0x1b12 <.L35>
    1aea:	05 00 37    	bra       0x1af6 <.L38>

00001aec <.L59>:
    1aec:	80 08 78    	mov.w     w0, [w1]
    1aee:	10 00 78    	mov.w     [w0], w0
    1af0:	48 5c 90    	mov.b     [w8+28], w8
    1af2:	08 48 78    	mov.b     w8, [w0]
    1af4:	41 00 37    	bra       0x1b78 <.L13>

00001af6 <.L38>:
    1af6:	80 08 78    	mov.w     w0, [w1]
    1af8:	10 00 78    	mov.w     [w0], w0
    1afa:	68 0a 90    	mov.w     [w8+28], w4
    1afc:	cf a2 de    	asr.w     w4, #0xf, w5
    1afe:	61 2b b9    	mul.su    w5, #0x1, w6
    1b00:	04 98 be    	mov.d     w4, [w0++]
    1b02:	06 90 be    	mov.d     w6, [w0--]
    1b04:	39 00 37    	bra       0x1b78 <.L13>

00001b06 <.L39>:
    1b06:	80 08 78    	mov.w     w0, [w1]
    1b08:	10 00 78    	mov.w     [w0], w0
    1b0a:	68 09 90    	mov.w     [w8+28], w2
    1b0c:	cf 91 de    	asr.w     w2, #0xf, w3
    1b0e:	02 88 be    	mov.d     w2, [w0]
    1b10:	33 00 37    	bra       0x1b78 <.L13>

00001b12 <.L35>:
    1b12:	11 80 e9    	dec2.w    [w1], w0

00001b14 <.L53>:
    1b14:	80 08 78    	mov.w     w0, [w1]
    1b16:	10 00 78    	mov.w     [w0], w0
    1b18:	68 0c 90    	mov.w     [w8+28], w8
    1b1a:	08 08 78    	mov.w     w8, [w0]
    1b1c:	2d 00 37    	bra       0x1b78 <.L13>

00001b1e <.L58>:
    1b1e:	11 80 e9    	dec2.w    [w1], w0
    1b20:	80 08 78    	mov.w     w0, [w1]
    1b22:	10 02 78    	mov.w     [w0], w4
    1b24:	cf a2 de    	asr.w     w4, #0xf, w5
    1b26:	61 2b b9    	mul.su    w5, #0x1, w6
    1b28:	04 9c be    	mov.d     w4, [w8++]
    1b2a:	06 94 be    	mov.d     w6, [w8--]
    1b2c:	78 00 90    	mov.w     [w8+14], w0
    1b2e:	80 81 41    	add.w     w3, w0, w3
    1b30:	63 04 98    	mov.w     w3, [w8+12]
    1b32:	81 c7 b3    	mov.b     #0x78, w1

00001b34 <.L54>:
    1b34:	08 00 78    	mov.w     w8, w0
    1b36:	07 02 07    	rcall     0x1f46 <__Litob>
    1b38:	1f 00 37    	bra       0x1b78 <.L13>

00001b3a <.L4>:
    1b3a:	11 80 e9    	dec2.w    [w1], w0
    1b3c:	80 08 78    	mov.w     w0, [w1]
    1b3e:	10 05 78    	mov.w     [w0], w10
    1b40:	6a 04 98    	mov.w     w10, [w8+12]
    1b42:	d8 0c 90    	mov.w     [w8+26], w9
    1b44:	09 00 e0    	cp0.w     w9
    1b46:	04 00 3d    	bra       GE, 0x1b50 <.L44>
    1b48:	0a 00 78    	mov.w     w10, w0
    1b4a:	ad fd 07    	rcall     0x16a6 <_strlen>
    1b4c:	80 04 78    	mov.w     w0, w9
    1b4e:	07 00 37    	bra       0x1b5e <.L45>

00001b50 <.L44>:
    1b50:	61 49 b9    	mul.su    w9, #0x1, w2
    1b52:	80 00 eb    	clr.w     w1
    1b54:	0a 00 78    	mov.w     w10, w0
    1b56:	d3 01 07    	rcall     0x1efe <_memchr>
    1b58:	00 00 e0    	cp0.w     w0
    1b5a:	01 00 32    	bra       Z, 0x1b5e <.L45>
    1b5c:	8a 04 50    	sub.w     w0, w10, w9

00001b5e <.L45>:
    1b5e:	19 0c 98    	mov.w     w9, [w8+18]
    1b60:	0b 00 37    	bra       0x1b78 <.L13>

00001b62 <.L57>:
    1b62:	78 00 90    	mov.w     [w8+14], w0

00001b64 <.L55>:
    1b64:	82 71 78    	mov.b     w2, [w3+w0]
    1b66:	06 00 37    	bra       0x1b74 <.L52>

00001b68 <.L2>:
    1b68:	78 00 90    	mov.w     [w8+14], w0
    1b6a:	80 81 41    	add.w     w3, w0, w3
    1b6c:	02 04 e0    	cp0.b     w2
    1b6e:	01 00 3a    	bra       NZ, 0x1b72 <.L46>
    1b70:	52 c2 b3    	mov.b     #0x25, w2

00001b72 <.L46>:
    1b72:	82 49 78    	mov.b     w2, [w3]

00001b74 <.L52>:
    1b74:	00 00 e8    	inc.w     w0, w0
    1b76:	70 04 98    	mov.w     w0, [w8+14]

00001b78 <.L13>:
    1b78:	00 00 eb    	clr.w     w0
    1b7a:	4f 05 78    	mov.w     [--w15], w10
    1b7c:	4f 04 be    	mov.d     [--w15], w8
    1b7e:	00 00 06    	return    

00001b80 <_closeallreg>:
    1b80:	a0 c1 21    	mov.w     #0x1c1a, w0
    1b82:	9d 00 37    	bra       0x1cbe <__Atexit>

00001b84 <__Closreg>:
    1b84:	88 1f 78    	mov.w     w8, [w15++]
    1b86:	a8 c4 20    	mov.w     #0xc4a, w8
    1b88:	18 04 e0    	cp0.b     [w8]
    1b8a:	03 00 3a    	bra       NZ, 0x1b92 <.L2>
    1b8c:	f9 ff 07    	rcall     0x1b80 <_closeallreg>
    1b8e:	20 c0 b3    	mov.b     #0x2, w0
    1b90:	00 4c 78    	mov.b     w0, [w8]

00001b92 <.L2>:
    1b92:	4f 04 78    	mov.w     [--w15], w8
    1b94:	00 00 06    	return    

00001b96 <_fclose>:
    1b96:	88 9f be    	mov.d     w8, [w15++]
    1b98:	00 04 78    	mov.w     w0, w8
    1b9a:	08 00 78    	mov.w     w8, w0
    1b9c:	49 00 07    	rcall     0x1c30 <__DNKfflush>
    1b9e:	80 04 78    	mov.w     w0, w9
    1ba0:	00 04 20    	mov.w     #0x40, w0
    1ba2:	18 00 60    	and.w     w0, [w8], w0
    1ba4:	02 00 32    	bra       Z, 0x1baa <.L5>
    1ba6:	28 00 90    	mov.w     [w8+4], w0
    1ba8:	98 00 07    	rcall     0x1cda <_free>

00001baa <.L5>:
    1baa:	00 00 eb    	clr.w     w0
    1bac:	20 04 98    	mov.w     w0, [w8+4]
    1bae:	38 40 90    	mov.b     [w8+3], w0
    1bb0:	00 04 e0    	cp0.b     w0
    1bb2:	05 00 35    	bra       LT, 0x1bbe <.L6>
    1bb4:	00 00 fb    	se        w0, w0
    1bb6:	29 fb 07    	rcall     0x120a <_close>
    1bb8:	00 00 e0    	cp0.w     w0
    1bba:	01 00 32    	bra       Z, 0x1bbe <.L6>
    1bbc:	80 84 eb    	setm.w    w9

00001bbe <.L6>:
    1bbe:	18 10 90    	mov.w     [w8+34], w0
    1bc0:	00 00 e0    	cp0.w     w0
    1bc2:	08 00 32    	bra       Z, 0x1bd4 <.L7>
    1bc4:	2b fb 07    	rcall     0x121c <_remove>
    1bc6:	00 00 e0    	cp0.w     w0
    1bc8:	01 00 32    	bra       Z, 0x1bcc <.L8>
    1bca:	80 84 eb    	setm.w    w9

00001bcc <.L8>:
    1bcc:	18 10 90    	mov.w     [w8+34], w0
    1bce:	85 00 07    	rcall     0x1cda <_free>
    1bd0:	00 00 eb    	clr.w     w0
    1bd2:	10 14 98    	mov.w     w0, [w8+34]

00001bd4 <.L7>:
    1bd4:	00 08 20    	mov.w     #0x80, w0
    1bd6:	18 00 60    	and.w     w0, [w8], w0
    1bd8:	0f 00 32    	bra       Z, 0x1bf8 <.L9>
    1bda:	e1 b4 20    	mov.w     #0xb4e, w1
    1bdc:	00 00 eb    	clr.w     w0

00001bde <.L12>:
    1bde:	d1 0f 14    	subr.w    w8, [++w1], [w15]
    1be0:	05 00 3a    	bra       NZ, 0x1bec <.L10>
    1be2:	00 00 40    	add.w     w0, w0, w0
    1be4:	01 b5 20    	mov.w     #0xb50, w1
    1be6:	00 80 40    	add.w     w1, w0, w0
    1be8:	00 08 eb    	clr.w     [w0]
    1bea:	03 00 37    	bra       0x1bf2 <.L11>

00001bec <.L10>:
    1bec:	00 00 e8    	inc.w     w0, w0
    1bee:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    1bf0:	f6 ff 3a    	bra       NZ, 0x1bde <.L12>

00001bf2 <.L11>:
    1bf2:	08 00 78    	mov.w     w8, w0
    1bf4:	72 00 07    	rcall     0x1cda <_free>
    1bf6:	0e 00 37    	bra       0x1c14 <.L13>

00001bf8 <.L9>:
    1bf8:	00 0c 78    	mov.w     w0, [w8]
    1bfa:	00 c0 eb    	setm.b    w0
    1bfc:	30 44 98    	mov.b     w0, [w8+3]
    1bfe:	60 02 20    	mov.w     #0x26, w0
    1c00:	08 00 40    	add.w     w0, w8, w0
    1c02:	20 04 98    	mov.w     w0, [w8+4]
    1c04:	40 04 98    	mov.w     w0, [w8+8]
    1c06:	50 04 98    	mov.w     w0, [w8+10]
    1c08:	40 0c 98    	mov.w     w0, [w8+24]
    1c0a:	60 04 98    	mov.w     w0, [w8+12]
    1c0c:	50 0c 98    	mov.w     w0, [w8+26]
    1c0e:	70 04 98    	mov.w     w0, [w8+14]
    1c10:	76 00 44    	add.w     w8, #0x16, w0
    1c12:	00 0c 98    	mov.w     w0, [w8+16]

00001c14 <.L13>:
    1c14:	09 00 78    	mov.w     w9, w0
    1c16:	4f 04 be    	mov.d     [--w15], w8
    1c18:	00 00 06    	return    

00001c1a <_closeall>:
    1c1a:	88 9f be    	mov.d     w8, [w15++]
    1c1c:	08 b6 20    	mov.w     #0xb60, w8
    1c1e:	f0 04 54    	sub.w     w8, #0x10, w9

00001c20 <.L18>:
    1c20:	48 00 78    	mov.w     [--w8], w0
    1c22:	00 00 e0    	cp0.w     w0
    1c24:	01 00 32    	bra       Z, 0x1c28 <.L17>
    1c26:	b7 ff 07    	rcall     0x1b96 <_fclose>

00001c28 <.L17>:
    1c28:	89 0f 54    	sub.w     w8, w9, [w15]
    1c2a:	fa ff 3a    	bra       NZ, 0x1c20 <.L18>
    1c2c:	4f 04 be    	mov.d     [--w15], w8
    1c2e:	00 00 06    	return    

00001c30 <__DNKfflush>:
    1c30:	88 9f be    	mov.d     w8, [w15++]
    1c32:	8a 1f 78    	mov.w     w10, [w15++]
    1c34:	00 04 78    	mov.w     w0, w8
    1c36:	08 00 e0    	cp0.w     w8
    1c38:	0d 00 3a    	bra       NZ, 0x1c54 <.L2>
    1c3a:	e8 b4 20    	mov.w     #0xb4e, w8
    1c3c:	70 05 44    	add.w     w8, #0x10, w10
    1c3e:	80 04 eb    	clr.w     w9

00001c40 <.L4>:
    1c40:	58 00 78    	mov.w     [++w8], w0
    1c42:	00 00 e0    	cp0.w     w0
    1c44:	04 00 32    	bra       Z, 0x1c4e <.L3>
    1c46:	f4 ff 07    	rcall     0x1c30 <__DNKfflush>
    1c48:	00 00 e0    	cp0.w     w0
    1c4a:	01 00 3d    	bra       GE, 0x1c4e <.L3>
    1c4c:	80 84 eb    	setm.w    w9

00001c4e <.L3>:
    1c4e:	8a 0f 54    	sub.w     w8, w10, [w15]
    1c50:	f7 ff 3a    	bra       NZ, 0x1c40 <.L4>
    1c52:	25 00 37    	bra       0x1c9e <.L5>

00001c54 <.L2>:
    1c54:	00 00 22    	mov.w     #0x2000, w0
    1c56:	18 00 60    	and.w     w0, [w8], w0
    1c58:	80 04 eb    	clr.w     w9
    1c5a:	21 00 32    	bra       Z, 0x1c9e <.L5>
    1c5c:	a8 04 90    	mov.w     [w8+4], w9
    1c5e:	0f 00 37    	bra       0x1c7e <.L6>

00001c60 <.L8>:
    1c60:	09 01 51    	sub.w     w2, w9, w2
    1c62:	38 40 90    	mov.b     [w8+3], w0
    1c64:	00 00 fb    	se        w0, w0
    1c66:	89 00 78    	mov.w     w9, w1
    1c68:	74 06 07    	rcall     0x2952 <_write>
    1c6a:	00 00 e0    	cp0.w     w0
    1c6c:	07 00 3c    	bra       GT, 0x1c7c <.L7>
    1c6e:	28 00 90    	mov.w     [w8+4], w0
    1c70:	40 04 98    	mov.w     w0, [w8+8]
    1c72:	60 04 98    	mov.w     w0, [w8+12]
    1c74:	50 0c 98    	mov.w     w0, [w8+26]
    1c76:	18 90 a0    	bset.w    [w8], #0x9
    1c78:	80 84 eb    	setm.w    w9
    1c7a:	11 00 37    	bra       0x1c9e <.L5>

00001c7c <.L7>:
    1c7c:	80 84 44    	add.w     w9, w0, w9

00001c7e <.L6>:
    1c7e:	48 01 90    	mov.w     [w8+8], w2
    1c80:	82 8f 54    	sub.w     w9, w2, [w15]
    1c82:	ee ff 39    	bra       NC, 0x1c60 <.L8>
    1c84:	28 00 90    	mov.w     [w8+4], w0
    1c86:	40 04 98    	mov.w     w0, [w8+8]
    1c88:	98 00 78    	mov.w     [w8], w1
    1c8a:	02 c0 20    	mov.w     #0xc00, w2
    1c8c:	02 81 60    	and.w     w1, w2, w2
    1c8e:	01 00 3a    	bra       NZ, 0x1c92 <.L9>
    1c90:	38 00 90    	mov.w     [w8+6], w0

00001c92 <.L9>:
    1c92:	01 e8 a3    	btst.z    w1, #0xe
    1c94:	02 00 32    	bra       Z, 0x1c9a <.L10>
    1c96:	60 04 98    	mov.w     w0, [w8+12]
    1c98:	01 00 37    	bra       0x1c9c <.L13>

00001c9a <.L10>:
    1c9a:	50 0c 98    	mov.w     w0, [w8+26]

00001c9c <.L13>:
    1c9c:	80 04 eb    	clr.w     w9

00001c9e <.L5>:
    1c9e:	09 00 78    	mov.w     w9, w0
    1ca0:	4f 05 78    	mov.w     [--w15], w10
    1ca2:	4f 04 be    	mov.d     [--w15], w8
    1ca4:	00 00 06    	return    

00001ca6 <_strchr>:
    1ca6:	02 00 37    	bra       0x1cac <.L2>

00001ca8 <.L4>:
    1ca8:	03 04 e0    	cp0.b     w3
    1caa:	06 00 32    	bra       Z, 0x1cb8 <.L5>

00001cac <.L2>:
    1cac:	00 01 78    	mov.w     w0, w2
    1cae:	02 00 78    	mov.w     w2, w0
    1cb0:	b0 41 78    	mov.b     [w0++], w3
    1cb2:	81 cf 51    	sub.b     w3, w1, [w15]
    1cb4:	f9 ff 3a    	bra       NZ, 0x1ca8 <.L4>
    1cb6:	01 00 37    	bra       0x1cba <.L3>

00001cb8 <.L5>:
    1cb8:	00 01 eb    	clr.w     w2

00001cba <.L3>:
    1cba:	02 00 78    	mov.w     w2, w0
    1cbc:	00 00 06    	return    

00001cbe <__Atexit>:
    1cbe:	01 00 20    	mov.w     #0x0, w1
    1cc0:	01 00 e0    	cp0.w     w1
    1cc2:	08 00 32    	bra       Z, 0x1cd4 <.L1>
    1cc4:	01 00 80    	mov.w     0x0, w1
    1cc6:	01 00 e0    	cp0.w     w1
    1cc8:	05 00 32    	bra       Z, 0x1cd4 <.L1>
    1cca:	81 00 e9    	dec.w     w1, w1
    1ccc:	01 00 88    	mov.w     w1, 0x0
    1cce:	81 80 40    	add.w     w1, w1, w1
    1cd0:	02 00 80    	mov.w     0x0, w2
    1cd2:	00 b1 78    	mov.w     w0, [w2+w1]

00001cd4 <.L1>:
    1cd4:	00 00 06    	return    

00001cd6 <__Vacopy>:
    1cd6:	01 08 78    	mov.w     w1, [w0]
    1cd8:	00 00 06    	return    

00001cda <_free>:
    1cda:	00 00 e0    	cp0.w     w0
    1cdc:	32 00 32    	bra       Z, 0x1d42 <.L1>
    1cde:	40 02 be    	mov.d     [--w0], w4
    1ce0:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    1ce2:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1ce4:	2e 00 36    	bra       LEU, 0x1d42 <.L1>
    1ce6:	04 08 a3    	btst.z    w4, #0x0
    1ce8:	2c 00 3a    	bra       NZ, 0x1d42 <.L1>
    1cea:	41 62 80    	mov.w     0xc48, w1
    1cec:	01 00 e0    	cp0.w     w1
    1cee:	02 00 32    	bra       Z, 0x1cf4 <.L3>
    1cf0:	81 0f 50    	sub.w     w0, w1, [w15]
    1cf2:	04 00 31    	bra       C, 0x1cfc <.L7>

00001cf4 <.L3>:
    1cf4:	21 00 98    	mov.w     w1, [w0+4]
    1cf6:	40 62 88    	mov.w     w0, 0xc48
    1cf8:	17 00 37    	bra       0x1d28 <.L5>

00001cfa <.L11>:
    1cfa:	82 00 78    	mov.w     w2, w1

00001cfc <.L7>:
    1cfc:	21 01 90    	mov.w     [w1+4], w2
    1cfe:	02 00 e0    	cp0.w     w2
    1d00:	02 00 32    	bra       Z, 0x1d06 <.L6>
    1d02:	80 0f 51    	sub.w     w2, w0, [w15]
    1d04:	fa ff 39    	bra       NC, 0x1cfa <.L11>

00001d06 <.L6>:
    1d06:	11 03 be    	mov.d     [w1], w6
    1d08:	86 81 40    	add.w     w1, w6, w3
    1d0a:	83 0f 50    	sub.w     w0, w3, [w15]
    1d0c:	1a 00 39    	bra       NC, 0x1d42 <.L1>
    1d0e:	80 8f 51    	sub.w     w3, w0, [w15]
    1d10:	04 00 3a    	bra       NZ, 0x1d1a <.L8>
    1d12:	84 18 43    	add.w     w6, w4, [w1++]
    1d14:	85 90 4b    	addc.w    w7, w5, [w1--]
    1d16:	01 00 78    	mov.w     w1, w0
    1d18:	07 00 37    	bra       0x1d28 <.L5>

00001d1a <.L8>:
    1d1a:	02 00 e0    	cp0.w     w2
    1d1c:	03 00 32    	bra       Z, 0x1d24 <.L9>
    1d1e:	04 02 40    	add.w     w0, w4, w4
    1d20:	84 0f 51    	sub.w     w2, w4, [w15]
    1d22:	0f 00 39    	bra       NC, 0x1d42 <.L1>

00001d24 <.L9>:
    1d24:	22 00 98    	mov.w     w2, [w0+4]
    1d26:	a0 00 98    	mov.w     w0, [w1+4]

00001d28 <.L5>:
    1d28:	a0 00 90    	mov.w     [w0+4], w1
    1d2a:	01 00 e0    	cp0.w     w1
    1d2c:	0a 00 32    	bra       Z, 0x1d42 <.L1>
    1d2e:	10 01 40    	add.w     w0, [w0], w2
    1d30:	82 8f 50    	sub.w     w1, w2, [w15]
    1d32:	07 00 3a    	bra       NZ, 0x1d42 <.L1>
    1d34:	62 c4 20    	mov.w     #0xc46, w2
    1d36:	00 09 eb    	clr.w     [w2]
    1d38:	10 01 be    	mov.d     [w0], w2
    1d3a:	31 18 41    	add.w     w2, [w1++], [w0++]
    1d3c:	21 90 49    	addc.w    w3, [w1--], [w0--]
    1d3e:	a1 00 90    	mov.w     [w1+4], w1
    1d40:	21 00 98    	mov.w     w1, [w0+4]

00001d42 <.L1>:
    1d42:	00 00 06    	return    

00001d44 <_fwrite>:
    1d44:	ea 87 47    	add.w     w15, #0xa, w15
    1d46:	88 9f be    	mov.d     w8, [w15++]
    1d48:	8a 9f be    	mov.d     w10, [w15++]
    1d4a:	8c 9f be    	mov.d     w12, [w15++]
    1d4c:	8e 1f 78    	mov.w     w14, [w15++]
    1d4e:	00 06 78    	mov.w     w0, w12
    1d50:	02 04 be    	mov.d     w2, w8
    1d52:	04 05 be    	mov.d     w4, w10
    1d54:	01 07 78    	mov.w     w1, w14
    1d56:	04 00 be    	mov.d     w4, w0
    1d58:	0b 03 07    	rcall     0x2370 <___mulp32eds3>
    1d5a:	d0 b7 9f    	mov.w     w0, [w15-22]
    1d5c:	e1 b7 9f    	mov.w     w1, [w15-20]
    1d5e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1d60:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1d62:	52 00 32    	bra       Z, 0x1e08 <.L11>
    1d64:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1d66:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1d68:	50 00 32    	bra       Z, 0x1e0a <.L2>
    1d6a:	fc b7 9f    	mov.w     w12, [w15-18]
    1d6c:	00 06 be    	mov.d     w0, w12

00001d6e <.L8>:
    1d6e:	ce 00 90    	mov.w     [w14+8], w1
    1d70:	6e 00 90    	mov.w     [w14+12], w0
    1d72:	80 8f 50    	sub.w     w1, w0, [w15]
    1d74:	04 00 39    	bra       NC, 0x1d7e <.L3>
    1d76:	0e 00 78    	mov.w     w14, w0
    1d78:	b2 fc 07    	rcall     0x16de <__Fwprep>
    1d7a:	00 00 e0    	cp0.w     w0
    1d7c:	33 00 35    	bra       LT, 0x1de4 <.L4>

00001d7e <.L3>:
    1d7e:	00 40 20    	mov.w     #0x400, w0
    1d80:	1e 00 60    	and.w     w0, [w14], w0
    1d82:	0c 00 32    	bra       Z, 0x1d9c <.L12>
    1d84:	0c 01 be    	mov.d     w12, w2
    1d86:	a1 00 20    	mov.w     #0xa, w1
    1d88:	7f b0 97    	mov.w     [w15-18], w0
    1d8a:	b9 00 07    	rcall     0x1efe <_memchr>
    1d8c:	00 02 78    	mov.w     w0, w4
    1d8e:	04 00 e0    	cp0.w     w4
    1d90:	08 00 32    	bra       Z, 0x1da2 <.L13>
    1d92:	ff b1 97    	mov.w     [w15-18], w3
    1d94:	61 85 11    	subr.w    w3, #0x1, w10
    1d96:	0a 05 42    	add.w     w4, w10, w10
    1d98:	cf d5 de    	asr.w     w10, #0xf, w11
    1d9a:	04 00 37    	bra       0x1da4 <.L5>

00001d9c <.L12>:
    1d9c:	0c 05 be    	mov.d     w12, w10
    1d9e:	00 02 eb    	clr.w     w4
    1da0:	01 00 37    	bra       0x1da4 <.L5>

00001da2 <.L13>:
    1da2:	0c 05 be    	mov.d     w12, w10

00001da4 <.L5>:
    1da4:	4e 00 90    	mov.w     [w14+8], w0
    1da6:	6e 01 90    	mov.w     [w14+12], w2
    1da8:	00 01 51    	sub.w     w2, w0, w2
    1daa:	cf 91 de    	asr.w     w2, #0xf, w3
    1dac:	8a 0f 51    	sub.w     w2, w10, [w15]
    1dae:	8b 8f 59    	subb.w    w3, w11, [w15]
    1db0:	02 00 31    	bra       C, 0x1db6 <.L6>
    1db2:	02 05 be    	mov.d     w2, w10
    1db4:	00 02 eb    	clr.w     w4

00001db6 <.L6>:
    1db6:	0a 01 be    	mov.d     w10, w2
    1db8:	ff b0 97    	mov.w     [w15-18], w1
    1dba:	84 bf 9f    	mov.w     w4, [w15-16]
    1dbc:	69 fc 07    	rcall     0x1690 <_memcpy>
    1dbe:	0a 06 56    	sub.w     w12, w10, w12
    1dc0:	8b 86 5e    	subb.w    w13, w11, w13
    1dc2:	4e 00 90    	mov.w     [w14+8], w0
    1dc4:	0a 00 40    	add.w     w0, w10, w0
    1dc6:	40 07 98    	mov.w     w0, [w14+8]
    1dc8:	0f ba 97    	mov.w     [w15-16], w4
    1dca:	04 00 e0    	cp0.w     w4
    1dcc:	04 00 32    	bra       Z, 0x1dd6 <.L7>
    1dce:	0e 00 78    	mov.w     w14, w0
    1dd0:	2f ff 07    	rcall     0x1c30 <__DNKfflush>
    1dd2:	00 00 e0    	cp0.w     w0
    1dd4:	07 00 3a    	bra       NZ, 0x1de4 <.L4>

00001dd6 <.L7>:
    1dd6:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1dd8:	e0 8f 5e    	subb.w    w13, #0x0, [w15]
    1dda:	04 00 32    	bra       Z, 0x1de4 <.L4>
    1ddc:	7f b0 97    	mov.w     [w15-18], w0
    1dde:	0a 00 40    	add.w     w0, w10, w0
    1de0:	f0 b7 9f    	mov.w     w0, [w15-18]
    1de2:	c5 ff 37    	bra       0x1d6e <.L8>

00001de4 <.L4>:
    1de4:	00 80 20    	mov.w     #0x800, w0
    1de6:	1e 00 60    	and.w     w0, [w14], w0
    1de8:	02 00 32    	bra       Z, 0x1dee <.L9>
    1dea:	0e 00 78    	mov.w     w14, w0
    1dec:	21 ff 07    	rcall     0x1c30 <__DNKfflush>

00001dee <.L9>:
    1dee:	00 c0 20    	mov.w     #0xc00, w0
    1df0:	1e 00 60    	and.w     w0, [w14], w0
    1df2:	02 00 32    	bra       Z, 0x1df8 <.L10>
    1df4:	ce 00 90    	mov.w     [w14+8], w1
    1df6:	61 07 98    	mov.w     w1, [w14+12]

00001df8 <.L10>:
    1df8:	5f b1 97    	mov.w     [w15-22], w2
    1dfa:	ef b1 97    	mov.w     [w15-20], w3
    1dfc:	0c 00 51    	sub.w     w2, w12, w0
    1dfe:	8d 80 59    	subb.w    w3, w13, w1
    1e00:	08 01 be    	mov.d     w8, w2
    1e02:	a3 02 07    	rcall     0x234a <___udivsi3>
    1e04:	00 05 be    	mov.d     w0, w10
    1e06:	01 00 37    	bra       0x1e0a <.L2>

00001e08 <.L11>:
    1e08:	60 55 b8    	mul.uu    w10, #0x0, w10

00001e0a <.L2>:
    1e0a:	0a 00 be    	mov.d     w10, w0
    1e0c:	4f 07 78    	mov.w     [--w15], w14
    1e0e:	4f 06 be    	mov.d     [--w15], w12
    1e10:	4f 05 be    	mov.d     [--w15], w10
    1e12:	4f 04 be    	mov.d     [--w15], w8
    1e14:	af 00 b1    	sub.w     #0xa, w15
    1e16:	00 00 06    	return    

00001e18 <_findmem>:
    1e18:	88 9f be    	mov.d     w8, [w15++]
    1e1a:	8a 9f be    	mov.d     w10, [w15++]
    1e1c:	00 04 be    	mov.d     w0, w8

00001e1e <.L14>:
    1e1e:	31 62 80    	mov.w     0xc46, w1
    1e20:	01 00 e0    	cp0.w     w1
    1e22:	02 00 32    	bra       Z, 0x1e28 <.L2>
    1e24:	01 00 78    	mov.w     w1, w0
    1e26:	0f 00 37    	bra       0x1e46 <.L3>

00001e28 <.L2>:
    1e28:	41 62 80    	mov.w     0xc48, w1
    1e2a:	80 c4 20    	mov.w     #0xc48, w0
    1e2c:	05 00 37    	bra       0x1e38 <.L4>

00001e2e <.L6>:
    1e2e:	b1 0f 54    	sub.w     w8, [w1++], [w15]
    1e30:	a1 8f 5c    	subb.w    w9, [w1--], [w15]
    1e32:	2b 00 36    	bra       LEU, 0x1e8a <.L5>
    1e34:	64 80 40    	add.w     w1, #0x4, w0
    1e36:	a1 00 90    	mov.w     [w1+4], w1

00001e38 <.L4>:
    1e38:	01 00 e0    	cp0.w     w1
    1e3a:	f9 ff 3a    	bra       NZ, 0x1e2e <.L6>
    1e3c:	12 00 37    	bra       0x1e62 <.L7>

00001e3e <.L8>:
    1e3e:	b2 0f 54    	sub.w     w8, [w2++], [w15]
    1e40:	a2 8f 5c    	subb.w    w9, [w2--], [w15]
    1e42:	23 00 36    	bra       LEU, 0x1e8a <.L5>
    1e44:	64 00 41    	add.w     w2, #0x4, w0

00001e46 <.L3>:
    1e46:	10 01 78    	mov.w     [w0], w2
    1e48:	02 00 e0    	cp0.w     w2
    1e4a:	f9 ff 3a    	bra       NZ, 0x1e3e <.L8>
    1e4c:	11 01 78    	mov.w     [w1], w2
    1e4e:	41 62 80    	mov.w     0xc48, w1
    1e50:	80 c4 20    	mov.w     #0xc48, w0
    1e52:	05 00 37    	bra       0x1e5e <.L9>

00001e54 <.L10>:
    1e54:	b1 0f 54    	sub.w     w8, [w1++], [w15]
    1e56:	a1 8f 5c    	subb.w    w9, [w1--], [w15]
    1e58:	18 00 36    	bra       LEU, 0x1e8a <.L5>
    1e5a:	64 80 40    	add.w     w1, #0x4, w0
    1e5c:	a1 00 90    	mov.w     [w1+4], w1

00001e5e <.L9>:
    1e5e:	82 8f 50    	sub.w     w1, w2, [w15]
    1e60:	f9 ff 3a    	bra       NZ, 0x1e54 <.L10>

00001e62 <.L7>:
    1e62:	1a 62 80    	mov.w     0xc42, w10
    1e64:	2b 62 80    	mov.w     0xc44, w11

00001e66 <.L13>:
    1e66:	88 0f 55    	sub.w     w10, w8, [w15]
    1e68:	89 8f 5d    	subb.w    w11, w9, [w15]
    1e6a:	01 00 31    	bra       C, 0x1e6e <.L11>
    1e6c:	08 05 be    	mov.d     w8, w10

00001e6e <.L11>:
    1e6e:	0a 00 be    	mov.d     w10, w0
    1e70:	5e 00 07    	rcall     0x1f2e <__Getmem>
    1e72:	00 00 e0    	cp0.w     w0
    1e74:	06 00 3a    	bra       NZ, 0x1e82 <.L12>
    1e76:	88 0f 55    	sub.w     w10, w8, [w15]
    1e78:	89 8f 5d    	subb.w    w11, w9, [w15]
    1e7a:	06 00 32    	bra       Z, 0x1e88 <.L15>
    1e7c:	8b 05 d1    	lsr.w     w11, w11
    1e7e:	0a 85 d3    	rrc.w     w10, w10
    1e80:	f2 ff 37    	bra       0x1e66 <.L13>

00001e82 <.L12>:
    1e82:	0a 98 be    	mov.d     w10, [w0++]
    1e84:	2a ff 07    	rcall     0x1cda <_free>
    1e86:	cb ff 37    	bra       0x1e1e <.L14>

00001e88 <.L15>:
    1e88:	00 00 eb    	clr.w     w0

00001e8a <.L5>:
    1e8a:	4f 05 be    	mov.d     [--w15], w10
    1e8c:	4f 04 be    	mov.d     [--w15], w8
    1e8e:	00 00 06    	return    

00001e90 <_malloc>:
    1e90:	88 9f be    	mov.d     w8, [w15++]
    1e92:	00 02 be    	mov.d     w0, w4
    1e94:	65 00 40    	add.w     w0, #0x5, w0
    1e96:	e0 80 48    	addc.w    w1, #0x0, w1
    1e98:	00 03 78    	mov.w     w0, w6
    1e9a:	06 00 a1    	bclr.w    w6, #0x0
    1e9c:	81 01 78    	mov.w     w1, w3
    1e9e:	06 01 78    	mov.w     w6, w2
    1ea0:	02 04 be    	mov.d     w2, w8
    1ea2:	80 00 eb    	clr.w     w1
    1ea4:	84 0f 54    	sub.w     w8, w4, [w15]
    1ea6:	85 8f 5c    	subb.w    w9, w5, [w15]
    1ea8:	27 00 36    	bra       LEU, 0x1ef8 <.L17>
    1eaa:	e5 0f 54    	sub.w     w8, #0x5, [w15]
    1eac:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1eae:	02 00 3e    	bra       GTU, 0x1eb4 <.L18>
    1eb0:	68 00 20    	mov.w     #0x6, w8
    1eb2:	09 00 20    	mov.w     #0x0, w9

00001eb4 <.L18>:
    1eb4:	08 00 be    	mov.d     w8, w0
    1eb6:	b0 ff 07    	rcall     0x1e18 <_findmem>
    1eb8:	80 00 eb    	clr.w     w1
    1eba:	00 00 e0    	cp0.w     w0
    1ebc:	1d 00 32    	bra       Z, 0x1ef8 <.L17>
    1ebe:	90 00 78    	mov.w     [w0], w1
    1ec0:	a4 ff 2f    	mov.w     #0xfffa, w4
    1ec2:	f5 ff 2f    	mov.w     #0xffff, w5
    1ec4:	31 01 42    	add.w     w4, [w1++], w2
    1ec6:	a1 81 4a    	addc.w    w5, [w1--], w3
    1ec8:	88 0f 51    	sub.w     w2, w8, [w15]
    1eca:	89 8f 59    	subb.w    w3, w9, [w15]
    1ecc:	03 00 31    	bra       C, 0x1ed4 <.L19>
    1ece:	a1 02 90    	mov.w     [w1+4], w5
    1ed0:	05 08 78    	mov.w     w5, [w0]
    1ed2:	08 00 37    	bra       0x1ee4 <.L20>

00001ed4 <.L19>:
    1ed4:	08 81 40    	add.w     w1, w8, w2
    1ed6:	02 08 78    	mov.w     w2, [w0]
    1ed8:	a1 01 90    	mov.w     [w1+4], w3
    1eda:	23 01 98    	mov.w     w3, [w2+4]
    1edc:	10 01 78    	mov.w     [w0], w2
    1ede:	31 19 14    	subr.w    w8, [w1++], [w2++]
    1ee0:	21 91 1c    	subbr.w   w9, [w1--], [w2--]
    1ee2:	88 88 be    	mov.d     w8, [w1]

00001ee4 <.L20>:
    1ee4:	10 01 78    	mov.w     [w0], w2
    1ee6:	00 00 eb    	clr.w     w0
    1ee8:	02 00 e0    	cp0.w     w2
    1eea:	04 00 32    	bra       Z, 0x1ef4 <.L21>
    1eec:	a2 01 90    	mov.w     [w2+4], w3
    1eee:	03 00 e0    	cp0.w     w3
    1ef0:	01 00 32    	bra       Z, 0x1ef4 <.L21>
    1ef2:	64 00 41    	add.w     w2, #0x4, w0

00001ef4 <.L21>:
    1ef4:	30 62 88    	mov.w     w0, 0xc46
    1ef6:	e4 80 40    	add.w     w1, #0x4, w1

00001ef8 <.L17>:
    1ef8:	01 00 78    	mov.w     w1, w0
    1efa:	4f 04 be    	mov.d     [--w15], w8
    1efc:	00 00 06    	return    

00001efe <_memchr>:
    1efe:	88 9f be    	mov.d     w8, [w15++]
    1f00:	8a 9f be    	mov.d     w10, [w15++]
    1f02:	02 02 be    	mov.d     w2, w4
    1f04:	80 01 eb    	clr.w     w3
    1f06:	06 00 37    	bra       0x1f14 <.L2>

00001f08 <.L4>:
    1f08:	83 01 e8    	inc.w     w3, w3
    1f0a:	66 41 7c    	mov.b     [w6+w8], w2
    1f0c:	81 4f 51    	sub.b     w2, w1, [w15]
    1f0e:	0b 00 32    	bra       Z, 0x1f26 <.L5>
    1f10:	61 02 52    	sub.w     w4, #0x1, w4
    1f12:	e0 82 5a    	subb.w    w5, #0x0, w5

00001f14 <.L2>:
    1f14:	61 03 b8    	mul.uu    w0, #0x1, w6
    1f16:	61 1c b8    	mul.uu    w3, #0x1, w8
    1f18:	08 05 43    	add.w     w6, w8, w10
    1f1a:	89 85 4b    	addc.w    w7, w9, w11
    1f1c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f1e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f20:	f3 ff 3a    	bra       NZ, 0x1f08 <.L4>
    1f22:	00 00 eb    	clr.w     w0
    1f24:	01 00 37    	bra       0x1f28 <.L3>

00001f26 <.L5>:
    1f26:	0a 00 78    	mov.w     w10, w0

00001f28 <.L3>:
    1f28:	4f 05 be    	mov.d     [--w15], w10
    1f2a:	4f 04 be    	mov.d     [--w15], w8
    1f2c:	00 00 06    	return    

00001f2e <__Getmem>:
    1f2e:	00 01 be    	mov.d     w0, w2
    1f30:	80 00 eb    	clr.w     w1
    1f32:	02 00 e0    	cp0.w     w2
    1f34:	06 00 34    	bra       LE, 0x1f42 <.L2>
    1f36:	02 00 78    	mov.w     w2, w0
    1f38:	7a f9 07    	rcall     0x122e <_sbrk>
    1f3a:	80 00 78    	mov.w     w0, w1
    1f3c:	e1 8f 40    	add.w     w1, #0x1, [w15]
    1f3e:	01 00 3a    	bra       NZ, 0x1f42 <.L2>
    1f40:	80 00 eb    	clr.w     w1

00001f42 <.L2>:
    1f42:	01 00 78    	mov.w     w1, w0
    1f44:	00 00 06    	return    

00001f46 <__Litob>:
    1f46:	fc 87 47    	add.w     w15, #0x1c, w15
    1f48:	88 9f be    	mov.d     w8, [w15++]
    1f4a:	8a 9f be    	mov.d     w10, [w15++]
    1f4c:	8c 9f be    	mov.d     w12, [w15++]
    1f4e:	8e 1f 78    	mov.w     w14, [w15++]
    1f50:	00 06 78    	mov.w     w0, w12
    1f52:	80 c5 b3    	mov.b     #0x58, w0
    1f54:	80 cf 50    	sub.b     w1, w0, [w15]
    1f56:	0a 00 32    	bra       Z, 0x1f6c <.L35>
    1f58:	77 40 40    	add.b     w0, #0x17, w0
    1f5a:	80 cf 50    	sub.b     w1, w0, [w15]
    1f5c:	0a 00 32    	bra       Z, 0x1f72 <.L36>
    1f5e:	69 40 40    	add.b     w0, #0x9, w0
    1f60:	80 cf 50    	sub.b     w1, w0, [w15]
    1f62:	0b 00 32    	bra       Z, 0x1f7a <.L37>
    1f64:	70 c0 20    	mov.w     #0xc07, w0
    1f66:	80 bf 9f    	mov.w     w0, [w15-16]
    1f68:	ae 00 20    	mov.w     #0xa, w14
    1f6a:	0a 00 37    	bra       0x1f80 <.L2>

00001f6c <.L35>:
    1f6c:	62 bf 20    	mov.w     #0xbf6, w2
    1f6e:	82 bf 9f    	mov.w     w2, [w15-16]
    1f70:	06 00 37    	bra       0x1f7e <.L46>

00001f72 <.L36>:
    1f72:	73 c0 20    	mov.w     #0xc07, w3
    1f74:	83 bf 9f    	mov.w     w3, [w15-16]
    1f76:	8e 00 20    	mov.w     #0x8, w14
    1f78:	03 00 37    	bra       0x1f80 <.L2>

00001f7a <.L37>:
    1f7a:	74 c0 20    	mov.w     #0xc07, w4
    1f7c:	84 bf 9f    	mov.w     w4, [w15-16]

00001f7e <.L46>:
    1f7e:	0e 01 20    	mov.w     #0x10, w14

00001f80 <.L2>:
    1f80:	3c 02 be    	mov.d     [w12++], w4
    1f82:	2c 03 be    	mov.d     [w12--], w6
    1f84:	06 05 be    	mov.d     w6, w10
    1f86:	04 04 be    	mov.d     w4, w8
    1f88:	40 c6 b3    	mov.b     #0x64, w0
    1f8a:	80 cf 50    	sub.b     w1, w0, [w15]
    1f8c:	03 00 32    	bra       Z, 0x1f94 <.L3>
    1f8e:	65 40 40    	add.b     w0, #0x5, w0
    1f90:	80 cf 50    	sub.b     w1, w0, [w15]
    1f92:	0b 00 3a    	bra       NZ, 0x1faa <.L4>

00001f94 <.L3>:
    1f94:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f96:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f98:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f9a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f9c:	06 00 3d    	bra       GE, 0x1faa <.L4>
    1f9e:	60 00 b8    	mul.uu    w0, #0x0, w0
    1fa0:	60 11 b8    	mul.uu    w2, #0x0, w2
    1fa2:	04 04 50    	sub.w     w0, w4, w8
    1fa4:	85 84 58    	subb.w    w1, w5, w9
    1fa6:	06 05 59    	subb.w    w2, w6, w10
    1fa8:	87 85 59    	subb.w    w3, w7, w11

00001faa <.L4>:
    1faa:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1fac:	04 00 32    	bra       Z, 0x1fb6 <.L38>
    1fae:	40 00 20    	mov.w     #0x4, w0
    1fb0:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1fb2:	38 00 3a    	bra       NZ, 0x2024 <.L51>
    1fb4:	01 00 37    	bra       0x1fb8 <.L6>

00001fb6 <.L38>:
    1fb6:	30 00 20    	mov.w     #0x3, w0

00001fb8 <.L6>:
    1fb8:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1fba:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1fbc:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1fbe:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1fc0:	04 00 3a    	bra       NZ, 0x1fca <.L8>
    1fc2:	dc 08 90    	mov.w     [w12+26], w1
    1fc4:	8d 01 20    	mov.w     #0x18, w13
    1fc6:	01 00 e0    	cp0.w     w1
    1fc8:	06 00 32    	bra       Z, 0x1fd6 <.L9>

00001fca <.L8>:
    1fca:	8e 00 e9    	dec.w     w14, w1
    1fcc:	88 80 60    	and.w     w1, w8, w1
    1fce:	8f ba 97    	mov.w     [w15-16], w5
    1fd0:	e5 c0 78    	mov.b     [w5+w1], w1
    1fd2:	f1 ef 9f    	mov.b     w1, [w15-17]
    1fd4:	7d 01 20    	mov.w     #0x17, w13

00001fd6 <.L9>:
    1fd6:	80 00 78    	mov.w     w0, w1

00001fd8 <.LB114>:
    1fd8:	81 00 e9    	dec.w     w1, w1
    1fda:	05 00 33    	bra       N, 0x1fe6 <.LE114>
    1fdc:	8b 05 d1    	lsr.w     w11, w11
    1fde:	0a 85 d3    	rrc.w     w10, w10
    1fe0:	89 84 d3    	rrc.w     w9, w9
    1fe2:	08 84 d3    	rrc.w     w8, w8
    1fe4:	f9 ff 37    	bra       0x1fd8 <.LB114>

00001fe6 <.LE114>:
    1fe6:	08 9e be    	mov.d     w8, [w12++]
    1fe8:	0a 96 be    	mov.d     w10, [w12--]
    1fea:	12 00 37    	bra       0x2010 <.L10>

00001fec <.L12>:
    1fec:	8d 06 e9    	dec.w     w13, w13
    1fee:	8e 00 e9    	dec.w     w14, w1
    1ff0:	84 80 60    	and.w     w1, w4, w1
    1ff2:	0f b9 97    	mov.w     [w15-16], w2
    1ff4:	e2 c1 78    	mov.b     [w2+w1], w3
    1ff6:	82 fd 2f    	mov.w     #0xffd8, w2
    1ff8:	0f 01 41    	add.w     w2, w15, w2
    1ffa:	03 f1 7e    	mov.b     w3, [w2+w13]
    1ffc:	80 00 78    	mov.w     w0, w1

00001ffe <.LB143>:
    1ffe:	81 00 e9    	dec.w     w1, w1
    2000:	05 00 33    	bra       N, 0x200c <.LE143>
    2002:	87 83 d1    	asr.w     w7, w7
    2004:	06 83 d3    	rrc.w     w6, w6
    2006:	85 82 d3    	rrc.w     w5, w5
    2008:	04 82 d3    	rrc.w     w4, w4
    200a:	f9 ff 37    	bra       0x1ffe <.LB143>

0000200c <.LE143>:
    200c:	04 9e be    	mov.d     w4, [w12++]
    200e:	06 96 be    	mov.d     w6, [w12--]

00002010 <.L10>:
    2010:	3c 02 be    	mov.d     [w12++], w4
    2012:	2c 03 be    	mov.d     [w12--], w6
    2014:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2016:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2018:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    201a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    201c:	8b 00 34    	bra       LE, 0x2134 <.L11>
    201e:	0d 00 e0    	cp0.w     w13
    2020:	e5 ff 3c    	bra       GT, 0x1fec <.L12>
    2022:	88 00 37    	bra       0x2134 <.L11>

00002024 <.L51>:
    2024:	2c 60 90    	mov.b     [w12+34], w0
    2026:	81 c6 b3    	mov.b     #0x68, w1
    2028:	81 4f 50    	sub.b     w0, w1, [w15]
    202a:	0b 00 32    	bra       Z, 0x2042 <.L14>
    202c:	06 00 3c    	bra       GT, 0x203a <.L16>
    202e:	00 04 e0    	cp0.b     w0
    2030:	08 00 32    	bra       Z, 0x2042 <.L14>
    2032:	e6 c0 50    	sub.b     w1, #0x6, w1
    2034:	81 4f 50    	sub.b     w0, w1, [w15]
    2036:	4e 00 3a    	bra       NZ, 0x20d4 <.L13>
    2038:	04 00 37    	bra       0x2042 <.L14>

0000203a <.L16>:
    203a:	c1 c6 b3    	mov.b     #0x6c, w1
    203c:	81 4f 50    	sub.b     w0, w1, [w15]
    203e:	4a 00 3a    	bra       NZ, 0x20d4 <.L13>
    2040:	21 00 37    	bra       0x2084 <.L52>

00002042 <.L14>:
    2042:	08 00 e0    	cp0.w     w8
    2044:	04 00 3a    	bra       NZ, 0x204e <.L17>
    2046:	5c 08 90    	mov.w     [w12+26], w0
    2048:	8d 01 20    	mov.w     #0x18, w13
    204a:	00 00 e0    	cp0.w     w0
    204c:	06 00 32    	bra       Z, 0x205a <.L18>

0000204e <.L17>:
    204e:	11 00 09    	repeat    #0x11
    2050:	0e 84 d8    	div.uw    w8, w14
    2052:	0f b9 97    	mov.w     [w15-16], w2
    2054:	e2 c0 78    	mov.b     [w2+w1], w1
    2056:	f1 ef 9f    	mov.b     w1, [w15-17]
    2058:	7d 01 20    	mov.w     #0x17, w13

0000205a <.L18>:
    205a:	11 00 09    	repeat    #0x11
    205c:	0e 84 d8    	div.uw    w8, w14
    205e:	0a 00 37    	bra       0x2074 <.L47>

00002060 <.L21>:
    2060:	11 00 09    	repeat    #0x11
    2062:	0e 04 d8    	div.sw    w8, w14
    2064:	8d 06 e9    	dec.w     w13, w13
    2066:	0e 81 b9    	mul.ss    w0, w14, w2
    2068:	02 04 54    	sub.w     w8, w2, w8
    206a:	8f b8 97    	mov.w     [w15-16], w1
    206c:	61 41 7c    	mov.b     [w1+w8], w2
    206e:	81 fd 2f    	mov.w     #0xffd8, w1
    2070:	8f 80 40    	add.w     w1, w15, w1
    2072:	82 f0 7e    	mov.b     w2, [w1+w13]

00002074 <.L47>:
    2074:	00 04 78    	mov.w     w0, w8
    2076:	08 00 e0    	cp0.w     w8
    2078:	02 00 32    	bra       Z, 0x207e <.L20>
    207a:	0d 00 e0    	cp0.w     w13
    207c:	f1 ff 3c    	bra       GT, 0x2060 <.L21>

0000207e <.L20>:
    207e:	cf c4 de    	asr.w     w8, #0xf, w9
    2080:	61 4d b9    	mul.su    w9, #0x1, w10
    2082:	25 00 37    	bra       0x20ce <.L50>

00002084 <.L52>:
    2084:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2086:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2088:	04 00 3a    	bra       NZ, 0x2092 <.L22>
    208a:	5c 08 90    	mov.w     [w12+26], w0
    208c:	8d 01 20    	mov.w     #0x18, w13
    208e:	00 00 e0    	cp0.w     w0
    2090:	07 00 32    	bra       Z, 0x20a0 <.L23>

00002092 <.L22>:
    2092:	61 71 b9    	mul.su    w14, #0x1, w2
    2094:	08 00 be    	mov.d     w8, w0
    2096:	69 01 07    	rcall     0x236a <___umodsi3>
    2098:	8f b9 97    	mov.w     [w15-16], w3
    209a:	e3 41 78    	mov.b     [w3+w0], w3
    209c:	f3 ef 9f    	mov.b     w3, [w15-17]
    209e:	7d 01 20    	mov.w     #0x17, w13

000020a0 <.L23>:
    20a0:	61 71 b9    	mul.su    w14, #0x1, w2
    20a2:	08 00 be    	mov.d     w8, w0
    20a4:	52 01 07    	rcall     0x234a <___udivsi3>
    20a6:	0b 00 37    	bra       0x20be <.L48>

000020a8 <.L26>:
    20a8:	61 71 b9    	mul.su    w14, #0x1, w2
    20aa:	08 00 be    	mov.d     w8, w0
    20ac:	3f 01 07    	rcall     0x232c <___divsi3>
    20ae:	8d 06 e9    	dec.w     w13, w13
    20b0:	00 f1 b9    	mul.ss    w14, w0, w2
    20b2:	02 04 54    	sub.w     w8, w2, w8
    20b4:	0f ba 97    	mov.w     [w15-16], w4
    20b6:	e4 42 7c    	mov.b     [w4+w8], w5
    20b8:	84 fd 2f    	mov.w     #0xffd8, w4
    20ba:	0f 02 42    	add.w     w4, w15, w4
    20bc:	05 f2 7e    	mov.b     w5, [w4+w13]

000020be <.L48>:
    20be:	00 04 be    	mov.d     w0, w8
    20c0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    20c2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    20c4:	02 00 32    	bra       Z, 0x20ca <.L25>
    20c6:	0d 00 e0    	cp0.w     w13
    20c8:	ef ff 3c    	bra       GT, 0x20a8 <.L26>

000020ca <.L25>:
    20ca:	4f cd de    	asr.w     w9, #0xf, w10
    20cc:	8a 05 78    	mov.w     w10, w11

000020ce <.L50>:
    20ce:	08 9e be    	mov.d     w8, [w12++]
    20d0:	0a 96 be    	mov.d     w10, [w12--]
    20d2:	30 00 37    	bra       0x2134 <.L11>

000020d4 <.L13>:
    20d4:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    20d6:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    20d8:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    20da:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    20dc:	04 00 3a    	bra       NZ, 0x20e6 <.L27>
    20de:	5c 08 90    	mov.w     [w12+26], w0
    20e0:	8d 01 20    	mov.w     #0x18, w13
    20e2:	00 00 e0    	cp0.w     w0
    20e4:	09 00 32    	bra       Z, 0x20f8 <.L28>

000020e6 <.L27>:
    20e6:	61 72 b9    	mul.su    w14, #0x1, w4
    20e8:	61 2b b9    	mul.su    w5, #0x1, w6
    20ea:	08 00 be    	mov.d     w8, w0
    20ec:	0a 01 be    	mov.d     w10, w2
    20ee:	e6 01 07    	rcall     0x24bc <___umoddi3>
    20f0:	0f ba 97    	mov.w     [w15-16], w4
    20f2:	64 42 78    	mov.b     [w4+w0], w4
    20f4:	f4 ef 9f    	mov.b     w4, [w15-17]
    20f6:	7d 01 20    	mov.w     #0x17, w13

000020f8 <.L28>:
    20f8:	61 72 b9    	mul.su    w14, #0x1, w4
    20fa:	61 2b b9    	mul.su    w5, #0x1, w6
    20fc:	08 00 be    	mov.d     w8, w0
    20fe:	0a 01 be    	mov.d     w10, w2
    2100:	d6 01 07    	rcall     0x24ae <___udivdi3>
    2102:	0d 00 37    	bra       0x211e <.L49>

00002104 <.L30>:
    2104:	61 72 b9    	mul.su    w14, #0x1, w4
    2106:	61 2b b9    	mul.su    w5, #0x1, w6
    2108:	08 00 be    	mov.d     w8, w0
    210a:	0a 01 be    	mov.d     w10, w2
    210c:	db 01 07    	rcall     0x24c4 <___divdi3>
    210e:	8d 06 e9    	dec.w     w13, w13
    2110:	00 f2 b9    	mul.ss    w14, w0, w4
    2112:	04 04 54    	sub.w     w8, w4, w8
    2114:	8f ba 97    	mov.w     [w15-16], w5
    2116:	65 42 7c    	mov.b     [w5+w8], w4
    2118:	85 fd 2f    	mov.w     #0xffd8, w5
    211a:	8f 82 42    	add.w     w5, w15, w5
    211c:	84 f2 7e    	mov.b     w4, [w5+w13]

0000211e <.L49>:
    211e:	00 9e be    	mov.d     w0, [w12++]
    2120:	02 96 be    	mov.d     w2, [w12--]
    2122:	3c 04 be    	mov.d     [w12++], w8
    2124:	2c 05 be    	mov.d     [w12--], w10
    2126:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2128:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    212a:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    212c:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    212e:	02 00 34    	bra       LE, 0x2134 <.L11>
    2130:	0d 00 e0    	cp0.w     w13
    2132:	e8 ff 3c    	bra       GT, 0x2104 <.L30>

00002134 <.L11>:
    2134:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    2136:	10 00 3a    	bra       NZ, 0x2158 <.L31>
    2138:	0c 10 90    	mov.w     [w12+32], w0
    213a:	00 38 a3    	btst.z    w0, #0x3
    213c:	0d 00 32    	bra       Z, 0x2158 <.L31>
    213e:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    2140:	06 00 3e    	bra       GTU, 0x214e <.L32>
    2142:	85 fd 2f    	mov.w     #0xffd8, w5
    2144:	8f 82 42    	add.w     w5, w15, w5
    2146:	e5 c0 7e    	mov.b     [w5+w13], w1
    2148:	00 c3 b3    	mov.b     #0x30, w0
    214a:	80 cf 50    	sub.b     w1, w0, [w15]
    214c:	05 00 32    	bra       Z, 0x2158 <.L31>

0000214e <.L32>:
    214e:	8d 06 e9    	dec.w     w13, w13
    2150:	02 c3 b3    	mov.b     #0x30, w2
    2152:	81 fd 2f    	mov.w     #0xffd8, w1
    2154:	8f 80 40    	add.w     w1, w15, w1
    2156:	82 f0 7e    	mov.b     w2, [w1+w13]

00002158 <.L31>:
    2158:	f8 80 16    	subr.w    w13, #0x18, w1
    215a:	11 0e 98    	mov.w     w1, [w12+18]
    215c:	6c 00 90    	mov.w     [w12+12], w0
    215e:	61 09 b9    	mul.su    w1, #0x1, w2
    2160:	84 fd 2f    	mov.w     #0xffd8, w4
    2162:	0f 02 42    	add.w     w4, w15, w4
    2164:	8d 00 42    	add.w     w4, w13, w1
    2166:	94 fa 07    	rcall     0x1690 <_memcpy>
    2168:	1c 08 90    	mov.w     [w12+18], w0
    216a:	dc 08 90    	mov.w     [w12+26], w1
    216c:	81 0f 50    	sub.w     w0, w1, [w15]
    216e:	06 00 3d    	bra       GE, 0x217c <.L33>
    2170:	00 80 50    	sub.w     w1, w0, w0
    2172:	00 0e 98    	mov.w     w0, [w12+16]
    2174:	0c 10 90    	mov.w     [w12+32], w0
    2176:	00 40 a1    	bclr.w    w0, #0x4
    2178:	00 16 98    	mov.w     w0, [w12+32]
    217a:	0f 00 37    	bra       0x219a <.L1>

0000217c <.L33>:
    217c:	01 00 e0    	cp0.w     w1
    217e:	0d 00 3d    	bra       GE, 0x219a <.L1>
    2180:	8c 10 90    	mov.w     [w12+32], w1
    2182:	f4 80 60    	and.w     w1, #0x14, w1
    2184:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    2186:	09 00 3a    	bra       NZ, 0x219a <.L1>
    2188:	7c 09 90    	mov.w     [w12+30], w2
    218a:	fc 00 90    	mov.w     [w12+14], w1
    218c:	81 00 51    	sub.w     w2, w1, w1
    218e:	0c 09 90    	mov.w     [w12+16], w2
    2190:	82 80 50    	sub.w     w1, w2, w1
    2192:	00 80 50    	sub.w     w1, w0, w0
    2194:	42 40 a9    	bclr.b    0x42, #0x2
    2196:	01 00 34    	bra       LE, 0x219a <.L1>
    2198:	00 0e 98    	mov.w     w0, [w12+16]

0000219a <.L1>:
    219a:	4f 07 78    	mov.w     [--w15], w14
    219c:	4f 06 be    	mov.d     [--w15], w12
    219e:	4f 05 be    	mov.d     [--w15], w10
    21a0:	4f 04 be    	mov.d     [--w15], w8
    21a2:	cf 01 b1    	sub.w     #0x1c, w15
    21a4:	00 00 06    	return    

000021a6 <__Puttxt>:
    21a6:	04 00 fa    	lnk       #0x4
    21a8:	88 9f be    	mov.d     w8, [w15++]
    21aa:	8a 9f be    	mov.d     w10, [w15++]
    21ac:	8c 1f 78    	mov.w     w12, [w15++]
    21ae:	00 04 78    	mov.w     w0, w8
    21b0:	01 06 78    	mov.w     w1, w12
    21b2:	f8 0d 90    	mov.w     [w8+30], w11
    21b4:	78 00 90    	mov.w     [w8+14], w0
    21b6:	80 85 55    	sub.w     w11, w0, w11
    21b8:	08 08 90    	mov.w     [w8+16], w0
    21ba:	80 85 55    	sub.w     w11, w0, w11
    21bc:	18 08 90    	mov.w     [w8+18], w0
    21be:	80 85 55    	sub.w     w11, w0, w11
    21c0:	28 08 90    	mov.w     [w8+20], w0
    21c2:	80 85 55    	sub.w     w11, w0, w11
    21c4:	38 08 90    	mov.w     [w8+22], w0
    21c6:	80 85 55    	sub.w     w11, w0, w11
    21c8:	48 08 90    	mov.w     [w8+24], w0
    21ca:	80 85 55    	sub.w     w11, w0, w11
    21cc:	00 02 22    	mov.w     #0x2020, w0
    21ce:	90 bf 9f    	mov.w     w0, [w15-14]
    21d0:	00 03 23    	mov.w     #0x3030, w0
    21d2:	a0 bf 9f    	mov.w     w0, [w15-12]
    21d4:	08 10 90    	mov.w     [w8+32], w0
    21d6:	00 28 a3    	btst.z    w0, #0x2
    21d8:	15 00 3a    	bra       NZ, 0x2204 <.L2>
    21da:	0b 00 e0    	cp0.w     w11
    21dc:	13 00 34    	bra       LE, 0x2204 <.L2>
    21de:	0b 05 78    	mov.w     w11, w10

000021e0 <.L5>:
    21e0:	8a 04 78    	mov.w     w10, w9
    21e2:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    21e4:	01 00 36    	bra       LEU, 0x21e8 <.L3>
    21e6:	29 00 20    	mov.w     #0x2, w9

000021e8 <.L3>:
    21e8:	61 49 b9    	mul.su    w9, #0x1, w2
    21ea:	48 02 90    	mov.w     [w8+8], w4
    21ec:	ee 80 57    	sub.w     w15, #0xe, w1
    21ee:	58 00 90    	mov.w     [w8+10], w0
    21f0:	04 00 01    	call      w4
    21f2:	50 04 98    	mov.w     w0, [w8+10]
    21f4:	00 00 e0    	cp0.w     w0
    21f6:	8f 00 32    	bra       Z, 0x2316 <.L29>
    21f8:	68 08 90    	mov.w     [w8+28], w0
    21fa:	09 00 40    	add.w     w0, w9, w0
    21fc:	60 0c 98    	mov.w     w0, [w8+28]
    21fe:	09 05 55    	sub.w     w10, w9, w10
    2200:	42 40 a9    	bclr.b    0x42, #0x2
    2202:	ee ff 3c    	bra       GT, 0x21e0 <.L5>

00002204 <.L2>:
    2204:	78 00 90    	mov.w     [w8+14], w0
    2206:	00 00 e0    	cp0.w     w0
    2208:	0d 00 34    	bra       LE, 0x2224 <.L6>
    220a:	61 01 b9    	mul.su    w0, #0x1, w2
    220c:	48 02 90    	mov.w     [w8+8], w4
    220e:	8c 00 78    	mov.w     w12, w1
    2210:	58 00 90    	mov.w     [w8+10], w0
    2212:	04 00 01    	call      w4
    2214:	50 04 98    	mov.w     w0, [w8+10]
    2216:	80 80 eb    	setm.w    w1
    2218:	00 00 e0    	cp0.w     w0
    221a:	7e 00 32    	bra       Z, 0x2318 <.L4>
    221c:	e8 08 90    	mov.w     [w8+28], w1
    221e:	78 00 90    	mov.w     [w8+14], w0
    2220:	00 80 40    	add.w     w1, w0, w0
    2222:	60 0c 98    	mov.w     w0, [w8+28]

00002224 <.L6>:
    2224:	88 0c 90    	mov.w     [w8+16], w9

00002226 <.L30>:
    2226:	09 00 e0    	cp0.w     w9
    2228:	11 00 34    	bra       LE, 0x224c <.L7>
    222a:	09 05 78    	mov.w     w9, w10
    222c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    222e:	01 00 36    	bra       LEU, 0x2232 <.L8>
    2230:	2a 00 20    	mov.w     #0x2, w10

00002232 <.L8>:
    2232:	61 51 b9    	mul.su    w10, #0x1, w2
    2234:	48 02 90    	mov.w     [w8+8], w4
    2236:	ec 80 57    	sub.w     w15, #0xc, w1
    2238:	58 00 90    	mov.w     [w8+10], w0
    223a:	04 00 01    	call      w4
    223c:	50 04 98    	mov.w     w0, [w8+10]
    223e:	00 00 e0    	cp0.w     w0
    2240:	6a 00 32    	bra       Z, 0x2316 <.L29>
    2242:	68 08 90    	mov.w     [w8+28], w0
    2244:	0a 00 40    	add.w     w0, w10, w0
    2246:	60 0c 98    	mov.w     w0, [w8+28]
    2248:	8a 84 54    	sub.w     w9, w10, w9
    224a:	ed ff 37    	bra       0x2226 <.L30>

0000224c <.L7>:
    224c:	18 08 90    	mov.w     [w8+18], w0
    224e:	00 00 e0    	cp0.w     w0
    2250:	0d 00 34    	bra       LE, 0x226c <.L10>
    2252:	61 01 b9    	mul.su    w0, #0x1, w2
    2254:	48 02 90    	mov.w     [w8+8], w4
    2256:	e8 00 90    	mov.w     [w8+12], w1
    2258:	58 00 90    	mov.w     [w8+10], w0
    225a:	04 00 01    	call      w4
    225c:	50 04 98    	mov.w     w0, [w8+10]
    225e:	80 80 eb    	setm.w    w1
    2260:	00 00 e0    	cp0.w     w0
    2262:	5a 00 32    	bra       Z, 0x2318 <.L4>
    2264:	e8 08 90    	mov.w     [w8+28], w1
    2266:	18 08 90    	mov.w     [w8+18], w0
    2268:	00 80 40    	add.w     w1, w0, w0
    226a:	60 0c 98    	mov.w     w0, [w8+28]

0000226c <.L10>:
    226c:	a8 0c 90    	mov.w     [w8+20], w9

0000226e <.L31>:
    226e:	09 00 e0    	cp0.w     w9
    2270:	11 00 34    	bra       LE, 0x2294 <.L11>
    2272:	09 05 78    	mov.w     w9, w10
    2274:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2276:	01 00 36    	bra       LEU, 0x227a <.L12>
    2278:	2a 00 20    	mov.w     #0x2, w10

0000227a <.L12>:
    227a:	61 51 b9    	mul.su    w10, #0x1, w2
    227c:	48 02 90    	mov.w     [w8+8], w4
    227e:	ec 80 57    	sub.w     w15, #0xc, w1
    2280:	58 00 90    	mov.w     [w8+10], w0
    2282:	04 00 01    	call      w4
    2284:	50 04 98    	mov.w     w0, [w8+10]
    2286:	00 00 e0    	cp0.w     w0
    2288:	46 00 32    	bra       Z, 0x2316 <.L29>
    228a:	68 08 90    	mov.w     [w8+28], w0
    228c:	0a 00 40    	add.w     w0, w10, w0
    228e:	60 0c 98    	mov.w     w0, [w8+28]
    2290:	8a 84 54    	sub.w     w9, w10, w9
    2292:	ed ff 37    	bra       0x226e <.L31>

00002294 <.L11>:
    2294:	38 08 90    	mov.w     [w8+22], w0
    2296:	00 00 e0    	cp0.w     w0
    2298:	0f 00 34    	bra       LE, 0x22b8 <.L14>
    229a:	61 01 b9    	mul.su    w0, #0x1, w2
    229c:	18 08 90    	mov.w     [w8+18], w0
    229e:	e8 00 90    	mov.w     [w8+12], w1
    22a0:	80 80 40    	add.w     w1, w0, w1
    22a2:	48 02 90    	mov.w     [w8+8], w4
    22a4:	58 00 90    	mov.w     [w8+10], w0
    22a6:	04 00 01    	call      w4
    22a8:	50 04 98    	mov.w     w0, [w8+10]
    22aa:	80 80 eb    	setm.w    w1
    22ac:	00 00 e0    	cp0.w     w0
    22ae:	34 00 32    	bra       Z, 0x2318 <.L4>
    22b0:	e8 08 90    	mov.w     [w8+28], w1
    22b2:	38 08 90    	mov.w     [w8+22], w0
    22b4:	00 80 40    	add.w     w1, w0, w0
    22b6:	60 0c 98    	mov.w     w0, [w8+28]

000022b8 <.L14>:
    22b8:	c8 0c 90    	mov.w     [w8+24], w9

000022ba <.L32>:
    22ba:	09 00 e0    	cp0.w     w9
    22bc:	11 00 34    	bra       LE, 0x22e0 <.L15>
    22be:	09 05 78    	mov.w     w9, w10
    22c0:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    22c2:	01 00 36    	bra       LEU, 0x22c6 <.L16>
    22c4:	2a 00 20    	mov.w     #0x2, w10

000022c6 <.L16>:
    22c6:	61 51 b9    	mul.su    w10, #0x1, w2
    22c8:	48 02 90    	mov.w     [w8+8], w4
    22ca:	ec 80 57    	sub.w     w15, #0xc, w1
    22cc:	58 00 90    	mov.w     [w8+10], w0
    22ce:	04 00 01    	call      w4
    22d0:	50 04 98    	mov.w     w0, [w8+10]
    22d2:	00 00 e0    	cp0.w     w0
    22d4:	20 00 32    	bra       Z, 0x2316 <.L29>
    22d6:	68 08 90    	mov.w     [w8+28], w0
    22d8:	0a 00 40    	add.w     w0, w10, w0
    22da:	60 0c 98    	mov.w     w0, [w8+28]
    22dc:	8a 84 54    	sub.w     w9, w10, w9
    22de:	ed ff 37    	bra       0x22ba <.L32>

000022e0 <.L15>:
    22e0:	08 10 90    	mov.w     [w8+32], w0
    22e2:	80 00 eb    	clr.w     w1
    22e4:	00 28 a3    	btst.z    w0, #0x2
    22e6:	18 00 32    	bra       Z, 0x2318 <.L4>
    22e8:	0b 00 e0    	cp0.w     w11
    22ea:	16 00 34    	bra       LE, 0x2318 <.L4>
    22ec:	8b 04 78    	mov.w     w11, w9

000022ee <.L19>:
    22ee:	09 05 78    	mov.w     w9, w10
    22f0:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    22f2:	01 00 36    	bra       LEU, 0x22f6 <.L18>
    22f4:	2a 00 20    	mov.w     #0x2, w10

000022f6 <.L18>:
    22f6:	61 51 b9    	mul.su    w10, #0x1, w2
    22f8:	48 02 90    	mov.w     [w8+8], w4
    22fa:	ee 80 57    	sub.w     w15, #0xe, w1
    22fc:	58 00 90    	mov.w     [w8+10], w0
    22fe:	04 00 01    	call      w4
    2300:	50 04 98    	mov.w     w0, [w8+10]
    2302:	00 00 e0    	cp0.w     w0
    2304:	08 00 32    	bra       Z, 0x2316 <.L29>
    2306:	68 08 90    	mov.w     [w8+28], w0
    2308:	0a 00 40    	add.w     w0, w10, w0
    230a:	60 0c 98    	mov.w     w0, [w8+28]
    230c:	8a 84 54    	sub.w     w9, w10, w9
    230e:	42 40 a9    	bclr.b    0x42, #0x2
    2310:	ee ff 3c    	bra       GT, 0x22ee <.L19>
    2312:	80 00 eb    	clr.w     w1
    2314:	01 00 37    	bra       0x2318 <.L4>

00002316 <.L29>:
    2316:	80 80 eb    	setm.w    w1

00002318 <.L4>:
    2318:	01 00 78    	mov.w     w1, w0
    231a:	4f 06 78    	mov.w     [--w15], w12
    231c:	4f 05 be    	mov.d     [--w15], w10
    231e:	4f 04 be    	mov.d     [--w15], w8
    2320:	00 80 fa    	ulnk      
    2322:	00 00 06    	return    

00002324 <_doclose>:
    2324:	00 c0 da    	.pword 0xdac000
    2326:	00 00 06    	return    

00002328 <_doremove>:
    2328:	00 c0 da    	.pword 0xdac000
    232a:	00 00 06    	return    

0000232c <___divsi3>:
    232c:	83 9f 68    	xor.w     w1, w3, [w15++]
    232e:	01 00 e0    	cp0.w     w1
    2330:	02 00 3d    	bra       GE, 0x2336 <divtestb>
    2332:	60 00 10    	subr.w    w0, #0x0, w0
    2334:	e0 80 18    	subbr.w   w1, #0x0, w1

00002336 <divtestb>:
    2336:	03 00 e0    	cp0.w     w3
    2338:	02 00 3d    	bra       GE, 0x233e <calcquot>
    233a:	60 01 11    	subr.w    w2, #0x0, w2
    233c:	e0 81 19    	subbr.w   w3, #0x0, w3

0000233e <calcquot>:
    233e:	05 00 07    	rcall     0x234a <___udivsi3>
    2340:	4f 00 e0    	cp0.w     [--w15]
    2342:	02 00 3b    	bra       NN, 0x2348 <returnq>
    2344:	60 00 10    	subr.w    w0, #0x0, w0
    2346:	e0 80 18    	subbr.w   w1, #0x0, w1

00002348 <returnq>:
    2348:	00 00 06    	return    

0000234a <___udivsi3>:
    234a:	60 22 b8    	mul.uu    w4, #0x0, w4
    234c:	06 02 20    	mov.w     #0x20, w6

0000234e <nextbit>:
    234e:	00 00 d0    	sl.w      w0, w0
    2350:	81 80 d2    	rlc.w     w1, w1
    2352:	04 82 d2    	rlc.w     w4, w4
    2354:	85 82 d2    	rlc.w     w5, w5
    2356:	00 00 a0    	bset.w    w0, #0x0
    2358:	02 02 52    	sub.w     w4, w2, w4
    235a:	83 82 5a    	subb.w    w5, w3, w5
    235c:	03 00 31    	bra       C, 0x2364 <iterate>
    235e:	02 02 42    	add.w     w4, w2, w4
    2360:	83 82 4a    	addc.w    w5, w3, w5
    2362:	00 00 a1    	bclr.w    w0, #0x0

00002364 <iterate>:
    2364:	06 03 e9    	dec.w     w6, w6
    2366:	f3 ff 3a    	bra       NZ, 0x234e <nextbit>
    2368:	00 00 06    	return    

0000236a <___umodsi3>:
    236a:	ef ff 07    	rcall     0x234a <___udivsi3>
    236c:	04 00 be    	mov.d     w4, w0
    236e:	00 00 06    	return    

00002370 <___mulp32eds3>:
    2370:	02 0a b9    	mul.su    w1, w2, w4
    2372:	00 1b b9    	mul.su    w3, w0, w6
    2374:	02 00 b8    	mul.uu    w0, w2, w0
    2376:	81 00 42    	add.w     w4, w1, w1
    2378:	81 00 43    	add.w     w6, w1, w1
    237a:	00 00 06    	return    

0000237c <___PplusBdi>:
    237c:	88 9f be    	mov.d     w8, [w15++]
    237e:	8a 9f be    	mov.d     w10, [w15++]
    2380:	30 04 42    	add.w     w4, [w0++], w8
    2382:	b0 84 4a    	addc.w    w5, [w0++], w9
    2384:	30 05 4b    	addc.w    w6, [w0++], w10
    2386:	90 85 4b    	addc.w    w7, [w0], w11
    2388:	60 00 b1    	sub.w     #0x6, w0
    238a:	08 98 be    	mov.d     w8, [w0++]
    238c:	0a 90 be    	mov.d     w10, [w0--]
    238e:	04 40 e1    	cp.w      w8, w4
    2390:	05 c8 e1    	cpb.w     w9, w5
    2392:	06 d0 e1    	cpb.w     w10, w6
    2394:	07 d8 e1    	cpb.w     w11, w7
    2396:	02 00 31    	bra       C, 0x239c <.L1>
    2398:	68 00 40    	add.w     w0, #0x8, w0
    239a:	10 08 e8    	inc.w     [w0], [w0]

0000239c <.L1>:
    239c:	4f 05 be    	mov.d     [--w15], w10
    239e:	4f 04 be    	mov.d     [--w15], w8
    23a0:	00 00 06    	return    

000023a2 <___PminusBdi>:
    23a2:	88 9f be    	mov.d     w8, [w15++]
    23a4:	8a 9f be    	mov.d     w10, [w15++]
    23a6:	30 04 be    	mov.d     [w0++], w8
    23a8:	20 05 be    	mov.d     [w0--], w10
    23aa:	04 18 54    	sub.w     w8, w4, [w0++]
    23ac:	05 98 5c    	subb.w    w9, w5, [w0++]
    23ae:	06 18 5d    	subb.w    w10, w6, [w0++]
    23b0:	07 98 5d    	subb.w    w11, w7, [w0++]
    23b2:	11 00 20    	mov.w     #0x1, w1
    23b4:	04 40 e1    	cp.w      w8, w4
    23b6:	05 c8 e1    	cpb.w     w9, w5
    23b8:	06 d0 e1    	cpb.w     w10, w6
    23ba:	07 d8 e1    	cpb.w     w11, w7
    23bc:	01 00 39    	bra       NC, 0x23c0 <.L4>
    23be:	80 00 eb    	clr.w     w1

000023c0 <.L4>:
    23c0:	10 88 10    	subr.w    w1, [w0], [w0]
    23c2:	4f 05 be    	mov.d     [--w15], w10
    23c4:	4f 04 be    	mov.d     [--w15], w8
    23c6:	00 00 06    	return    

000023c8 <___udivmoddi3>:
    23c8:	12 00 fa    	lnk       #0x12
    23ca:	88 9f be    	mov.d     w8, [w15++]
    23cc:	8a 9f be    	mov.d     w10, [w15++]
    23ce:	8c 9f be    	mov.d     w12, [w15++]
    23d0:	e0 b7 9f    	mov.w     w0, [w15-20]
    23d2:	f1 b7 9f    	mov.w     w1, [w15-18]
    23d4:	82 bf 9f    	mov.w     w2, [w15-16]
    23d6:	93 bf 9f    	mov.w     w3, [w15-14]
    23d8:	06 05 be    	mov.d     w6, w10
    23da:	04 04 be    	mov.d     w4, w8
    23dc:	00 00 eb    	clr.w     w0
    23de:	d0 b7 9f    	mov.w     w0, [w15-22]
    23e0:	c0 b7 9f    	mov.w     w0, [w15-24]
    23e2:	b0 b7 9f    	mov.w     w0, [w15-26]
    23e4:	a0 b7 9f    	mov.w     w0, [w15-28]
    23e6:	90 b7 9f    	mov.w     w0, [w15-30]
    23e8:	00 06 eb    	clr.w     w12

000023ea <.L9>:
    23ea:	5f b1 97    	mov.w     [w15-22], w2
    23ec:	cf b0 97    	mov.w     [w15-24], w1
    23ee:	82 01 41    	add.w     w2, w2, w3
    23f0:	3f b0 97    	mov.w     [w15-26], w0
    23f2:	02 00 e0    	cp0.w     w2
    23f4:	04 00 3d    	bra       GE, 0x23fe <.L6>
    23f6:	37 00 07    	rcall     0x2466 <.LPA0>
    23f8:	7e 80 57    	sub.w     w15, #0x1e, w0
    23fa:	c0 ff 07    	rcall     0x237c <___PplusBdi>
    23fc:	03 00 37    	bra       0x2404 <.L7>

000023fe <.L6>:
    23fe:	33 00 07    	rcall     0x2466 <.LPA0>
    2400:	7e 80 57    	sub.w     w15, #0x1e, w0
    2402:	cf ff 07    	rcall     0x23a2 <___PminusBdi>

00002404 <.L7>:
    2404:	df b6 97    	mov.w     [w15-22], w13
    2406:	0d 00 e0    	cp0.w     w13
    2408:	0c 00 35    	bra       LT, 0x2422 <.L8>
    240a:	6f b2 97    	mov.w     [w15-20], w4
    240c:	ff b2 97    	mov.w     [w15-18], w5
    240e:	0f bb 97    	mov.w     [w15-16], w6
    2410:	9f bb 97    	mov.w     [w15-14], w7
    2412:	10 00 20    	mov.w     #0x1, w0
    2414:	01 00 20    	mov.w     #0x0, w1
    2416:	60 11 b8    	mul.uu    w2, #0x0, w2
    2418:	00 02 72    	ior.w     w4, w0, w4
    241a:	81 82 72    	ior.w     w5, w1, w5
    241c:	02 03 73    	ior.w     w6, w2, w6
    241e:	83 83 73    	ior.w     w7, w3, w7
    2420:	1b 00 07    	rcall     0x2458 <L0>

00002422 <.L8>:
    2422:	0c 06 e8    	inc.w     w12, w12
    2424:	01 04 20    	mov.w     #0x40, w1
    2426:	81 0f 56    	sub.w     w12, w1, [w15]
    2428:	e0 ff 3a    	bra       NZ, 0x23ea <.L9>
    242a:	0d 00 e0    	cp0.w     w13
    242c:	04 00 3d    	bra       GE, 0x2436 <.L10>
    242e:	08 02 be    	mov.d     w8, w4
    2430:	0a 03 be    	mov.d     w10, w6
    2432:	7e 80 57    	sub.w     w15, #0x1e, w0
    2434:	a3 ff 07    	rcall     0x237c <___PplusBdi>

00002436 <.L10>:
    2436:	5f a8 97    	mov.w     [w15-38], w0
    2438:	00 00 e0    	cp0.w     w0
    243a:	05 00 3a    	bra       NZ, 0x2446 <.L11>
    243c:	1f b2 97    	mov.w     [w15-30], w4
    243e:	af b2 97    	mov.w     [w15-28], w5
    2440:	3f b3 97    	mov.w     [w15-26], w6
    2442:	cf b3 97    	mov.w     [w15-24], w7
    2444:	09 00 07    	rcall     0x2458 <L0>

00002446 <.L11>:
    2446:	6f b0 97    	mov.w     [w15-20], w0
    2448:	ff b0 97    	mov.w     [w15-18], w1
    244a:	0f b9 97    	mov.w     [w15-16], w2
    244c:	9f b9 97    	mov.w     [w15-14], w3
    244e:	4f 06 be    	mov.d     [--w15], w12
    2450:	4f 05 be    	mov.d     [--w15], w10
    2452:	4f 04 be    	mov.d     [--w15], w8
    2454:	00 80 fa    	ulnk      
    2456:	00 00 06    	return    

00002458 <L0>:
    2458:	01 00 07    	rcall     0x245c <.LPA5>
    245a:	00 00 06    	return    

0000245c <.LPA5>:
    245c:	a4 b7 9f    	mov.w     w4, [w15-28]
    245e:	b5 b7 9f    	mov.w     w5, [w15-26]
    2460:	c6 b7 9f    	mov.w     w6, [w15-24]
    2462:	d7 b7 9f    	mov.w     w7, [w15-22]
    2464:	00 00 06    	return    

00002466 <.LPA0>:
    2466:	4f 09 de    	lsr.w     w1, #0xf, w2
    2468:	82 81 71    	ior.w     w3, w2, w3
    246a:	b3 b7 9f    	mov.w     w3, [w15-26]
    246c:	4f 01 de    	lsr.w     w0, #0xf, w2
    246e:	81 80 40    	add.w     w1, w1, w1
    2470:	82 80 70    	ior.w     w1, w2, w1
    2472:	a1 b7 9f    	mov.w     w1, [w15-28]
    2474:	8f b0 97    	mov.w     [w15-32], w1
    2476:	4f 09 de    	lsr.w     w1, #0xf, w2
    2478:	00 00 40    	add.w     w0, w0, w0
    247a:	02 00 70    	ior.w     w0, w2, w0
    247c:	90 b7 9f    	mov.w     w0, [w15-30]
    247e:	7f a8 97    	mov.w     [w15-34], w0
    2480:	4f 01 de    	lsr.w     w0, #0xf, w2
    2482:	81 80 40    	add.w     w1, w1, w1
    2484:	82 80 70    	ior.w     w1, w2, w1
    2486:	81 b7 9f    	mov.w     w1, [w15-32]
    2488:	0d 00 07    	rcall     0x24a4 <.LPA4>
    248a:	4f 3a de    	lsr.w     w7, #0xf, w4
    248c:	00 00 40    	add.w     w0, w0, w0
    248e:	04 00 70    	ior.w     w0, w4, w0
    2490:	f0 af 9f    	mov.w     w0, [w15-34]
    2492:	08 00 07    	rcall     0x24a4 <.LPA4>
    2494:	04 02 42    	add.w     w4, w4, w4
    2496:	85 82 4a    	addc.w    w5, w5, w5
    2498:	06 03 4b    	addc.w    w6, w6, w6
    249a:	87 83 4b    	addc.w    w7, w7, w7
    249c:	df ff 07    	rcall     0x245c <.LPA5>
    249e:	08 02 be    	mov.d     w8, w4
    24a0:	0a 03 be    	mov.d     w10, w6
    24a2:	00 00 06    	return    

000024a4 <.LPA4>:
    24a4:	2f b2 97    	mov.w     [w15-28], w4
    24a6:	bf b2 97    	mov.w     [w15-26], w5
    24a8:	4f b3 97    	mov.w     [w15-24], w6
    24aa:	df b3 97    	mov.w     [w15-22], w7
    24ac:	00 00 06    	return    

000024ae <___udivdi3>:
    24ae:	88 1f 78    	mov.w     w8, [w15++]
    24b0:	18 00 20    	mov.w     #0x1, w8
    24b2:	88 1f 78    	mov.w     w8, [w15++]
    24b4:	89 ff 07    	rcall     0x23c8 <___udivmoddi3>
    24b6:	8f 87 e9    	dec2.w    w15, w15
    24b8:	4f 04 78    	mov.w     [--w15], w8
    24ba:	00 00 06    	return    

000024bc <___umoddi3>:
    24bc:	80 1f eb    	clr.w     [w15++]
    24be:	84 ff 07    	rcall     0x23c8 <___udivmoddi3>
    24c0:	8f 87 e9    	dec2.w    w15, w15
    24c2:	00 00 06    	return    

000024c4 <___divdi3>:
    24c4:	88 9f be    	mov.d     w8, [w15++]
    24c6:	8a 9f be    	mov.d     w10, [w15++]
    24c8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    24ca:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    24cc:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    24ce:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    24d0:	0c 00 3d    	bra       GE, 0x24ea <.L15>
    24d2:	60 44 b8    	mul.uu    w8, #0x0, w8
    24d4:	60 55 b8    	mul.uu    w10, #0x0, w10
    24d6:	00 00 54    	sub.w     w8, w0, w0
    24d8:	81 80 5c    	subb.w    w9, w1, w1
    24da:	02 01 5d    	subb.w    w10, w2, w2
    24dc:	83 81 5d    	subb.w    w11, w3, w3
    24de:	18 00 20    	mov.w     #0x1, w8
    24e0:	15 00 07    	rcall     0x250c <L0>
    24e2:	08 00 3d    	bra       GE, 0x24f4 <.L16>
    24e4:	18 00 07    	rcall     0x2516 <.LPA1>
    24e6:	00 04 eb    	clr.w     w8
    24e8:	05 00 37    	bra       0x24f4 <.L16>

000024ea <.L15>:
    24ea:	00 04 eb    	clr.w     w8
    24ec:	0f 00 07    	rcall     0x250c <L0>
    24ee:	02 00 3d    	bra       GE, 0x24f4 <.L16>
    24f0:	12 00 07    	rcall     0x2516 <.LPA1>
    24f2:	18 00 20    	mov.w     #0x1, w8

000024f4 <.L16>:
    24f4:	dc ff 07    	rcall     0x24ae <___udivdi3>
    24f6:	08 00 e0    	cp0.w     w8
    24f8:	06 00 32    	bra       Z, 0x2506 <.L17>
    24fa:	60 22 b8    	mul.uu    w4, #0x0, w4
    24fc:	60 33 b8    	mul.uu    w6, #0x0, w6
    24fe:	00 00 52    	sub.w     w4, w0, w0
    2500:	81 80 5a    	subb.w    w5, w1, w1
    2502:	02 01 5b    	subb.w    w6, w2, w2
    2504:	83 81 5b    	subb.w    w7, w3, w3

00002506 <.L17>:
    2506:	4f 05 be    	mov.d     [--w15], w10
    2508:	4f 04 be    	mov.d     [--w15], w8
    250a:	00 00 06    	return    

0000250c <L0>:
    250c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    250e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2510:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2512:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2514:	00 00 06    	return    

00002516 <.LPA1>:
    2516:	60 44 b8    	mul.uu    w8, #0x0, w8
    2518:	60 55 b8    	mul.uu    w10, #0x0, w10
    251a:	04 02 54    	sub.w     w8, w4, w4
    251c:	85 82 5c    	subb.w    w9, w5, w5
    251e:	06 03 5d    	subb.w    w10, w6, w6
    2520:	87 83 5d    	subb.w    w11, w7, w7
    2522:	00 00 06    	return    

00002524 <___moddi3>:
    2524:	88 9f be    	mov.d     w8, [w15++]
    2526:	8a 9f be    	mov.d     w10, [w15++]
    2528:	8c 1f 78    	mov.w     w12, [w15++]
    252a:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    252c:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    252e:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2530:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2532:	0d 00 3d    	bra       GE, 0x254e <.L21>
    2534:	60 44 b8    	mul.uu    w8, #0x0, w8
    2536:	60 55 b8    	mul.uu    w10, #0x0, w10
    2538:	00 00 54    	sub.w     w8, w0, w0
    253a:	81 80 5c    	subb.w    w9, w1, w1
    253c:	02 01 5d    	subb.w    w10, w2, w2
    253e:	83 81 5d    	subb.w    w11, w3, w3
    2540:	1c 00 20    	mov.w     #0x1, w12
    2542:	08 20 e1    	cp.w      w4, w8
    2544:	09 a8 e1    	cpb.w     w5, w9
    2546:	0a b0 e1    	cpb.w     w6, w10
    2548:	0b b8 e1    	cpb.w     w7, w11
    254a:	0d 00 3d    	bra       GE, 0x2566 <.L22>
    254c:	08 00 37    	bra       0x255e <.L26>

0000254e <.L21>:
    254e:	00 06 eb    	clr.w     w12
    2550:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2552:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2554:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2556:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2558:	06 00 3d    	bra       GE, 0x2566 <.L22>
    255a:	60 44 b8    	mul.uu    w8, #0x0, w8
    255c:	60 55 b8    	mul.uu    w10, #0x0, w10

0000255e <.L26>:
    255e:	04 02 54    	sub.w     w8, w4, w4
    2560:	85 82 5c    	subb.w    w9, w5, w5
    2562:	06 03 5d    	subb.w    w10, w6, w6
    2564:	87 83 5d    	subb.w    w11, w7, w7

00002566 <.L22>:
    2566:	aa ff 07    	rcall     0x24bc <___umoddi3>
    2568:	0c 00 e0    	cp0.w     w12
    256a:	06 00 32    	bra       Z, 0x2578 <.L23>
    256c:	60 22 b8    	mul.uu    w4, #0x0, w4
    256e:	60 33 b8    	mul.uu    w6, #0x0, w6
    2570:	00 00 52    	sub.w     w4, w0, w0
    2572:	81 80 5a    	subb.w    w5, w1, w1
    2574:	02 01 5b    	subb.w    w6, w2, w2
    2576:	83 81 5b    	subb.w    w7, w3, w3

00002578 <.L23>:
    2578:	4f 06 78    	mov.w     [--w15], w12
    257a:	4f 05 be    	mov.d     [--w15], w10
    257c:	4f 04 be    	mov.d     [--w15], w8
    257e:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	0e 34 04    	goto      0x340e <__T1Interrupt>
    1026:	00 00 00 
    1028:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	3c 34 04    	goto      0x343c <__T2Interrupt>
    1032:	00 00 00 
    1034:	6a 34 04    	goto      0x346a <__T3Interrupt>
    1036:	00 00 00 
    1038:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	10 28 04    	goto      0x2810 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	e2 27 04    	goto      0x27e2 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	98 34 04    	goto      0x3498 <__T4Interrupt>
    1072:	00 00 00 
    1074:	c6 34 04    	goto      0x34c6 <__T5Interrupt>
    1076:	00 00 00 
    1078:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	6c 28 04    	goto      0x286c <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	3e 28 04    	goto      0x283e <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	c8 28 04    	goto      0x28c8 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	9a 28 04    	goto      0x289a <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	24 29 04    	goto      0x2924 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	f6 28 04    	goto      0x28f6 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	ce 3e 04    	goto      0x3ece <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a580 <.LC0>:
    a580:	48 65       	.word 0x6548
    a582:	6c 6c       	.word 0x6c6c
    a584:	6f 20       	.word 0x206f
    a586:	57 6f       	.word 0x6f57
    a588:	72 6c       	.word 0x6c72
    a58a:	64 21       	.word 0x2164
    a58c:	00 57       	.word 0x5700

0000a58d <.LC1>:
    a58d:	00 00       	.word 0
    a58f:	00 00       	.word 0
    a591:	00 00       	.word 0
    a593:	00 00       	.word 0
    a595:	00 00       	.word 0
    a597:	00 00       	.word 0
    a599:	00 00       	.word 0
    a59b:	00 00       	.word 0
    a59d:	00 00       	.word 0
    a59f:	00 00       	.word 0

0000a5a1 <.LC2>:
    a5a1:	00 00       	.word 0
    a5a3:	00 00       	.word 0
    a5a5:	00 00       	.word 0
    a5a7:	00 00       	.word 0
    a5a9:	00 00       	.word 0
	...

0000a5ac <.LC3>:
    a5ac:	54 79       	.word 0x7954
    a5ae:	70 65       	.word 0x6570
    a5b0:	20 73       	.word 0x7320
    a5b2:	6f 6d       	.word 0x6d6f
    a5b4:	65 74       	.word 0x7465
    a5b6:	68 69       	.word 0x6968
    a5b8:	6e 67       	.word 0x676e
    a5ba:	20 61       	.word 0x6120
    a5bc:	74 20       	.word 0x2074
    a5be:	74 68       	.word 0x6874
    a5c0:	65 20       	.word 0x2065
    a5c2:	70 72       	.word 0x7270
    a5c4:	6f 6d       	.word 0x6d6f
    a5c6:	70 74       	.word 0x7470
    a5c8:	2e 00       	.word 0x2e

0000a5ca <.LC4>:
    a5ca:	3e 3e       	.word 0x3e3e
    a5cc:	20 00       	.word 0x20

0000a5ce <.LC5>:
    a5ce:	59 6f       	.word 0x6f59
    a5d0:	75 20       	.word 0x2075
    a5d2:	74 79       	.word 0x7974
    a5d4:	70 65       	.word 0x6570
    a5d6:	64 20       	.word 0x2064
    a5d8:	27 25       	.word 0x2527
    a5da:	73 27       	.word 0x2773
    a5dc:	20 61       	.word 0x6120
    a5de:	6e 64       	.word 0x646e
    a5e0:	20 74       	.word 0x7420
    a5e2:	68 65       	.word 0x6568
    a5e4:	20 74       	.word 0x7420
    a5e6:	69 6d       	.word 0x6d69
    a5e8:	65 72       	.word 0x7265
    a5ea:	20 70       	.word 0x7020
    a5ec:	65 72       	.word 0x7265
    a5ee:	69 6f       	.word 0x6f69
    a5f0:	64 20       	.word 0x2064
    a5f2:	69 73       	.word 0x7369
    a5f4:	20 25       	.word 0x2520
    a5f6:	64 20       	.word 0x2064
    a5f8:	0a 00       	.word 0xa
Disassembly of section .text:

000025fa <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    25fa:	04 00 fa    	lnk       #0x4
    25fc:	00 0f 78    	mov.w     w0, [w14]
    25fe:	21 47 98    	mov.b     w1, [w14+2]

00002600 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    2600:	00 00 00    	nop       

00002602 <.L2>:
    2602:	1e 00 78    	mov.w     [w14], w0
    2604:	10 00 90    	mov.w     [w0+2], w0
    2606:	90 00 78    	mov.w     [w0], w1
    2608:	00 20 20    	mov.w     #0x200, w0
    260a:	00 80 60    	and.w     w1, w0, w0
    260c:	00 00 e0    	cp0.w     w0
    260e:	f9 ff 3a    	bra       NZ, 0x2602 <.L2>

00002610 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    2610:	1e 00 78    	mov.w     [w14], w0
    2612:	20 00 90    	mov.w     [w0+4], w0
    2614:	ae 40 90    	mov.b     [w14+2], w1
    2616:	81 80 fb    	ze        w1, w1
    2618:	01 08 78    	mov.w     w1, [w0]

0000261a <.LSM3>:
}
    261a:	00 80 fa    	ulnk      
    261c:	00 00 06    	return    

0000261e <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    261e:	02 00 fa    	lnk       #0x2
    2620:	00 0f 78    	mov.w     w0, [w14]

00002622 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    2622:	00 00 00    	nop       

00002624 <.L4>:
    2624:	1e 00 78    	mov.w     [w14], w0
    2626:	10 00 90    	mov.w     [w0+2], w0
    2628:	10 00 78    	mov.w     [w0], w0
    262a:	61 00 60    	and.w     w0, #0x1, w0
    262c:	00 00 e0    	cp0.w     w0
    262e:	fa ff 32    	bra       Z, 0x2624 <.L4>

00002630 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2630:	1e 00 78    	mov.w     [w14], w0
    2632:	30 00 90    	mov.w     [w0+6], w0
    2634:	10 00 78    	mov.w     [w0], w0
    2636:	00 40 78    	mov.b     w0, w0

00002638 <.LSM7>:
}
    2638:	00 80 fa    	ulnk      
    263a:	00 00 06    	return    

0000263c <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    263c:	04 00 fa    	lnk       #0x4
    263e:	00 0f 78    	mov.w     w0, [w14]
    2640:	21 47 98    	mov.b     w1, [w14+2]

00002642 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2642:	00 00 00    	nop       

00002644 <.L6>:
    2644:	1e 00 78    	mov.w     [w14], w0
    2646:	d0 10 90    	mov.w     [w0+42], w1
    2648:	1e 00 78    	mov.w     [w14], w0
    264a:	20 10 90    	mov.w     [w0+36], w0
    264c:	80 8f 50    	sub.w     w1, w0, [w15]
    264e:	fa ff 32    	bra       Z, 0x2644 <.L6>

00002650 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2650:	1e 00 78    	mov.w     [w14], w0
    2652:	90 10 90    	mov.w     [w0+34], w1
    2654:	1e 00 78    	mov.w     [w14], w0
    2656:	40 10 90    	mov.w     [w0+40], w0
    2658:	00 80 40    	add.w     w1, w0, w0
    265a:	ae 40 90    	mov.b     [w14+2], w1
    265c:	01 48 78    	mov.b     w1, [w0]

0000265e <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    265e:	1e 00 78    	mov.w     [w14], w0
    2660:	40 10 90    	mov.w     [w0+40], w0
    2662:	80 00 e8    	inc.w     w0, w1
    2664:	1e 00 78    	mov.w     [w14], w0
    2666:	20 10 90    	mov.w     [w0+36], w0
    2668:	00 01 78    	mov.w     w0, w2
    266a:	11 00 09    	repeat    #0x11
    266c:	82 80 d8    	div.uw    w1, w2
    266e:	80 00 fd    	exch      w0, w1
    2670:	80 00 78    	mov.w     w0, w1
    2672:	1e 00 78    	mov.w     [w14], w0
    2674:	41 10 98    	mov.w     w1, [w0+40]

00002676 <.LSM12>:
    self->TXbuffer.count++;
    2676:	1e 00 78    	mov.w     [w14], w0
    2678:	50 10 90    	mov.w     [w0+42], w0
    267a:	80 00 e8    	inc.w     w0, w1
    267c:	1e 00 78    	mov.w     [w14], w0
    267e:	51 10 98    	mov.w     w1, [w0+42]

00002680 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2680:	1e 00 78    	mov.w     [w14], w0
    2682:	d0 10 90    	mov.w     [w0+42], w1
    2684:	1e 00 78    	mov.w     [w14], w0
    2686:	30 18 90    	mov.w     [w0+54], w0
    2688:	80 8f 50    	sub.w     w1, w0, [w15]
    268a:	08 00 39    	bra       NC, 0x269c <.L5>

0000268c <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    268c:	1e 00 78    	mov.w     [w14], w0
    268e:	10 00 90    	mov.w     [w0+2], w0
    2690:	9e 00 78    	mov.w     [w14], w1
    2692:	91 00 90    	mov.w     [w1+2], w1
    2694:	11 01 78    	mov.w     [w1], w2
    2696:	01 40 20    	mov.w     #0x400, w1
    2698:	82 80 70    	ior.w     w1, w2, w1
    269a:	01 08 78    	mov.w     w1, [w0]

0000269c <.L5>:
                                                    // transmission
}
    269c:	00 80 fa    	ulnk      
    269e:	00 00 06    	return    

000026a0 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    26a0:	04 00 fa    	lnk       #0x4
    26a2:	10 07 98    	mov.w     w0, [w14+2]

000026a4 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    26a4:	1e 00 90    	mov.w     [w14+2], w0
    26a6:	50 00 90    	mov.w     [w0+10], w0
    26a8:	9e 00 90    	mov.w     [w14+2], w1
    26aa:	d1 00 90    	mov.w     [w1+10], w1
    26ac:	11 01 78    	mov.w     [w1], w2
    26ae:	9e 00 90    	mov.w     [w14+2], w1
    26b0:	e1 48 90    	mov.b     [w1+14], w1
    26b2:	81 80 fb    	ze        w1, w1
    26b4:	13 00 20    	mov.w     #0x1, w3
    26b6:	81 18 dd    	sl.w      w3, w1, w1
    26b8:	81 80 ea    	com.w     w1, w1
    26ba:	81 00 61    	and.w     w2, w1, w1
    26bc:	01 08 78    	mov.w     w1, [w0]

000026be <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    26be:	1e 00 90    	mov.w     [w14+2], w0
    26c0:	50 10 90    	mov.w     [w0+42], w0
    26c2:	00 00 e0    	cp0.w     w0
    26c4:	25 00 3a    	bra       NZ, 0x2710 <.L13>

000026c6 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    26c6:	1e 00 90    	mov.w     [w14+2], w0
    26c8:	10 00 90    	mov.w     [w0+2], w0
    26ca:	9e 00 90    	mov.w     [w14+2], w1
    26cc:	91 00 90    	mov.w     [w1+2], w1
    26ce:	11 01 78    	mov.w     [w1], w2
    26d0:	f1 bf 2f    	mov.w     #0xfbff, w1
    26d2:	81 00 61    	and.w     w2, w1, w1
    26d4:	01 08 78    	mov.w     w1, [w0]

000026d6 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    26d6:	1d 00 37    	bra       0x2712 <.L10>

000026d8 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    26d8:	1e 00 90    	mov.w     [w14+2], w0
    26da:	90 10 90    	mov.w     [w0+34], w1
    26dc:	1e 00 90    	mov.w     [w14+2], w0
    26de:	30 10 90    	mov.w     [w0+38], w0
    26e0:	00 80 40    	add.w     w1, w0, w0
    26e2:	10 4f 78    	mov.b     [w0], [w14]

000026e4 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    26e4:	1e 00 90    	mov.w     [w14+2], w0
    26e6:	30 10 90    	mov.w     [w0+38], w0
    26e8:	80 00 e8    	inc.w     w0, w1
    26ea:	1e 00 90    	mov.w     [w14+2], w0
    26ec:	20 10 90    	mov.w     [w0+36], w0
    26ee:	00 01 78    	mov.w     w0, w2
    26f0:	11 00 09    	repeat    #0x11
    26f2:	82 80 d8    	div.uw    w1, w2
    26f4:	80 00 fd    	exch      w0, w1
    26f6:	80 00 78    	mov.w     w0, w1
    26f8:	1e 00 90    	mov.w     [w14+2], w0
    26fa:	31 10 98    	mov.w     w1, [w0+38]

000026fc <.LSM23>:
        self->TXbuffer.count--;
    26fc:	1e 00 90    	mov.w     [w14+2], w0
    26fe:	50 10 90    	mov.w     [w0+42], w0
    2700:	80 00 e9    	dec.w     w0, w1
    2702:	1e 00 90    	mov.w     [w14+2], w0
    2704:	51 10 98    	mov.w     w1, [w0+42]

00002706 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    2706:	1e 00 90    	mov.w     [w14+2], w0
    2708:	20 00 90    	mov.w     [w0+4], w0
    270a:	9e 80 fb    	ze        [w14], w1
    270c:	01 08 78    	mov.w     w1, [w0]
    270e:	01 00 37    	bra       0x2712 <.L10>

00002710 <.L13>:
    2710:	00 00 00    	nop       

00002712 <.L10>:
    2712:	1e 00 90    	mov.w     [w14+2], w0
    2714:	10 00 90    	mov.w     [w0+2], w0
    2716:	90 00 78    	mov.w     [w0], w1
    2718:	00 20 20    	mov.w     #0x200, w0
    271a:	00 80 60    	and.w     w1, w0, w0
    271c:	00 00 e0    	cp0.w     w0
    271e:	04 00 3a    	bra       NZ, 0x2728 <.L8>
    2720:	1e 00 90    	mov.w     [w14+2], w0
    2722:	50 10 90    	mov.w     [w0+42], w0
    2724:	00 00 e0    	cp0.w     w0
    2726:	d8 ff 3a    	bra       NZ, 0x26d8 <.L12>

00002728 <.L8>:
    }
}
    2728:	00 80 fa    	ulnk      
    272a:	00 00 06    	return    

0000272c <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    272c:	04 00 fa    	lnk       #0x4
    272e:	10 07 98    	mov.w     w0, [w14+2]

00002730 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2730:	00 00 00    	nop       

00002732 <.L15>:
    2732:	1e 00 90    	mov.w     [w14+2], w0
    2734:	20 18 90    	mov.w     [w0+52], w0
    2736:	00 00 e0    	cp0.w     w0
    2738:	fc ff 32    	bra       Z, 0x2732 <.L15>

0000273a <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    273a:	1e 00 90    	mov.w     [w14+2], w0
    273c:	e0 10 90    	mov.w     [w0+44], w1
    273e:	1e 00 90    	mov.w     [w14+2], w0
    2740:	00 18 90    	mov.w     [w0+48], w0
    2742:	00 80 40    	add.w     w1, w0, w0
    2744:	10 4f 78    	mov.b     [w0], [w14]

00002746 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2746:	1e 00 90    	mov.w     [w14+2], w0
    2748:	00 18 90    	mov.w     [w0+48], w0
    274a:	80 00 e8    	inc.w     w0, w1
    274c:	1e 00 90    	mov.w     [w14+2], w0
    274e:	70 10 90    	mov.w     [w0+46], w0
    2750:	00 01 78    	mov.w     w0, w2
    2752:	11 00 09    	repeat    #0x11
    2754:	82 80 d8    	div.uw    w1, w2
    2756:	80 00 fd    	exch      w0, w1
    2758:	80 00 78    	mov.w     w0, w1
    275a:	1e 00 90    	mov.w     [w14+2], w0
    275c:	01 18 98    	mov.w     w1, [w0+48]

0000275e <.LSM31>:
    self->RXbuffer.count--;
    275e:	1e 00 90    	mov.w     [w14+2], w0
    2760:	20 18 90    	mov.w     [w0+52], w0
    2762:	80 00 e9    	dec.w     w0, w1
    2764:	1e 00 90    	mov.w     [w14+2], w0
    2766:	21 18 98    	mov.w     w1, [w0+52]

00002768 <.LSM32>:
    return ch;
    2768:	1e 40 78    	mov.b     [w14], w0

0000276a <.LSM33>:
}
    276a:	00 80 fa    	ulnk      
    276c:	00 00 06    	return    

0000276e <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    276e:	02 00 fa    	lnk       #0x2
    2770:	00 0f 78    	mov.w     w0, [w14]

00002772 <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2772:	1e 00 78    	mov.w     [w14], w0
    2774:	50 00 90    	mov.w     [w0+10], w0
    2776:	9e 00 78    	mov.w     [w14], w1
    2778:	d1 00 90    	mov.w     [w1+10], w1
    277a:	11 01 78    	mov.w     [w1], w2
    277c:	9e 00 78    	mov.w     [w14], w1
    277e:	f1 48 90    	mov.b     [w1+15], w1
    2780:	81 80 fb    	ze        w1, w1
    2782:	13 00 20    	mov.w     #0x1, w3
    2784:	81 18 dd    	sl.w      w3, w1, w1
    2786:	81 80 ea    	com.w     w1, w1
    2788:	81 00 61    	and.w     w2, w1, w1
    278a:	01 08 78    	mov.w     w1, [w0]

0000278c <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    278c:	1b 00 37    	bra       0x27c4 <.L17>

0000278e <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    278e:	1e 00 78    	mov.w     [w14], w0
    2790:	e0 10 90    	mov.w     [w0+44], w1
    2792:	1e 00 78    	mov.w     [w14], w0
    2794:	10 18 90    	mov.w     [w0+50], w0
    2796:	00 80 40    	add.w     w1, w0, w0
    2798:	9e 00 78    	mov.w     [w14], w1
    279a:	b1 00 90    	mov.w     [w1+6], w1
    279c:	91 00 78    	mov.w     [w1], w1
    279e:	81 40 78    	mov.b     w1, w1
    27a0:	01 48 78    	mov.b     w1, [w0]

000027a2 <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    27a2:	1e 00 78    	mov.w     [w14], w0
    27a4:	10 18 90    	mov.w     [w0+50], w0
    27a6:	80 00 e8    	inc.w     w0, w1
    27a8:	1e 00 78    	mov.w     [w14], w0
    27aa:	70 10 90    	mov.w     [w0+46], w0
    27ac:	00 01 78    	mov.w     w0, w2
    27ae:	11 00 09    	repeat    #0x11
    27b0:	82 80 d8    	div.uw    w1, w2
    27b2:	80 00 fd    	exch      w0, w1
    27b4:	80 00 78    	mov.w     w0, w1
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	11 18 98    	mov.w     w1, [w0+50]

000027ba <.LSM39>:
        self->RXbuffer.count++;
    27ba:	1e 00 78    	mov.w     [w14], w0
    27bc:	20 18 90    	mov.w     [w0+52], w0
    27be:	80 00 e8    	inc.w     w0, w1
    27c0:	1e 00 78    	mov.w     [w14], w0
    27c2:	21 18 98    	mov.w     w1, [w0+52]

000027c4 <.L17>:
    27c4:	1e 00 78    	mov.w     [w14], w0
    27c6:	10 00 90    	mov.w     [w0+2], w0
    27c8:	10 00 78    	mov.w     [w0], w0
    27ca:	61 00 60    	and.w     w0, #0x1, w0
    27cc:	00 40 78    	mov.b     w0, w0
    27ce:	00 04 e0    	cp0.b     w0
    27d0:	06 00 32    	bra       Z, 0x27de <.L16>

000027d2 <.LSM41>:
    27d2:	1e 00 78    	mov.w     [w14], w0
    27d4:	a0 18 90    	mov.w     [w0+52], w1
    27d6:	1e 00 78    	mov.w     [w14], w0
    27d8:	70 10 90    	mov.w     [w0+46], w0

000027da <.LSM42>:
    27da:	80 8f 50    	sub.w     w1, w0, [w15]
    27dc:	d8 ff 3a    	bra       NZ, 0x278e <.L19>

000027de <.L16>:
    }
}
    27de:	00 80 fa    	ulnk      
    27e0:	00 00 06    	return    

000027e2 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    27e2:	36 00 f8    	push      0x36
    27e4:	80 9f be    	mov.d     w0, [w15++]
    27e6:	82 9f be    	mov.d     w2, [w15++]
    27e8:	84 9f be    	mov.d     w4, [w15++]
    27ea:	86 9f be    	mov.d     w6, [w15++]
    27ec:	32 00 f8    	push      0x32
    27ee:	34 00 f8    	push      0x34
    27f0:	10 00 20    	mov.w     #0x1, w0
    27f2:	a0 01 88    	mov.w     w0, 0x34
    27f4:	00 20 20    	mov.w     #0x200, w0
    27f6:	90 01 88    	mov.w     w0, 0x32
    27f8:	00 00 fa    	lnk       #0x0

000027fa <.LSM45>:
    __serviceTxInterrupt(&uart1);
    27fa:	c0 9b 20    	mov.w     #0x9bc, w0
    27fc:	51 ff 07    	rcall     0x26a0 <___serviceTxInterrupt>

000027fe <.LSM46>:
}
    27fe:	00 80 fa    	ulnk      
    2800:	34 00 f9    	pop       0x34
    2802:	32 00 f9    	pop       0x32
    2804:	4f 03 be    	mov.d     [--w15], w6
    2806:	4f 02 be    	mov.d     [--w15], w4
    2808:	4f 01 be    	mov.d     [--w15], w2
    280a:	4f 00 be    	mov.d     [--w15], w0
    280c:	36 00 f9    	pop       0x36
    280e:	00 40 06    	retfie    

00002810 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2810:	36 00 f8    	push      0x36
    2812:	80 9f be    	mov.d     w0, [w15++]
    2814:	82 9f be    	mov.d     w2, [w15++]
    2816:	84 9f be    	mov.d     w4, [w15++]
    2818:	86 9f be    	mov.d     w6, [w15++]
    281a:	32 00 f8    	push      0x32
    281c:	34 00 f8    	push      0x34
    281e:	10 00 20    	mov.w     #0x1, w0
    2820:	a0 01 88    	mov.w     w0, 0x34
    2822:	00 20 20    	mov.w     #0x200, w0
    2824:	90 01 88    	mov.w     w0, 0x32
    2826:	00 00 fa    	lnk       #0x0

00002828 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    2828:	c0 9b 20    	mov.w     #0x9bc, w0
    282a:	a1 ff 07    	rcall     0x276e <___serviceRxInterrupt>

0000282c <.LSM49>:
}
    282c:	00 80 fa    	ulnk      
    282e:	34 00 f9    	pop       0x34
    2830:	32 00 f9    	pop       0x32
    2832:	4f 03 be    	mov.d     [--w15], w6
    2834:	4f 02 be    	mov.d     [--w15], w4
    2836:	4f 01 be    	mov.d     [--w15], w2
    2838:	4f 00 be    	mov.d     [--w15], w0
    283a:	36 00 f9    	pop       0x36
    283c:	00 40 06    	retfie    

0000283e <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    283e:	36 00 f8    	push      0x36
    2840:	80 9f be    	mov.d     w0, [w15++]
    2842:	82 9f be    	mov.d     w2, [w15++]
    2844:	84 9f be    	mov.d     w4, [w15++]
    2846:	86 9f be    	mov.d     w6, [w15++]
    2848:	32 00 f8    	push      0x32
    284a:	34 00 f8    	push      0x34
    284c:	10 00 20    	mov.w     #0x1, w0
    284e:	a0 01 88    	mov.w     w0, 0x34
    2850:	00 20 20    	mov.w     #0x200, w0
    2852:	90 01 88    	mov.w     w0, 0x32
    2854:	00 00 fa    	lnk       #0x0

00002856 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    2856:	80 9f 20    	mov.w     #0x9f8, w0
    2858:	23 ff 07    	rcall     0x26a0 <___serviceTxInterrupt>

0000285a <.LSM52>:
}
    285a:	00 80 fa    	ulnk      
    285c:	34 00 f9    	pop       0x34
    285e:	32 00 f9    	pop       0x32
    2860:	4f 03 be    	mov.d     [--w15], w6
    2862:	4f 02 be    	mov.d     [--w15], w4
    2864:	4f 01 be    	mov.d     [--w15], w2
    2866:	4f 00 be    	mov.d     [--w15], w0
    2868:	36 00 f9    	pop       0x36
    286a:	00 40 06    	retfie    

0000286c <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    286c:	36 00 f8    	push      0x36
    286e:	80 9f be    	mov.d     w0, [w15++]
    2870:	82 9f be    	mov.d     w2, [w15++]
    2872:	84 9f be    	mov.d     w4, [w15++]
    2874:	86 9f be    	mov.d     w6, [w15++]
    2876:	32 00 f8    	push      0x32
    2878:	34 00 f8    	push      0x34
    287a:	10 00 20    	mov.w     #0x1, w0
    287c:	a0 01 88    	mov.w     w0, 0x34
    287e:	00 20 20    	mov.w     #0x200, w0
    2880:	90 01 88    	mov.w     w0, 0x32
    2882:	00 00 fa    	lnk       #0x0

00002884 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    2884:	80 9f 20    	mov.w     #0x9f8, w0
    2886:	73 ff 07    	rcall     0x276e <___serviceRxInterrupt>

00002888 <.LSM55>:
}
    2888:	00 80 fa    	ulnk      
    288a:	34 00 f9    	pop       0x34
    288c:	32 00 f9    	pop       0x32
    288e:	4f 03 be    	mov.d     [--w15], w6
    2890:	4f 02 be    	mov.d     [--w15], w4
    2892:	4f 01 be    	mov.d     [--w15], w2
    2894:	4f 00 be    	mov.d     [--w15], w0
    2896:	36 00 f9    	pop       0x36
    2898:	00 40 06    	retfie    

0000289a <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    289a:	36 00 f8    	push      0x36
    289c:	80 9f be    	mov.d     w0, [w15++]
    289e:	82 9f be    	mov.d     w2, [w15++]
    28a0:	84 9f be    	mov.d     w4, [w15++]
    28a2:	86 9f be    	mov.d     w6, [w15++]
    28a4:	32 00 f8    	push      0x32
    28a6:	34 00 f8    	push      0x34
    28a8:	10 00 20    	mov.w     #0x1, w0
    28aa:	a0 01 88    	mov.w     w0, 0x34
    28ac:	00 20 20    	mov.w     #0x200, w0
    28ae:	90 01 88    	mov.w     w0, 0x32
    28b0:	00 00 fa    	lnk       #0x0

000028b2 <.LSM57>:
    __serviceTxInterrupt(&uart3);
    28b2:	40 a3 20    	mov.w     #0xa34, w0
    28b4:	f5 fe 07    	rcall     0x26a0 <___serviceTxInterrupt>

000028b6 <.LSM58>:
}
    28b6:	00 80 fa    	ulnk      
    28b8:	34 00 f9    	pop       0x34
    28ba:	32 00 f9    	pop       0x32
    28bc:	4f 03 be    	mov.d     [--w15], w6
    28be:	4f 02 be    	mov.d     [--w15], w4
    28c0:	4f 01 be    	mov.d     [--w15], w2
    28c2:	4f 00 be    	mov.d     [--w15], w0
    28c4:	36 00 f9    	pop       0x36
    28c6:	00 40 06    	retfie    

000028c8 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    28c8:	36 00 f8    	push      0x36
    28ca:	80 9f be    	mov.d     w0, [w15++]
    28cc:	82 9f be    	mov.d     w2, [w15++]
    28ce:	84 9f be    	mov.d     w4, [w15++]
    28d0:	86 9f be    	mov.d     w6, [w15++]
    28d2:	32 00 f8    	push      0x32
    28d4:	34 00 f8    	push      0x34
    28d6:	10 00 20    	mov.w     #0x1, w0
    28d8:	a0 01 88    	mov.w     w0, 0x34
    28da:	00 20 20    	mov.w     #0x200, w0
    28dc:	90 01 88    	mov.w     w0, 0x32
    28de:	00 00 fa    	lnk       #0x0

000028e0 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    28e0:	40 a3 20    	mov.w     #0xa34, w0
    28e2:	45 ff 07    	rcall     0x276e <___serviceRxInterrupt>

000028e4 <.LSM61>:
}
    28e4:	00 80 fa    	ulnk      
    28e6:	34 00 f9    	pop       0x34
    28e8:	32 00 f9    	pop       0x32
    28ea:	4f 03 be    	mov.d     [--w15], w6
    28ec:	4f 02 be    	mov.d     [--w15], w4
    28ee:	4f 01 be    	mov.d     [--w15], w2
    28f0:	4f 00 be    	mov.d     [--w15], w0
    28f2:	36 00 f9    	pop       0x36
    28f4:	00 40 06    	retfie    

000028f6 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    28f6:	36 00 f8    	push      0x36
    28f8:	80 9f be    	mov.d     w0, [w15++]
    28fa:	82 9f be    	mov.d     w2, [w15++]
    28fc:	84 9f be    	mov.d     w4, [w15++]
    28fe:	86 9f be    	mov.d     w6, [w15++]
    2900:	32 00 f8    	push      0x32
    2902:	34 00 f8    	push      0x34
    2904:	10 00 20    	mov.w     #0x1, w0
    2906:	a0 01 88    	mov.w     w0, 0x34
    2908:	00 20 20    	mov.w     #0x200, w0
    290a:	90 01 88    	mov.w     w0, 0x32
    290c:	00 00 fa    	lnk       #0x0

0000290e <.LSM63>:
    __serviceTxInterrupt(&uart4);
    290e:	00 a7 20    	mov.w     #0xa70, w0
    2910:	c7 fe 07    	rcall     0x26a0 <___serviceTxInterrupt>

00002912 <.LSM64>:
}
    2912:	00 80 fa    	ulnk      
    2914:	34 00 f9    	pop       0x34
    2916:	32 00 f9    	pop       0x32
    2918:	4f 03 be    	mov.d     [--w15], w6
    291a:	4f 02 be    	mov.d     [--w15], w4
    291c:	4f 01 be    	mov.d     [--w15], w2
    291e:	4f 00 be    	mov.d     [--w15], w0
    2920:	36 00 f9    	pop       0x36
    2922:	00 40 06    	retfie    

00002924 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2924:	36 00 f8    	push      0x36
    2926:	80 9f be    	mov.d     w0, [w15++]
    2928:	82 9f be    	mov.d     w2, [w15++]
    292a:	84 9f be    	mov.d     w4, [w15++]
    292c:	86 9f be    	mov.d     w6, [w15++]
    292e:	32 00 f8    	push      0x32
    2930:	34 00 f8    	push      0x34
    2932:	10 00 20    	mov.w     #0x1, w0
    2934:	a0 01 88    	mov.w     w0, 0x34
    2936:	00 20 20    	mov.w     #0x200, w0
    2938:	90 01 88    	mov.w     w0, 0x32
    293a:	00 00 fa    	lnk       #0x0

0000293c <.LSM66>:
    __serviceRxInterrupt(&uart4);
    293c:	00 a7 20    	mov.w     #0xa70, w0
    293e:	17 ff 07    	rcall     0x276e <___serviceRxInterrupt>

00002940 <.LSM67>:
}
    2940:	00 80 fa    	ulnk      
    2942:	34 00 f9    	pop       0x34
    2944:	32 00 f9    	pop       0x32
    2946:	4f 03 be    	mov.d     [--w15], w6
    2948:	4f 02 be    	mov.d     [--w15], w4
    294a:	4f 01 be    	mov.d     [--w15], w2
    294c:	4f 00 be    	mov.d     [--w15], w0
    294e:	36 00 f9    	pop       0x36
    2950:	00 40 06    	retfie    

00002952 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2952:	08 00 fa    	lnk       #0x8
    2954:	10 07 98    	mov.w     w0, [w14+2]
    2956:	21 07 98    	mov.w     w1, [w14+4]
    2958:	32 07 98    	mov.w     w2, [w14+6]

0000295a <.LSM69>:
    int16_t i;

    switch (handle) {
    295a:	1e 00 90    	mov.w     [w14+2], w0
    295c:	00 00 e0    	cp0.w     w0
    295e:	25 00 35    	bra       LT, 0x29aa <.L37>
    2960:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2962:	03 00 34    	bra       LE, 0x296a <.L30>
    2964:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2966:	11 00 32    	bra       Z, 0x298a <.L31>

00002968 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2968:	21 00 37    	bra       0x29ac <.L34>

0000296a <.L30>:
    296a:	00 00 eb    	clr.w     w0
    296c:	00 0f 78    	mov.w     w0, [w14]
    296e:	08 00 37    	bra       0x2980 <.L32>

00002970 <.L33>:
    2970:	2e 00 90    	mov.w     [w14+4], w0
    2972:	90 40 78    	mov.b     [w0], w1
    2974:	2e 00 90    	mov.w     [w14+4], w0
    2976:	00 00 e8    	inc.w     w0, w0
    2978:	20 07 98    	mov.w     w0, [w14+4]
    297a:	00 40 80    	mov.w     0x800, w0
    297c:	4b 04 07    	rcall     0x3214 <_uart_putc>

0000297e <.LSM73>:
    297e:	1e 0f e8    	inc.w     [w14], [w14]

00002980 <.L32>:
    2980:	9e 00 78    	mov.w     [w14], w1
    2982:	3e 00 90    	mov.w     [w14+6], w0
    2984:	80 8f 50    	sub.w     w1, w0, [w15]
    2986:	f4 ff 39    	bra       NC, 0x2970 <.L33>

00002988 <.LSM74>:
    2988:	11 00 37    	bra       0x29ac <.L34>

0000298a <.L31>:
    298a:	00 00 eb    	clr.w     w0
    298c:	00 0f 78    	mov.w     w0, [w14]
    298e:	08 00 37    	bra       0x29a0 <.L35>

00002990 <.L36>:
    2990:	2e 00 90    	mov.w     [w14+4], w0
    2992:	90 40 78    	mov.b     [w0], w1
    2994:	2e 00 90    	mov.w     [w14+4], w0
    2996:	00 00 e8    	inc.w     w0, w0
    2998:	20 07 98    	mov.w     w0, [w14+4]
    299a:	10 40 80    	mov.w     0x802, w0
    299c:	3b 04 07    	rcall     0x3214 <_uart_putc>

0000299e <.LSM77>:
    299e:	1e 0f e8    	inc.w     [w14], [w14]

000029a0 <.L35>:
    29a0:	9e 00 78    	mov.w     [w14], w1
    29a2:	3e 00 90    	mov.w     [w14+6], w0
    29a4:	80 8f 50    	sub.w     w1, w0, [w15]
    29a6:	f4 ff 39    	bra       NC, 0x2990 <.L36>

000029a8 <.LSM78>:
    29a8:	01 00 37    	bra       0x29ac <.L34>

000029aa <.L37>:
    29aa:	00 00 00    	nop       

000029ac <.L34>:
    }
    return len;
    29ac:	3e 00 90    	mov.w     [w14+6], w0

000029ae <.LSM81>:
}
    29ae:	00 80 fa    	ulnk      
    29b0:	00 00 06    	return    

000029b2 <_init_uart>:

void init_uart(void) {
    29b2:	00 00 fa    	lnk       #0x0

000029b4 <.LSM83>:
    init_pin();
    29b4:	ca 07 07    	rcall     0x394a <_init_pin>

000029b6 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    29b6:	40 6d 20    	mov.w     #0x6d4, w0
    29b8:	80 1f 78    	mov.w     w0, [w15++]
    29ba:	57 01 20    	mov.w     #0x15, w7
    29bc:	86 c0 b3    	mov.b     #0x8, w6
    29be:	80 82 eb    	setm.w    w5
    29c0:	64 c0 b3    	mov.b     #0x6, w4
    29c2:	80 01 eb    	clr.w     w3
    29c4:	02 2f 20    	mov.w     #0x2f0, w2
    29c6:	21 2f 20    	mov.w     #0x2f2, w1
    29c8:	c0 aa 20    	mov.w     #0xaac, w0
    29ca:	d3 08 07    	rcall     0x3b72 <_pin_init>
    29cc:	8f 87 e9    	dec2.w    w15, w15

000029ce <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    29ce:	a0 6d 20    	mov.w     #0x6da, w0
    29d0:	80 1f 78    	mov.w     w0, [w15++]
    29d2:	a7 01 20    	mov.w     #0x1a, w7
    29d4:	00 43 eb    	clr.b     w6
    29d6:	80 82 eb    	setm.w    w5
    29d8:	74 c0 b3    	mov.b     #0x7, w4
    29da:	80 01 eb    	clr.w     w3
    29dc:	02 2f 20    	mov.w     #0x2f0, w2
    29de:	21 2f 20    	mov.w     #0x2f2, w1
    29e0:	20 ac 20    	mov.w     #0xac2, w0
    29e2:	c7 08 07    	rcall     0x3b72 <_pin_init>
    29e4:	8f 87 e9    	dec2.w    w15, w15

000029e6 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    29e6:	40 00 20    	mov.w     #0x4, w0
    29e8:	80 1f 78    	mov.w     w0, [w15++]
    29ea:	30 00 20    	mov.w     #0x3, w0
    29ec:	80 1f 78    	mov.w     w0, [w15++]
    29ee:	80 c0 b3    	mov.b     #0x8, w0
    29f0:	80 1f 78    	mov.w     w0, [w15++]
    29f2:	00 40 eb    	clr.b     w0
    29f4:	80 1f 78    	mov.w     w0, [w15++]
    29f6:	40 6a 20    	mov.w     #0x6a4, w0
    29f8:	80 1f 78    	mov.w     w0, [w15++]
    29fa:	40 6a 20    	mov.w     #0x6a4, w0
    29fc:	80 1f 78    	mov.w     w0, [w15++]
    29fe:	b0 c0 b3    	mov.b     #0xb, w0
    2a00:	80 1f 78    	mov.w     w0, [w15++]
    2a02:	c0 c0 b3    	mov.b     #0xc, w0
    2a04:	80 1f 78    	mov.w     w0, [w15++]
    2a06:	47 09 20    	mov.w     #0x94, w7
    2a08:	46 08 20    	mov.w     #0x84, w6
    2a0a:	85 22 20    	mov.w     #0x228, w5
    2a0c:	64 22 20    	mov.w     #0x226, w4
    2a0e:	43 22 20    	mov.w     #0x224, w3
    2a10:	22 22 20    	mov.w     #0x222, w2
    2a12:	01 22 20    	mov.w     #0x220, w1
    2a14:	c0 9b 20    	mov.w     #0x9bc, w0
    2a16:	6b 00 07    	rcall     0x2aee <_uart_init>
    2a18:	f0 87 57    	sub.w     w15, #0x10, w15

00002a1a <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2a1a:	60 00 20    	mov.w     #0x6, w0
    2a1c:	80 1f 78    	mov.w     w0, [w15++]
    2a1e:	50 00 20    	mov.w     #0x5, w0
    2a20:	80 1f 78    	mov.w     w0, [w15++]
    2a22:	80 c0 b3    	mov.b     #0x8, w0
    2a24:	80 1f 78    	mov.w     w0, [w15++]
    2a26:	00 40 eb    	clr.b     w0
    2a28:	80 1f 78    	mov.w     w0, [w15++]
    2a2a:	60 6a 20    	mov.w     #0x6a6, w0
    2a2c:	80 1f 78    	mov.w     w0, [w15++]
    2a2e:	60 6a 20    	mov.w     #0x6a6, w0
    2a30:	80 1f 78    	mov.w     w0, [w15++]
    2a32:	e0 c0 b3    	mov.b     #0xe, w0
    2a34:	80 1f 78    	mov.w     w0, [w15++]
    2a36:	f0 c0 b3    	mov.b     #0xf, w0
    2a38:	80 1f 78    	mov.w     w0, [w15++]
    2a3a:	67 09 20    	mov.w     #0x96, w7
    2a3c:	66 08 20    	mov.w     #0x86, w6
    2a3e:	85 23 20    	mov.w     #0x238, w5
    2a40:	64 23 20    	mov.w     #0x236, w4
    2a42:	43 23 20    	mov.w     #0x234, w3
    2a44:	22 23 20    	mov.w     #0x232, w2
    2a46:	01 23 20    	mov.w     #0x230, w1
    2a48:	80 9f 20    	mov.w     #0x9f8, w0
    2a4a:	51 00 07    	rcall     0x2aee <_uart_init>
    2a4c:	f0 87 57    	sub.w     w15, #0x10, w15

00002a4e <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2a4e:	d0 01 20    	mov.w     #0x1d, w0
    2a50:	80 1f 78    	mov.w     w0, [w15++]
    2a52:	c0 01 20    	mov.w     #0x1c, w0
    2a54:	80 1f 78    	mov.w     w0, [w15++]
    2a56:	80 c0 b3    	mov.b     #0x8, w0
    2a58:	80 1f 78    	mov.w     w0, [w15++]
    2a5a:	80 c0 b3    	mov.b     #0x8, w0
    2a5c:	80 1f 78    	mov.w     w0, [w15++]
    2a5e:	a0 6a 20    	mov.w     #0x6aa, w0
    2a60:	80 1f 78    	mov.w     w0, [w15++]
    2a62:	20 6a 20    	mov.w     #0x6a2, w0
    2a64:	80 1f 78    	mov.w     w0, [w15++]
    2a66:	20 c0 b3    	mov.b     #0x2, w0
    2a68:	80 1f 78    	mov.w     w0, [w15++]
    2a6a:	30 c0 b3    	mov.b     #0x3, w0
    2a6c:	80 1f 78    	mov.w     w0, [w15++]
    2a6e:	e7 09 20    	mov.w     #0x9e, w7
    2a70:	e6 08 20    	mov.w     #0x8e, w6
    2a72:	85 25 20    	mov.w     #0x258, w5
    2a74:	64 25 20    	mov.w     #0x256, w4
    2a76:	43 25 20    	mov.w     #0x254, w3
    2a78:	22 25 20    	mov.w     #0x252, w2
    2a7a:	01 25 20    	mov.w     #0x250, w1
    2a7c:	40 a3 20    	mov.w     #0xa34, w0
    2a7e:	37 00 07    	rcall     0x2aee <_uart_init>
    2a80:	f0 87 57    	sub.w     w15, #0x10, w15

00002a82 <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2a82:	f0 01 20    	mov.w     #0x1f, w0
    2a84:	80 1f 78    	mov.w     w0, [w15++]
    2a86:	e0 01 20    	mov.w     #0x1e, w0
    2a88:	80 1f 78    	mov.w     w0, [w15++]
    2a8a:	80 c0 b3    	mov.b     #0x8, w0
    2a8c:	80 1f 78    	mov.w     w0, [w15++]
    2a8e:	00 40 eb    	clr.b     w0
    2a90:	80 1f 78    	mov.w     w0, [w15++]
    2a92:	60 6b 20    	mov.w     #0x6b6, w0
    2a94:	80 1f 78    	mov.w     w0, [w15++]
    2a96:	60 6b 20    	mov.w     #0x6b6, w0
    2a98:	80 1f 78    	mov.w     w0, [w15++]
    2a9a:	80 c0 b3    	mov.b     #0x8, w0
    2a9c:	80 1f 78    	mov.w     w0, [w15++]
    2a9e:	90 c0 b3    	mov.b     #0x9, w0
    2aa0:	80 1f 78    	mov.w     w0, [w15++]
    2aa2:	e7 09 20    	mov.w     #0x9e, w7
    2aa4:	e6 08 20    	mov.w     #0x8e, w6
    2aa6:	85 2b 20    	mov.w     #0x2b8, w5
    2aa8:	64 2b 20    	mov.w     #0x2b6, w4
    2aaa:	43 2b 20    	mov.w     #0x2b4, w3
    2aac:	22 2b 20    	mov.w     #0x2b2, w2
    2aae:	01 2b 20    	mov.w     #0x2b0, w1
    2ab0:	00 a7 20    	mov.w     #0xa70, w0
    2ab2:	1d 00 07    	rcall     0x2aee <_uart_init>
    2ab4:	f0 87 57    	sub.w     w15, #0x10, w15

00002ab6 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    2ab6:	00 00 eb    	clr.w     w0
    2ab8:	80 1f 78    	mov.w     w0, [w15++]
    2aba:	00 00 eb    	clr.w     w0
    2abc:	80 1f 78    	mov.w     w0, [w15++]
    2abe:	00 00 eb    	clr.w     w0
    2ac0:	80 1f 78    	mov.w     w0, [w15++]
    2ac2:	00 00 eb    	clr.w     w0
    2ac4:	80 1f 78    	mov.w     w0, [w15++]
    2ac6:	00 00 eb    	clr.w     w0
    2ac8:	80 1f 78    	mov.w     w0, [w15++]
    2aca:	10 00 20    	mov.w     #0x1, w0
    2acc:	80 1f 78    	mov.w     w0, [w15++]
    2ace:	e5 c4 b3    	mov.b     #0x4e, w5
    2ad0:	06 00 20    	mov.w     #0x0, w6
    2ad2:	67 69 24    	mov.w     #0x4696, w7
    2ad4:	00 02 eb    	clr.w     w4
    2ad6:	80 01 eb    	clr.w     w3
    2ad8:	22 ac 20    	mov.w     #0xac2, w2
    2ada:	c1 aa 20    	mov.w     #0xaac, w1
    2adc:	c0 9b 20    	mov.w     #0x9bc, w0
    2ade:	72 00 07    	rcall     0x2bc4 <_uart_open>
    2ae0:	ec 87 57    	sub.w     w15, #0xc, w15

00002ae2 <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    2ae2:	c0 9b 20    	mov.w     #0x9bc, w0
    2ae4:	00 40 88    	mov.w     w0, 0x800

00002ae6 <.LSM92>:
    _stderr = &uart1;
    2ae6:	c0 9b 20    	mov.w     #0x9bc, w0
    2ae8:	10 40 88    	mov.w     w0, 0x802

00002aea <.LSM93>:
}
    2aea:	00 80 fa    	ulnk      
    2aec:	00 00 06    	return    

00002aee <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2aee:	10 00 fa    	lnk       #0x10
    2af0:	00 0f 78    	mov.w     w0, [w14]
    2af2:	11 07 98    	mov.w     w1, [w14+2]
    2af4:	22 07 98    	mov.w     w2, [w14+4]
    2af6:	33 07 98    	mov.w     w3, [w14+6]
    2af8:	44 07 98    	mov.w     w4, [w14+8]
    2afa:	55 07 98    	mov.w     w5, [w14+10]
    2afc:	66 07 98    	mov.w     w6, [w14+12]
    2afe:	77 07 98    	mov.w     w7, [w14+14]

00002b00 <.LSM95>:
    self->UxMODE = UxMODE;
    2b00:	1e 00 78    	mov.w     [w14], w0
    2b02:	9e 00 90    	mov.w     [w14+2], w1
    2b04:	01 08 78    	mov.w     w1, [w0]

00002b06 <.LSM96>:
    self->UxSTA = UxSTA;
    2b06:	1e 00 78    	mov.w     [w14], w0
    2b08:	ae 00 90    	mov.w     [w14+4], w1
    2b0a:	11 00 98    	mov.w     w1, [w0+2]

00002b0c <.LSM97>:
    self->UxTXREG = UxTXREG;
    2b0c:	1e 00 78    	mov.w     [w14], w0
    2b0e:	be 00 90    	mov.w     [w14+6], w1
    2b10:	21 00 98    	mov.w     w1, [w0+4]

00002b12 <.LSM98>:
    self->UxRXREG = UxRXREG;
    2b12:	1e 00 78    	mov.w     [w14], w0
    2b14:	ce 00 90    	mov.w     [w14+8], w1
    2b16:	31 00 98    	mov.w     w1, [w0+6]

00002b18 <.LSM99>:
    self->UxBRG = UxBRG;
    2b18:	1e 00 78    	mov.w     [w14], w0
    2b1a:	de 00 90    	mov.w     [w14+10], w1
    2b1c:	41 00 98    	mov.w     w1, [w0+8]

00002b1e <.LSM100>:
    self->IFSy = IFSy;
    2b1e:	1e 00 78    	mov.w     [w14], w0
    2b20:	ee 00 90    	mov.w     [w14+12], w1
    2b22:	51 00 98    	mov.w     w1, [w0+10]

00002b24 <.LSM101>:
    self->IECy = IECy;
    2b24:	1e 00 78    	mov.w     [w14], w0
    2b26:	fe 00 90    	mov.w     [w14+14], w1
    2b28:	61 00 98    	mov.w     w1, [w0+12]

00002b2a <.LSM102>:
    self->UxTXIF = UxTXIF;
    2b2a:	1e 00 78    	mov.w     [w14], w0
    2b2c:	8e f8 97    	mov.b     [w14-8], w1
    2b2e:	61 48 98    	mov.b     w1, [w0+14]

00002b30 <.LSM103>:
    self->UxRXIF = UxRXIF;
    2b30:	1e 00 78    	mov.w     [w14], w0
    2b32:	ee f0 97    	mov.b     [w14-10], w1
    2b34:	71 48 98    	mov.b     w1, [w0+15]

00002b36 <.LSM104>:
    self->RXrpinr = RXrpinr;
    2b36:	1e 00 78    	mov.w     [w14], w0
    2b38:	ae b8 97    	mov.w     [w14-12], w1
    2b3a:	01 08 98    	mov.w     w1, [w0+16]

00002b3c <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    2b3c:	1e 00 78    	mov.w     [w14], w0
    2b3e:	9e b8 97    	mov.w     [w14-14], w1
    2b40:	11 08 98    	mov.w     w1, [w0+18]

00002b42 <.LSM106>:
    self->RXrpshift = RXrpshift;
    2b42:	1e 00 78    	mov.w     [w14], w0
    2b44:	8e f0 97    	mov.b     [w14-16], w1
    2b46:	41 50 98    	mov.b     w1, [w0+20]

00002b48 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    2b48:	1e 00 78    	mov.w     [w14], w0
    2b4a:	ee e8 97    	mov.b     [w14-18], w1
    2b4c:	51 50 98    	mov.b     w1, [w0+21]

00002b4e <.LSM108>:
    self->TXrpnum = TXrpnum;
    2b4e:	1e 00 78    	mov.w     [w14], w0
    2b50:	ee b0 97    	mov.w     [w14-20], w1
    2b52:	31 08 98    	mov.w     w1, [w0+22]

00002b54 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    2b54:	1e 00 78    	mov.w     [w14], w0
    2b56:	de b0 97    	mov.w     [w14-22], w1
    2b58:	41 08 98    	mov.w     w1, [w0+24]

00002b5a <.LSM110>:
    self->TX = NULL;
    2b5a:	1e 00 78    	mov.w     [w14], w0
    2b5c:	80 00 eb    	clr.w     w1
    2b5e:	51 08 98    	mov.w     w1, [w0+26]

00002b60 <.LSM111>:
    self->RX = NULL;
    2b60:	1e 00 78    	mov.w     [w14], w0
    2b62:	80 00 eb    	clr.w     w1
    2b64:	61 08 98    	mov.w     w1, [w0+28]

00002b66 <.LSM112>:
    self->RTS = NULL;
    2b66:	1e 00 78    	mov.w     [w14], w0
    2b68:	80 00 eb    	clr.w     w1
    2b6a:	71 08 98    	mov.w     w1, [w0+30]

00002b6c <.LSM113>:
    self->CTS = NULL;
    2b6c:	1e 00 78    	mov.w     [w14], w0
    2b6e:	80 00 eb    	clr.w     w1
    2b70:	01 10 98    	mov.w     w1, [w0+32]

00002b72 <.LSM114>:
    self->TXbuffer.data = NULL;
    2b72:	1e 00 78    	mov.w     [w14], w0
    2b74:	80 00 eb    	clr.w     w1
    2b76:	11 10 98    	mov.w     w1, [w0+34]

00002b78 <.LSM115>:
    self->TXbuffer.length = 0;
    2b78:	1e 00 78    	mov.w     [w14], w0
    2b7a:	80 00 eb    	clr.w     w1
    2b7c:	21 10 98    	mov.w     w1, [w0+36]

00002b7e <.LSM116>:
    self->TXbuffer.head = 0;
    2b7e:	1e 00 78    	mov.w     [w14], w0
    2b80:	80 00 eb    	clr.w     w1
    2b82:	31 10 98    	mov.w     w1, [w0+38]

00002b84 <.LSM117>:
    self->TXbuffer.tail = 0;
    2b84:	1e 00 78    	mov.w     [w14], w0
    2b86:	80 00 eb    	clr.w     w1
    2b88:	41 10 98    	mov.w     w1, [w0+40]

00002b8a <.LSM118>:
    self->TXbuffer.count = 0;
    2b8a:	1e 00 78    	mov.w     [w14], w0
    2b8c:	80 00 eb    	clr.w     w1
    2b8e:	51 10 98    	mov.w     w1, [w0+42]

00002b90 <.LSM119>:
    self->RXbuffer.data = NULL;
    2b90:	1e 00 78    	mov.w     [w14], w0
    2b92:	80 00 eb    	clr.w     w1
    2b94:	61 10 98    	mov.w     w1, [w0+44]

00002b96 <.LSM120>:
    self->RXbuffer.length = 0;
    2b96:	1e 00 78    	mov.w     [w14], w0
    2b98:	80 00 eb    	clr.w     w1
    2b9a:	71 10 98    	mov.w     w1, [w0+46]

00002b9c <.LSM121>:
    self->RXbuffer.head = 0;
    2b9c:	1e 00 78    	mov.w     [w14], w0
    2b9e:	80 00 eb    	clr.w     w1
    2ba0:	01 18 98    	mov.w     w1, [w0+48]

00002ba2 <.LSM122>:
    self->RXbuffer.tail = 0;
    2ba2:	1e 00 78    	mov.w     [w14], w0
    2ba4:	80 00 eb    	clr.w     w1
    2ba6:	11 18 98    	mov.w     w1, [w0+50]

00002ba8 <.LSM123>:
    self->RXbuffer.count = 0;
    2ba8:	1e 00 78    	mov.w     [w14], w0
    2baa:	80 00 eb    	clr.w     w1
    2bac:	21 18 98    	mov.w     w1, [w0+52]

00002bae <.LSM124>:
    self->TXthreshold = 1;
    2bae:	1e 00 78    	mov.w     [w14], w0
    2bb0:	11 00 20    	mov.w     #0x1, w1
    2bb2:	31 18 98    	mov.w     w1, [w0+54]

00002bb4 <.LSM125>:
    self->putc = NULL;
    2bb4:	1e 00 78    	mov.w     [w14], w0
    2bb6:	80 00 eb    	clr.w     w1
    2bb8:	41 18 98    	mov.w     w1, [w0+56]

00002bba <.LSM126>:
    self->getc = NULL;
    2bba:	1e 00 78    	mov.w     [w14], w0
    2bbc:	80 00 eb    	clr.w     w1
    2bbe:	51 18 98    	mov.w     w1, [w0+58]

00002bc0 <.LSM127>:
}
    2bc0:	00 80 fa    	ulnk      
    2bc2:	00 00 06    	return    

00002bc4 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2bc4:	10 00 fa    	lnk       #0x10
    2bc6:	88 1f 78    	mov.w     w8, [w15++]
    2bc8:	00 0f 78    	mov.w     w0, [w14]
    2bca:	11 07 98    	mov.w     w1, [w14+2]
    2bcc:	22 07 98    	mov.w     w2, [w14+4]
    2bce:	33 07 98    	mov.w     w3, [w14+6]
    2bd0:	44 07 98    	mov.w     w4, [w14+8]
    2bd2:	56 07 98    	mov.w     w6, [w14+10]
    2bd4:	67 07 98    	mov.w     w7, [w14+12]
    2bd6:	65 4f 98    	mov.b     w5, [w14+14]

00002bd8 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2bd8:	1e 00 78    	mov.w     [w14], w0
    2bda:	10 00 78    	mov.w     [w0], w0
    2bdc:	80 00 eb    	clr.w     w1
    2bde:	01 08 78    	mov.w     w1, [w0]

00002be0 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2be0:	1e 00 90    	mov.w     [w14+2], w0
    2be2:	60 00 90    	mov.w     [w0+12], w0
    2be4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2be6:	0e 02 32    	bra       Z, 0x3004 <.L73>
    2be8:	2e 00 90    	mov.w     [w14+4], w0
    2bea:	60 00 90    	mov.w     [w0+12], w0
    2bec:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2bee:	0c 02 32    	bra       Z, 0x3008 <.L74>

00002bf0 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2bf0:	1e 00 90    	mov.w     [w14+2], w0
    2bf2:	00 08 90    	mov.w     [w0+16], w0
    2bf4:	00 00 e0    	cp0.w     w0
    2bf6:	69 00 3a    	bra       NZ, 0x2cca <.L44>
    2bf8:	2e 00 90    	mov.w     [w14+4], w0
    2bfa:	00 08 90    	mov.w     [w0+16], w0
    2bfc:	00 00 e0    	cp0.w     w0
    2bfe:	65 00 3a    	bra       NZ, 0x2cca <.L44>

00002c00 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2c00:	1e 00 90    	mov.w     [w14+2], w0
    2c02:	0a 08 07    	rcall     0x3c18 <_pin_digitalOut>

00002c04 <.LSM133>:
        pin_set(TX);
    2c04:	1e 00 90    	mov.w     [w14+2], w0
    2c06:	65 08 07    	rcall     0x3cd2 <_pin_set>

00002c08 <.LSM134>:
        pin_digitalIn(RX);
    2c08:	2e 00 90    	mov.w     [w14+4], w0
    2c0a:	df 07 07    	rcall     0x3bca <_pin_digitalIn>

00002c0c <.LSM135>:
        self->TX = TX;
    2c0c:	1e 00 78    	mov.w     [w14], w0
    2c0e:	9e 00 90    	mov.w     [w14+2], w1
    2c10:	51 08 98    	mov.w     w1, [w0+26]

00002c12 <.LSM136>:
        TX->owner = (void *)self;
    2c12:	1e 00 90    	mov.w     [w14+2], w0
    2c14:	9e 00 78    	mov.w     [w14], w1
    2c16:	01 08 98    	mov.w     w1, [w0+16]

00002c18 <.LSM137>:
        TX->write = NULL;
    2c18:	1e 00 90    	mov.w     [w14+2], w0
    2c1a:	80 00 eb    	clr.w     w1
    2c1c:	11 08 98    	mov.w     w1, [w0+18]

00002c1e <.LSM138>:
        TX->read = NULL;
    2c1e:	1e 00 90    	mov.w     [w14+2], w0
    2c20:	80 00 eb    	clr.w     w1
    2c22:	21 08 98    	mov.w     w1, [w0+20]

00002c24 <.LSM139>:
        self->RX = RX;
    2c24:	1e 00 78    	mov.w     [w14], w0
    2c26:	ae 00 90    	mov.w     [w14+4], w1
    2c28:	61 08 98    	mov.w     w1, [w0+28]

00002c2a <.LSM140>:
        RX->owner = (void *)self;
    2c2a:	2e 00 90    	mov.w     [w14+4], w0
    2c2c:	9e 00 78    	mov.w     [w14], w1
    2c2e:	01 08 98    	mov.w     w1, [w0+16]

00002c30 <.LSM141>:
        RX->write = NULL;
    2c30:	2e 00 90    	mov.w     [w14+4], w0
    2c32:	80 00 eb    	clr.w     w1
    2c34:	11 08 98    	mov.w     w1, [w0+18]

00002c36 <.LSM142>:
        RX->read = NULL;
    2c36:	2e 00 90    	mov.w     [w14+4], w0
    2c38:	80 00 eb    	clr.w     w1
    2c3a:	21 08 98    	mov.w     w1, [w0+20]

00002c3c <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c3c:	11 3a 80    	mov.w     0x742, w1
    2c3e:	f0 0b 20    	mov.w     #0xbf, w0
    2c40:	00 81 60    	and.w     w1, w0, w2
    2c42:	60 04 20    	mov.w     #0x46, w0
    2c44:	71 05 20    	mov.w     #0x57, w1
    2c46:	23 74 20    	mov.w     #0x742, w3
    2c48:	80 49 78    	mov.b     w0, [w3]
    2c4a:	81 49 78    	mov.b     w1, [w3]
    2c4c:	82 49 78    	mov.b     w2, [w3]

00002c4e <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2c4e:	1e 00 90    	mov.w     [w14+2], w0
    2c50:	70 00 90    	mov.w     [w0+14], w0
    2c52:	9e 00 90    	mov.w     [w14+2], w1
    2c54:	f1 00 90    	mov.w     [w1+14], w1
    2c56:	11 01 78    	mov.w     [w1], w2
    2c58:	9e 00 90    	mov.w     [w14+2], w1
    2c5a:	a1 48 90    	mov.b     [w1+10], w1
    2c5c:	81 80 fb    	ze        w1, w1
    2c5e:	f3 03 20    	mov.w     #0x3f, w3
    2c60:	81 18 dd    	sl.w      w3, w1, w1
    2c62:	81 80 ea    	com.w     w1, w1
    2c64:	81 00 61    	and.w     w2, w1, w1
    2c66:	01 08 78    	mov.w     w1, [w0]

00002c68 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2c68:	1e 00 90    	mov.w     [w14+2], w0
    2c6a:	70 00 90    	mov.w     [w0+14], w0
    2c6c:	9e 00 90    	mov.w     [w14+2], w1
    2c6e:	f1 00 90    	mov.w     [w1+14], w1
    2c70:	11 01 78    	mov.w     [w1], w2
    2c72:	9e 00 78    	mov.w     [w14], w1
    2c74:	b1 09 90    	mov.w     [w1+22], w3
    2c76:	9e 00 90    	mov.w     [w14+2], w1
    2c78:	a1 48 90    	mov.b     [w1+10], w1
    2c7a:	81 80 fb    	ze        w1, w1
    2c7c:	81 18 dd    	sl.w      w3, w1, w1
    2c7e:	82 80 70    	ior.w     w1, w2, w1
    2c80:	01 08 78    	mov.w     w1, [w0]

00002c82 <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2c82:	1e 00 78    	mov.w     [w14], w0
    2c84:	00 08 90    	mov.w     [w0+16], w0
    2c86:	9e 00 78    	mov.w     [w14], w1
    2c88:	81 08 90    	mov.w     [w1+16], w1
    2c8a:	11 01 78    	mov.w     [w1], w2
    2c8c:	9e 00 78    	mov.w     [w14], w1
    2c8e:	c1 50 90    	mov.b     [w1+20], w1
    2c90:	81 80 fb    	ze        w1, w1
    2c92:	f3 03 20    	mov.w     #0x3f, w3
    2c94:	81 18 dd    	sl.w      w3, w1, w1
    2c96:	81 80 ea    	com.w     w1, w1
    2c98:	81 00 61    	and.w     w2, w1, w1
    2c9a:	01 08 78    	mov.w     w1, [w0]

00002c9c <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2c9c:	1e 00 78    	mov.w     [w14], w0
    2c9e:	00 08 90    	mov.w     [w0+16], w0
    2ca0:	9e 00 78    	mov.w     [w14], w1
    2ca2:	81 08 90    	mov.w     [w1+16], w1
    2ca4:	11 01 78    	mov.w     [w1], w2
    2ca6:	ae 00 90    	mov.w     [w14+4], w1
    2ca8:	e1 01 90    	mov.w     [w1+12], w3
    2caa:	9e 00 78    	mov.w     [w14], w1
    2cac:	c1 50 90    	mov.b     [w1+20], w1
    2cae:	81 80 fb    	ze        w1, w1
    2cb0:	81 18 dd    	sl.w      w3, w1, w1
    2cb2:	82 80 70    	ior.w     w1, w2, w1
    2cb4:	01 08 78    	mov.w     w1, [w0]

00002cb6 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2cb6:	11 3a 80    	mov.w     0x742, w1
    2cb8:	00 04 20    	mov.w     #0x40, w0
    2cba:	01 01 70    	ior.w     w0, w1, w2
    2cbc:	60 04 20    	mov.w     #0x46, w0
    2cbe:	71 05 20    	mov.w     #0x57, w1
    2cc0:	23 74 20    	mov.w     #0x742, w3
    2cc2:	80 49 78    	mov.b     w0, [w3]
    2cc4:	81 49 78    	mov.b     w1, [w3]
    2cc6:	82 49 78    	mov.b     w2, [w3]
    2cc8:	0a 00 37    	bra       0x2cde <.L45>

00002cca <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2cca:	1e 00 78    	mov.w     [w14], w0
    2ccc:	d0 08 90    	mov.w     [w0+26], w1
    2cce:	1e 00 90    	mov.w     [w14+2], w0
    2cd0:	80 8f 50    	sub.w     w1, w0, [w15]
    2cd2:	9c 01 3a    	bra       NZ, 0x300c <.L75>
    2cd4:	1e 00 78    	mov.w     [w14], w0
    2cd6:	e0 08 90    	mov.w     [w0+28], w1
    2cd8:	2e 00 90    	mov.w     [w14+4], w0
    2cda:	80 8f 50    	sub.w     w1, w0, [w15]
    2cdc:	99 01 3a    	bra       NZ, 0x3010 <.L76>

00002cde <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2cde:	3e 00 90    	mov.w     [w14+6], w0
    2ce0:	00 00 e0    	cp0.w     w0
    2ce2:	87 00 32    	bra       Z, 0x2df2 <.L47>
    2ce4:	4e 00 90    	mov.w     [w14+8], w0
    2ce6:	00 00 e0    	cp0.w     w0
    2ce8:	84 00 32    	bra       Z, 0x2df2 <.L47>

00002cea <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2cea:	3e 00 90    	mov.w     [w14+6], w0
    2cec:	60 00 90    	mov.w     [w0+12], w0
    2cee:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2cf0:	91 01 32    	bra       Z, 0x3014 <.L77>
    2cf2:	4e 00 90    	mov.w     [w14+8], w0
    2cf4:	60 00 90    	mov.w     [w0+12], w0
    2cf6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2cf8:	8f 01 32    	bra       Z, 0x3018 <.L78>

00002cfa <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2cfa:	3e 00 90    	mov.w     [w14+6], w0
    2cfc:	00 08 90    	mov.w     [w0+16], w0
    2cfe:	00 00 e0    	cp0.w     w0
    2d00:	69 00 3a    	bra       NZ, 0x2dd4 <.L50>
    2d02:	4e 00 90    	mov.w     [w14+8], w0
    2d04:	00 08 90    	mov.w     [w0+16], w0
    2d06:	00 00 e0    	cp0.w     w0
    2d08:	65 00 3a    	bra       NZ, 0x2dd4 <.L50>

00002d0a <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2d0a:	3e 00 90    	mov.w     [w14+6], w0
    2d0c:	85 07 07    	rcall     0x3c18 <_pin_digitalOut>

00002d0e <.LSM154>:
            pin_set(RTS);
    2d0e:	3e 00 90    	mov.w     [w14+6], w0
    2d10:	e0 07 07    	rcall     0x3cd2 <_pin_set>

00002d12 <.LSM155>:
            pin_digitalIn(CTS);
    2d12:	4e 00 90    	mov.w     [w14+8], w0
    2d14:	5a 07 07    	rcall     0x3bca <_pin_digitalIn>

00002d16 <.LSM156>:
            self->RTS = RTS;
    2d16:	1e 00 78    	mov.w     [w14], w0
    2d18:	be 00 90    	mov.w     [w14+6], w1
    2d1a:	71 08 98    	mov.w     w1, [w0+30]

00002d1c <.LSM157>:
            RTS->owner = (void *)self;
    2d1c:	3e 00 90    	mov.w     [w14+6], w0
    2d1e:	9e 00 78    	mov.w     [w14], w1
    2d20:	01 08 98    	mov.w     w1, [w0+16]

00002d22 <.LSM158>:
            RTS->write = NULL;
    2d22:	3e 00 90    	mov.w     [w14+6], w0
    2d24:	80 00 eb    	clr.w     w1
    2d26:	11 08 98    	mov.w     w1, [w0+18]

00002d28 <.LSM159>:
            RTS->read = NULL;
    2d28:	3e 00 90    	mov.w     [w14+6], w0
    2d2a:	80 00 eb    	clr.w     w1
    2d2c:	21 08 98    	mov.w     w1, [w0+20]

00002d2e <.LSM160>:
            self->CTS = CTS;
    2d2e:	1e 00 78    	mov.w     [w14], w0
    2d30:	ce 00 90    	mov.w     [w14+8], w1
    2d32:	01 10 98    	mov.w     w1, [w0+32]

00002d34 <.LSM161>:
            CTS->owner = (void *)self;
    2d34:	4e 00 90    	mov.w     [w14+8], w0
    2d36:	9e 00 78    	mov.w     [w14], w1
    2d38:	01 08 98    	mov.w     w1, [w0+16]

00002d3a <.LSM162>:
            CTS->write = NULL;
    2d3a:	4e 00 90    	mov.w     [w14+8], w0
    2d3c:	80 00 eb    	clr.w     w1
    2d3e:	11 08 98    	mov.w     w1, [w0+18]

00002d40 <.LSM163>:
            CTS->read = NULL;
    2d40:	4e 00 90    	mov.w     [w14+8], w0
    2d42:	80 00 eb    	clr.w     w1
    2d44:	21 08 98    	mov.w     w1, [w0+20]

00002d46 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2d46:	11 3a 80    	mov.w     0x742, w1
    2d48:	f0 0b 20    	mov.w     #0xbf, w0
    2d4a:	00 81 60    	and.w     w1, w0, w2
    2d4c:	60 04 20    	mov.w     #0x46, w0
    2d4e:	71 05 20    	mov.w     #0x57, w1
    2d50:	23 74 20    	mov.w     #0x742, w3
    2d52:	80 49 78    	mov.b     w0, [w3]
    2d54:	81 49 78    	mov.b     w1, [w3]
    2d56:	82 49 78    	mov.b     w2, [w3]

00002d58 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2d58:	3e 00 90    	mov.w     [w14+6], w0
    2d5a:	70 00 90    	mov.w     [w0+14], w0
    2d5c:	be 00 90    	mov.w     [w14+6], w1
    2d5e:	f1 00 90    	mov.w     [w1+14], w1
    2d60:	11 01 78    	mov.w     [w1], w2
    2d62:	be 00 90    	mov.w     [w14+6], w1
    2d64:	a1 48 90    	mov.b     [w1+10], w1
    2d66:	81 80 fb    	ze        w1, w1
    2d68:	f3 03 20    	mov.w     #0x3f, w3
    2d6a:	81 18 dd    	sl.w      w3, w1, w1
    2d6c:	81 80 ea    	com.w     w1, w1
    2d6e:	81 00 61    	and.w     w2, w1, w1
    2d70:	01 08 78    	mov.w     w1, [w0]

00002d72 <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2d72:	3e 00 90    	mov.w     [w14+6], w0
    2d74:	70 00 90    	mov.w     [w0+14], w0
    2d76:	be 00 90    	mov.w     [w14+6], w1
    2d78:	f1 00 90    	mov.w     [w1+14], w1
    2d7a:	11 01 78    	mov.w     [w1], w2
    2d7c:	9e 00 78    	mov.w     [w14], w1
    2d7e:	c1 09 90    	mov.w     [w1+24], w3
    2d80:	be 00 90    	mov.w     [w14+6], w1
    2d82:	a1 48 90    	mov.b     [w1+10], w1
    2d84:	81 80 fb    	ze        w1, w1
    2d86:	81 18 dd    	sl.w      w3, w1, w1
    2d88:	82 80 70    	ior.w     w1, w2, w1
    2d8a:	01 08 78    	mov.w     w1, [w0]

00002d8c <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2d8c:	1e 00 78    	mov.w     [w14], w0
    2d8e:	10 08 90    	mov.w     [w0+18], w0
    2d90:	9e 00 78    	mov.w     [w14], w1
    2d92:	91 08 90    	mov.w     [w1+18], w1
    2d94:	11 01 78    	mov.w     [w1], w2
    2d96:	9e 00 78    	mov.w     [w14], w1
    2d98:	d1 50 90    	mov.b     [w1+21], w1
    2d9a:	81 80 fb    	ze        w1, w1
    2d9c:	f3 03 20    	mov.w     #0x3f, w3
    2d9e:	81 18 dd    	sl.w      w3, w1, w1
    2da0:	81 80 ea    	com.w     w1, w1
    2da2:	81 00 61    	and.w     w2, w1, w1
    2da4:	01 08 78    	mov.w     w1, [w0]

00002da6 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2da6:	1e 00 78    	mov.w     [w14], w0
    2da8:	10 08 90    	mov.w     [w0+18], w0
    2daa:	9e 00 78    	mov.w     [w14], w1
    2dac:	91 08 90    	mov.w     [w1+18], w1
    2dae:	11 01 78    	mov.w     [w1], w2
    2db0:	ce 00 90    	mov.w     [w14+8], w1
    2db2:	e1 01 90    	mov.w     [w1+12], w3
    2db4:	9e 00 78    	mov.w     [w14], w1
    2db6:	d1 50 90    	mov.b     [w1+21], w1
    2db8:	81 80 fb    	ze        w1, w1
    2dba:	81 18 dd    	sl.w      w3, w1, w1
    2dbc:	82 80 70    	ior.w     w1, w2, w1
    2dbe:	01 08 78    	mov.w     w1, [w0]

00002dc0 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2dc0:	11 3a 80    	mov.w     0x742, w1
    2dc2:	00 04 20    	mov.w     #0x40, w0
    2dc4:	01 01 70    	ior.w     w0, w1, w2
    2dc6:	60 04 20    	mov.w     #0x46, w0
    2dc8:	71 05 20    	mov.w     #0x57, w1
    2dca:	23 74 20    	mov.w     #0x742, w3
    2dcc:	80 49 78    	mov.b     w0, [w3]
    2dce:	81 49 78    	mov.b     w1, [w3]
    2dd0:	82 49 78    	mov.b     w2, [w3]
    2dd2:	0a 00 37    	bra       0x2de8 <.L51>

00002dd4 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2dd4:	1e 00 78    	mov.w     [w14], w0
    2dd6:	f0 08 90    	mov.w     [w0+30], w1
    2dd8:	3e 00 90    	mov.w     [w14+6], w0
    2dda:	80 8f 50    	sub.w     w1, w0, [w15]
    2ddc:	1f 01 3a    	bra       NZ, 0x301c <.L79>
    2dde:	1e 00 78    	mov.w     [w14], w0
    2de0:	80 10 90    	mov.w     [w0+32], w1
    2de2:	4e 00 90    	mov.w     [w14+8], w0
    2de4:	80 8f 50    	sub.w     w1, w0, [w15]
    2de6:	1c 01 3a    	bra       NZ, 0x3020 <.L80>

00002de8 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2de8:	1e 00 78    	mov.w     [w14], w0
    2dea:	10 00 78    	mov.w     [w0], w0
    2dec:	01 20 20    	mov.w     #0x200, w1
    2dee:	01 08 78    	mov.w     w1, [w0]
    2df0:	06 00 37    	bra       0x2dfe <.L53>

00002df2 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2df2:	3e 00 90    	mov.w     [w14+6], w0
    2df4:	00 00 e0    	cp0.w     w0
    2df6:	16 01 3a    	bra       NZ, 0x3024 <.L81>
    2df8:	4e 00 90    	mov.w     [w14+8], w0
    2dfa:	00 00 e0    	cp0.w     w0
    2dfc:	15 01 3a    	bra       NZ, 0x3028 <.L82>

00002dfe <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2dfe:	18 c0 b3    	mov.b     #0x1, w8
    2e00:	02 40 22    	mov.w     #0x2400, w2
    2e02:	43 a7 24    	mov.w     #0x4a74, w3
    2e04:	5e 00 90    	mov.w     [w14+10], w0
    2e06:	ee 00 90    	mov.w     [w14+12], w1
    2e08:	d5 f2 07    	rcall     0x13b4 <___gesf2>
    2e0a:	00 00 e0    	cp0.w     w0
    2e0c:	01 00 3c    	bra       GT, 0x2e10 <.L55>
    2e0e:	00 44 eb    	clr.b     w8

00002e10 <.L55>:
    2e10:	08 04 e0    	cp0.b     w8
    2e12:	04 00 32    	bra       Z, 0x2e1c <.L56>

00002e14 <.LSM174>:
        baudrate = FCY/4.;
    2e14:	00 40 22    	mov.w     #0x2400, w0
    2e16:	41 a7 24    	mov.w     #0x4a74, w1
    2e18:	50 07 98    	mov.w     w0, [w14+10]
    2e1a:	61 07 98    	mov.w     w1, [w14+12]

00002e1c <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2e1c:	18 c0 b3    	mov.b     #0x1, w8
    2e1e:	02 40 22    	mov.w     #0x2400, w2
    2e20:	43 17 24    	mov.w     #0x4174, w3
    2e22:	5e 00 90    	mov.w     [w14+10], w0
    2e24:	ee 00 90    	mov.w     [w14+12], w1
    2e26:	c4 f2 07    	rcall     0x13b0 <___eqsf2>
    2e28:	00 00 e0    	cp0.w     w0
    2e2a:	01 00 35    	bra       LT, 0x2e2e <.L57>
    2e2c:	00 44 eb    	clr.b     w8

00002e2e <.L57>:
    2e2e:	08 04 e0    	cp0.b     w8
    2e30:	04 00 32    	bra       Z, 0x2e3a <.L58>

00002e32 <.LSM176>:
        baudrate = FCY/(16.*65536.);
    2e32:	00 40 22    	mov.w     #0x2400, w0
    2e34:	41 17 24    	mov.w     #0x4174, w1
    2e36:	50 07 98    	mov.w     w0, [w14+10]
    2e38:	61 07 98    	mov.w     w1, [w14+12]

00002e3a <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2e3a:	18 c0 b3    	mov.b     #0x1, w8
    2e3c:	02 40 22    	mov.w     #0x2400, w2
    2e3e:	43 27 24    	mov.w     #0x4274, w3
    2e40:	5e 00 90    	mov.w     [w14+10], w0
    2e42:	ee 00 90    	mov.w     [w14+12], w1
    2e44:	b5 f2 07    	rcall     0x13b0 <___eqsf2>
    2e46:	00 00 e0    	cp0.w     w0
    2e48:	01 00 34    	bra       LE, 0x2e4c <.L59>
    2e4a:	00 44 eb    	clr.b     w8

00002e4c <.L59>:
    2e4c:	08 04 e0    	cp0.b     w8
    2e4e:	0f 00 32    	bra       Z, 0x2e6e <.L60>

00002e50 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2e50:	1e 00 78    	mov.w     [w14], w0
    2e52:	40 04 90    	mov.w     [w0+8], w8
    2e54:	5e 01 90    	mov.w     [w14+10], w2
    2e56:	ee 01 90    	mov.w     [w14+12], w3
    2e58:	00 40 22    	mov.w     #0x2400, w0
    2e5a:	41 97 24    	mov.w     #0x4974, w1
    2e5c:	67 f2 07    	rcall     0x132c <___divsf3>
    2e5e:	02 00 20    	mov.w     #0x0, w2
    2e60:	03 f0 23    	mov.w     #0x3f00, w3
    2e62:	07 f2 07    	rcall     0x1272 <___addsf3>
    2e64:	a9 f2 07    	rcall     0x13b8 <___fixunssfsi>
    2e66:	00 00 78    	mov.w     w0, w0
    2e68:	00 00 e9    	dec.w     w0, w0
    2e6a:	00 0c 78    	mov.w     w0, [w8]
    2e6c:	15 00 37    	bra       0x2e98 <.L61>

00002e6e <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2e6e:	1e 00 78    	mov.w     [w14], w0
    2e70:	10 00 78    	mov.w     [w0], w0
    2e72:	9e 00 78    	mov.w     [w14], w1
    2e74:	91 00 78    	mov.w     [w1], w1
    2e76:	91 00 78    	mov.w     [w1], w1
    2e78:	01 30 a0    	bset.w    w1, #0x3
    2e7a:	01 08 78    	mov.w     w1, [w0]

00002e7c <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2e7c:	1e 00 78    	mov.w     [w14], w0
    2e7e:	40 04 90    	mov.w     [w0+8], w8
    2e80:	5e 01 90    	mov.w     [w14+10], w2
    2e82:	ee 01 90    	mov.w     [w14+12], w3
    2e84:	00 40 22    	mov.w     #0x2400, w0
    2e86:	41 a7 24    	mov.w     #0x4a74, w1
    2e88:	51 f2 07    	rcall     0x132c <___divsf3>
    2e8a:	02 00 20    	mov.w     #0x0, w2
    2e8c:	03 f0 23    	mov.w     #0x3f00, w3
    2e8e:	f1 f1 07    	rcall     0x1272 <___addsf3>
    2e90:	93 f2 07    	rcall     0x13b8 <___fixunssfsi>
    2e92:	00 00 78    	mov.w     w0, w0
    2e94:	00 00 e9    	dec.w     w0, w0
    2e96:	00 0c 78    	mov.w     w0, [w8]

00002e98 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2e98:	ee 48 90    	mov.b     [w14+14], w1
    2e9a:	50 c4 b3    	mov.b     #0x45, w0
    2e9c:	80 cf 50    	sub.b     w1, w0, [w15]
    2e9e:	04 00 32    	bra       Z, 0x2ea8 <.L62>
    2ea0:	ee 48 90    	mov.b     [w14+14], w1
    2ea2:	50 c6 b3    	mov.b     #0x65, w0
    2ea4:	80 cf 50    	sub.b     w1, w0, [w15]
    2ea6:	08 00 3a    	bra       NZ, 0x2eb8 <.L63>

00002ea8 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2ea8:	1e 00 78    	mov.w     [w14], w0
    2eaa:	10 00 78    	mov.w     [w0], w0
    2eac:	9e 00 78    	mov.w     [w14], w1
    2eae:	91 00 78    	mov.w     [w1], w1
    2eb0:	91 00 78    	mov.w     [w1], w1
    2eb2:	01 10 a0    	bset.w    w1, #0x1
    2eb4:	01 08 78    	mov.w     w1, [w0]
    2eb6:	18 00 37    	bra       0x2ee8 <.L64>

00002eb8 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2eb8:	ee 48 90    	mov.b     [w14+14], w1
    2eba:	f0 c4 b3    	mov.b     #0x4f, w0
    2ebc:	80 cf 50    	sub.b     w1, w0, [w15]
    2ebe:	04 00 32    	bra       Z, 0x2ec8 <.L65>
    2ec0:	ee 48 90    	mov.b     [w14+14], w1
    2ec2:	f0 c6 b3    	mov.b     #0x6f, w0
    2ec4:	80 cf 50    	sub.b     w1, w0, [w15]
    2ec6:	08 00 3a    	bra       NZ, 0x2ed8 <.L66>

00002ec8 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2ec8:	1e 00 78    	mov.w     [w14], w0
    2eca:	10 00 78    	mov.w     [w0], w0
    2ecc:	9e 00 78    	mov.w     [w14], w1
    2ece:	91 00 78    	mov.w     [w1], w1
    2ed0:	91 00 78    	mov.w     [w1], w1
    2ed2:	01 20 a0    	bset.w    w1, #0x2
    2ed4:	01 08 78    	mov.w     w1, [w0]
    2ed6:	08 00 37    	bra       0x2ee8 <.L64>

00002ed8 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2ed8:	ee 48 90    	mov.b     [w14+14], w1
    2eda:	e0 c4 b3    	mov.b     #0x4e, w0
    2edc:	80 cf 50    	sub.b     w1, w0, [w15]
    2ede:	04 00 32    	bra       Z, 0x2ee8 <.L64>
    2ee0:	ee 48 90    	mov.b     [w14+14], w1
    2ee2:	e0 c6 b3    	mov.b     #0x6e, w0
    2ee4:	80 cf 50    	sub.b     w1, w0, [w15]
    2ee6:	a2 00 3a    	bra       NZ, 0x302c <.L83>

00002ee8 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2ee8:	4e b8 97    	mov.w     [w14-8], w0
    2eea:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2eec:	08 00 3a    	bra       NZ, 0x2efe <.L67>

00002eee <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2eee:	1e 00 78    	mov.w     [w14], w0
    2ef0:	10 00 78    	mov.w     [w0], w0
    2ef2:	9e 00 78    	mov.w     [w14], w1
    2ef4:	91 00 78    	mov.w     [w1], w1
    2ef6:	91 00 78    	mov.w     [w1], w1
    2ef8:	01 00 a0    	bset.w    w1, #0x0
    2efa:	01 08 78    	mov.w     w1, [w0]
    2efc:	03 00 37    	bra       0x2f04 <.L68>

00002efe <.L67>:
    } else if (stopbits!=1) {
    2efe:	4e b8 97    	mov.w     [w14-8], w0
    2f00:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2f02:	96 00 3a    	bra       NZ, 0x3030 <.L84>

00002f04 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2f04:	2e b8 97    	mov.w     [w14-12], w0
    2f06:	00 00 e0    	cp0.w     w0
    2f08:	04 00 3a    	bra       NZ, 0x2f12 <.L69>

00002f0a <.LSM190>:
        self->putc = __putc_nobuffer;
    2f0a:	1e 00 78    	mov.w     [w14], w0
    2f0c:	a1 5f 22    	mov.w     #0x25fa, w1
    2f0e:	41 18 98    	mov.w     w1, [w0+56]
    2f10:	36 00 37    	bra       0x2f7e <.L70>

00002f12 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2f12:	1e 00 78    	mov.w     [w14], w0
    2f14:	10 00 90    	mov.w     [w0+2], w0
    2f16:	9e 00 78    	mov.w     [w14], w1
    2f18:	91 00 90    	mov.w     [w1+2], w1
    2f1a:	11 01 78    	mov.w     [w1], w2
    2f1c:	01 00 22    	mov.w     #0x2000, w1
    2f1e:	82 80 70    	ior.w     w1, w2, w1
    2f20:	01 08 78    	mov.w     w1, [w0]

00002f22 <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2f22:	1e 00 78    	mov.w     [w14], w0
    2f24:	ae b8 97    	mov.w     [w14-12], w1
    2f26:	11 10 98    	mov.w     w1, [w0+34]

00002f28 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    2f28:	1e 00 78    	mov.w     [w14], w0
    2f2a:	9e b8 97    	mov.w     [w14-14], w1
    2f2c:	21 10 98    	mov.w     w1, [w0+36]

00002f2e <.LSM194>:
        self->TXbuffer.head = 0;
    2f2e:	1e 00 78    	mov.w     [w14], w0
    2f30:	80 00 eb    	clr.w     w1
    2f32:	31 10 98    	mov.w     w1, [w0+38]

00002f34 <.LSM195>:
        self->TXbuffer.tail = 0;
    2f34:	1e 00 78    	mov.w     [w14], w0
    2f36:	80 00 eb    	clr.w     w1
    2f38:	41 10 98    	mov.w     w1, [w0+40]

00002f3a <.LSM196>:
        self->TXbuffer.count = 0;
    2f3a:	1e 00 78    	mov.w     [w14], w0
    2f3c:	80 00 eb    	clr.w     w1
    2f3e:	51 10 98    	mov.w     w1, [w0+42]

00002f40 <.LSM197>:
        self->TXthreshold = TXthreshold;
    2f40:	1e 00 78    	mov.w     [w14], w0
    2f42:	be b8 97    	mov.w     [w14-10], w1
    2f44:	31 18 98    	mov.w     w1, [w0+54]

00002f46 <.LSM198>:
        self->putc = __putc_buffer;
    2f46:	1e 00 78    	mov.w     [w14], w0
    2f48:	c1 63 22    	mov.w     #0x263c, w1
    2f4a:	41 18 98    	mov.w     w1, [w0+56]

00002f4c <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2f4c:	1e 00 78    	mov.w     [w14], w0
    2f4e:	50 00 90    	mov.w     [w0+10], w0
    2f50:	9e 00 78    	mov.w     [w14], w1
    2f52:	d1 00 90    	mov.w     [w1+10], w1
    2f54:	11 01 78    	mov.w     [w1], w2
    2f56:	9e 00 78    	mov.w     [w14], w1
    2f58:	e1 48 90    	mov.b     [w1+14], w1
    2f5a:	81 80 fb    	ze        w1, w1
    2f5c:	13 00 20    	mov.w     #0x1, w3
    2f5e:	81 18 dd    	sl.w      w3, w1, w1
    2f60:	81 80 ea    	com.w     w1, w1
    2f62:	81 00 61    	and.w     w2, w1, w1
    2f64:	01 08 78    	mov.w     w1, [w0]

00002f66 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2f66:	1e 00 78    	mov.w     [w14], w0
    2f68:	60 00 90    	mov.w     [w0+12], w0
    2f6a:	9e 00 78    	mov.w     [w14], w1
    2f6c:	e1 00 90    	mov.w     [w1+12], w1
    2f6e:	11 01 78    	mov.w     [w1], w2
    2f70:	9e 00 78    	mov.w     [w14], w1
    2f72:	e1 48 90    	mov.b     [w1+14], w1
    2f74:	81 80 fb    	ze        w1, w1
    2f76:	13 00 20    	mov.w     #0x1, w3
    2f78:	81 18 dd    	sl.w      w3, w1, w1
    2f7a:	82 80 70    	ior.w     w1, w2, w1
    2f7c:	01 08 78    	mov.w     w1, [w0]

00002f7e <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2f7e:	0e b8 97    	mov.w     [w14-16], w0
    2f80:	00 00 e0    	cp0.w     w0
    2f82:	04 00 3a    	bra       NZ, 0x2f8c <.L71>

00002f84 <.LSM202>:
        self->getc = __getc_nobuffer;
    2f84:	1e 00 78    	mov.w     [w14], w0
    2f86:	e1 61 22    	mov.w     #0x261e, w1
    2f88:	51 18 98    	mov.w     w1, [w0+58]
    2f8a:	2b 00 37    	bra       0x2fe2 <.L72>

00002f8c <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2f8c:	1e 00 78    	mov.w     [w14], w0
    2f8e:	8e b8 97    	mov.w     [w14-16], w1
    2f90:	61 10 98    	mov.w     w1, [w0+44]

00002f92 <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    2f92:	1e 00 78    	mov.w     [w14], w0
    2f94:	fe b0 97    	mov.w     [w14-18], w1
    2f96:	71 10 98    	mov.w     w1, [w0+46]

00002f98 <.LSM205>:
        self->RXbuffer.head = 0;
    2f98:	1e 00 78    	mov.w     [w14], w0
    2f9a:	80 00 eb    	clr.w     w1
    2f9c:	01 18 98    	mov.w     w1, [w0+48]

00002f9e <.LSM206>:
        self->RXbuffer.tail = 0;
    2f9e:	1e 00 78    	mov.w     [w14], w0
    2fa0:	80 00 eb    	clr.w     w1
    2fa2:	11 18 98    	mov.w     w1, [w0+50]

00002fa4 <.LSM207>:
        self->RXbuffer.count = 0;
    2fa4:	1e 00 78    	mov.w     [w14], w0
    2fa6:	80 00 eb    	clr.w     w1
    2fa8:	21 18 98    	mov.w     w1, [w0+52]

00002faa <.LSM208>:
        self->getc = __getc_buffer;
    2faa:	1e 00 78    	mov.w     [w14], w0
    2fac:	c1 72 22    	mov.w     #0x272c, w1
    2fae:	51 18 98    	mov.w     w1, [w0+58]

00002fb0 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2fb0:	1e 00 78    	mov.w     [w14], w0
    2fb2:	50 00 90    	mov.w     [w0+10], w0
    2fb4:	9e 00 78    	mov.w     [w14], w1
    2fb6:	d1 00 90    	mov.w     [w1+10], w1
    2fb8:	11 01 78    	mov.w     [w1], w2
    2fba:	9e 00 78    	mov.w     [w14], w1
    2fbc:	f1 48 90    	mov.b     [w1+15], w1
    2fbe:	81 80 fb    	ze        w1, w1
    2fc0:	13 00 20    	mov.w     #0x1, w3
    2fc2:	81 18 dd    	sl.w      w3, w1, w1
    2fc4:	81 80 ea    	com.w     w1, w1
    2fc6:	81 00 61    	and.w     w2, w1, w1
    2fc8:	01 08 78    	mov.w     w1, [w0]

00002fca <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2fca:	1e 00 78    	mov.w     [w14], w0
    2fcc:	60 00 90    	mov.w     [w0+12], w0
    2fce:	9e 00 78    	mov.w     [w14], w1
    2fd0:	e1 00 90    	mov.w     [w1+12], w1
    2fd2:	11 01 78    	mov.w     [w1], w2
    2fd4:	9e 00 78    	mov.w     [w14], w1
    2fd6:	f1 48 90    	mov.b     [w1+15], w1
    2fd8:	81 80 fb    	ze        w1, w1
    2fda:	13 00 20    	mov.w     #0x1, w3
    2fdc:	81 18 dd    	sl.w      w3, w1, w1
    2fde:	82 80 70    	ior.w     w1, w2, w1
    2fe0:	01 08 78    	mov.w     w1, [w0]

00002fe2 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2fe2:	1e 00 78    	mov.w     [w14], w0
    2fe4:	10 00 78    	mov.w     [w0], w0
    2fe6:	9e 00 78    	mov.w     [w14], w1
    2fe8:	91 00 78    	mov.w     [w1], w1
    2fea:	11 01 78    	mov.w     [w1], w2
    2fec:	01 00 28    	mov.w     #0x8000, w1
    2fee:	82 80 70    	ior.w     w1, w2, w1
    2ff0:	01 08 78    	mov.w     w1, [w0]

00002ff2 <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2ff2:	1e 00 78    	mov.w     [w14], w0
    2ff4:	10 00 90    	mov.w     [w0+2], w0
    2ff6:	9e 00 78    	mov.w     [w14], w1
    2ff8:	91 00 90    	mov.w     [w1+2], w1
    2ffa:	11 01 78    	mov.w     [w1], w2
    2ffc:	01 40 20    	mov.w     #0x400, w1
    2ffe:	82 80 70    	ior.w     w1, w2, w1
    3000:	01 08 78    	mov.w     w1, [w0]
    3002:	17 00 37    	bra       0x3032 <.L40>

00003004 <.L73>:
    3004:	00 00 00    	nop       
    3006:	15 00 37    	bra       0x3032 <.L40>

00003008 <.L74>:
    3008:	00 00 00    	nop       
    300a:	13 00 37    	bra       0x3032 <.L40>

0000300c <.L75>:
    300c:	00 00 00    	nop       
    300e:	11 00 37    	bra       0x3032 <.L40>

00003010 <.L76>:
    3010:	00 00 00    	nop       
    3012:	0f 00 37    	bra       0x3032 <.L40>

00003014 <.L77>:
    3014:	00 00 00    	nop       
    3016:	0d 00 37    	bra       0x3032 <.L40>

00003018 <.L78>:
    3018:	00 00 00    	nop       
    301a:	0b 00 37    	bra       0x3032 <.L40>

0000301c <.L79>:
    301c:	00 00 00    	nop       
    301e:	09 00 37    	bra       0x3032 <.L40>

00003020 <.L80>:
    3020:	00 00 00    	nop       
    3022:	07 00 37    	bra       0x3032 <.L40>

00003024 <.L81>:
    3024:	00 00 00    	nop       
    3026:	05 00 37    	bra       0x3032 <.L40>

00003028 <.L82>:
    3028:	00 00 00    	nop       
    302a:	03 00 37    	bra       0x3032 <.L40>

0000302c <.L83>:
    302c:	00 00 00    	nop       
    302e:	01 00 37    	bra       0x3032 <.L40>

00003030 <.L84>:
    3030:	00 00 00    	nop       

00003032 <.L40>:
}
    3032:	4f 04 78    	mov.w     [--w15], w8
    3034:	00 80 fa    	ulnk      
    3036:	00 00 06    	return    

00003038 <_uart_close>:

void uart_close(_UART *self) {
    3038:	02 00 fa    	lnk       #0x2
    303a:	00 0f 78    	mov.w     w0, [w14]

0000303c <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    303c:	1e 00 78    	mov.w     [w14], w0
    303e:	10 00 90    	mov.w     [w0+2], w0
    3040:	9e 00 78    	mov.w     [w14], w1
    3042:	91 00 90    	mov.w     [w1+2], w1
    3044:	11 01 78    	mov.w     [w1], w2
    3046:	f1 bf 2f    	mov.w     #0xfbff, w1
    3048:	81 00 61    	and.w     w2, w1, w1
    304a:	01 08 78    	mov.w     w1, [w0]

0000304c <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    304c:	1e 00 78    	mov.w     [w14], w0
    304e:	10 00 78    	mov.w     [w0], w0
    3050:	80 00 eb    	clr.w     w1
    3052:	01 08 78    	mov.w     w1, [w0]

00003054 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    3054:	1e 00 78    	mov.w     [w14], w0
    3056:	60 00 90    	mov.w     [w0+12], w0
    3058:	9e 00 78    	mov.w     [w14], w1
    305a:	e1 00 90    	mov.w     [w1+12], w1
    305c:	11 01 78    	mov.w     [w1], w2
    305e:	9e 00 78    	mov.w     [w14], w1
    3060:	e1 48 90    	mov.b     [w1+14], w1
    3062:	81 80 fb    	ze        w1, w1
    3064:	13 00 20    	mov.w     #0x1, w3
    3066:	81 18 dd    	sl.w      w3, w1, w1
    3068:	81 80 ea    	com.w     w1, w1
    306a:	81 00 61    	and.w     w2, w1, w1
    306c:	01 08 78    	mov.w     w1, [w0]

0000306e <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    306e:	1e 00 78    	mov.w     [w14], w0
    3070:	60 00 90    	mov.w     [w0+12], w0
    3072:	9e 00 78    	mov.w     [w14], w1
    3074:	e1 00 90    	mov.w     [w1+12], w1
    3076:	11 01 78    	mov.w     [w1], w2
    3078:	9e 00 78    	mov.w     [w14], w1
    307a:	f1 48 90    	mov.b     [w1+15], w1
    307c:	81 80 fb    	ze        w1, w1
    307e:	13 00 20    	mov.w     #0x1, w3
    3080:	81 18 dd    	sl.w      w3, w1, w1
    3082:	81 80 ea    	com.w     w1, w1
    3084:	81 00 61    	and.w     w2, w1, w1
    3086:	01 08 78    	mov.w     w1, [w0]

00003088 <.LSM226>:
    self->putc = NULL;
    3088:	1e 00 78    	mov.w     [w14], w0
    308a:	80 00 eb    	clr.w     w1
    308c:	41 18 98    	mov.w     w1, [w0+56]

0000308e <.LSM227>:
    self->getc = NULL;
    308e:	1e 00 78    	mov.w     [w14], w0
    3090:	80 00 eb    	clr.w     w1
    3092:	51 18 98    	mov.w     w1, [w0+58]

00003094 <.LSM228>:
    if (self->TX) {
    3094:	1e 00 78    	mov.w     [w14], w0
    3096:	50 08 90    	mov.w     [w0+26], w0
    3098:	00 00 e0    	cp0.w     w0
    309a:	2f 00 32    	bra       Z, 0x30fa <.L86>

0000309c <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    309c:	11 3a 80    	mov.w     0x742, w1
    309e:	f0 0b 20    	mov.w     #0xbf, w0
    30a0:	00 81 60    	and.w     w1, w0, w2
    30a2:	60 04 20    	mov.w     #0x46, w0
    30a4:	71 05 20    	mov.w     #0x57, w1
    30a6:	23 74 20    	mov.w     #0x742, w3
    30a8:	80 49 78    	mov.b     w0, [w3]
    30aa:	81 49 78    	mov.b     w1, [w3]
    30ac:	82 49 78    	mov.b     w2, [w3]

000030ae <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    30ae:	1e 00 78    	mov.w     [w14], w0
    30b0:	50 08 90    	mov.w     [w0+26], w0
    30b2:	70 00 90    	mov.w     [w0+14], w0
    30b4:	9e 00 78    	mov.w     [w14], w1
    30b6:	d1 08 90    	mov.w     [w1+26], w1
    30b8:	f1 00 90    	mov.w     [w1+14], w1
    30ba:	11 01 78    	mov.w     [w1], w2
    30bc:	9e 00 78    	mov.w     [w14], w1
    30be:	d1 08 90    	mov.w     [w1+26], w1
    30c0:	a1 48 90    	mov.b     [w1+10], w1
    30c2:	81 80 fb    	ze        w1, w1
    30c4:	f3 03 20    	mov.w     #0x3f, w3
    30c6:	81 18 dd    	sl.w      w3, w1, w1
    30c8:	81 80 ea    	com.w     w1, w1
    30ca:	81 00 61    	and.w     w2, w1, w1
    30cc:	01 08 78    	mov.w     w1, [w0]

000030ce <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    30ce:	11 3a 80    	mov.w     0x742, w1
    30d0:	00 04 20    	mov.w     #0x40, w0
    30d2:	01 01 70    	ior.w     w0, w1, w2
    30d4:	60 04 20    	mov.w     #0x46, w0
    30d6:	71 05 20    	mov.w     #0x57, w1
    30d8:	23 74 20    	mov.w     #0x742, w3
    30da:	80 49 78    	mov.b     w0, [w3]
    30dc:	81 49 78    	mov.b     w1, [w3]
    30de:	82 49 78    	mov.b     w2, [w3]

000030e0 <.LSM232>:
        self->TX->owner = NULL;
    30e0:	1e 00 78    	mov.w     [w14], w0
    30e2:	50 08 90    	mov.w     [w0+26], w0
    30e4:	80 00 eb    	clr.w     w1
    30e6:	01 08 98    	mov.w     w1, [w0+16]

000030e8 <.LSM233>:
        pin_digitalOut(self->TX);
    30e8:	1e 00 78    	mov.w     [w14], w0
    30ea:	50 08 90    	mov.w     [w0+26], w0
    30ec:	95 05 07    	rcall     0x3c18 <_pin_digitalOut>

000030ee <.LSM234>:
        pin_set(self->TX);
    30ee:	1e 00 78    	mov.w     [w14], w0
    30f0:	50 08 90    	mov.w     [w0+26], w0
    30f2:	ef 05 07    	rcall     0x3cd2 <_pin_set>

000030f4 <.LSM235>:
        self->TX = NULL;
    30f4:	1e 00 78    	mov.w     [w14], w0
    30f6:	80 00 eb    	clr.w     w1
    30f8:	51 08 98    	mov.w     w1, [w0+26]

000030fa <.L86>:
    }
    if (self->RX) {
    30fa:	1e 00 78    	mov.w     [w14], w0
    30fc:	60 08 90    	mov.w     [w0+28], w0
    30fe:	00 00 e0    	cp0.w     w0
    3100:	28 00 32    	bra       Z, 0x3152 <.L87>

00003102 <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3102:	11 3a 80    	mov.w     0x742, w1
    3104:	f0 0b 20    	mov.w     #0xbf, w0
    3106:	00 81 60    	and.w     w1, w0, w2
    3108:	60 04 20    	mov.w     #0x46, w0
    310a:	71 05 20    	mov.w     #0x57, w1
    310c:	23 74 20    	mov.w     #0x742, w3
    310e:	80 49 78    	mov.b     w0, [w3]
    3110:	81 49 78    	mov.b     w1, [w3]
    3112:	82 49 78    	mov.b     w2, [w3]

00003114 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    3114:	1e 00 78    	mov.w     [w14], w0
    3116:	00 08 90    	mov.w     [w0+16], w0
    3118:	9e 00 78    	mov.w     [w14], w1
    311a:	81 08 90    	mov.w     [w1+16], w1
    311c:	11 01 78    	mov.w     [w1], w2
    311e:	9e 00 78    	mov.w     [w14], w1
    3120:	c1 50 90    	mov.b     [w1+20], w1
    3122:	81 80 fb    	ze        w1, w1
    3124:	f3 03 20    	mov.w     #0x3f, w3
    3126:	81 18 dd    	sl.w      w3, w1, w1
    3128:	82 80 70    	ior.w     w1, w2, w1
    312a:	01 08 78    	mov.w     w1, [w0]

0000312c <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    312c:	11 3a 80    	mov.w     0x742, w1
    312e:	00 04 20    	mov.w     #0x40, w0
    3130:	01 01 70    	ior.w     w0, w1, w2
    3132:	60 04 20    	mov.w     #0x46, w0
    3134:	71 05 20    	mov.w     #0x57, w1
    3136:	23 74 20    	mov.w     #0x742, w3
    3138:	80 49 78    	mov.b     w0, [w3]
    313a:	81 49 78    	mov.b     w1, [w3]
    313c:	82 49 78    	mov.b     w2, [w3]

0000313e <.LSM240>:
        self->RX->owner = NULL;
    313e:	1e 00 78    	mov.w     [w14], w0
    3140:	60 08 90    	mov.w     [w0+28], w0
    3142:	80 00 eb    	clr.w     w1
    3144:	01 08 98    	mov.w     w1, [w0+16]

00003146 <.LSM241>:
        pin_digitalIn(self->RX);
    3146:	1e 00 78    	mov.w     [w14], w0
    3148:	60 08 90    	mov.w     [w0+28], w0
    314a:	3f 05 07    	rcall     0x3bca <_pin_digitalIn>

0000314c <.LSM242>:
        self->RX = NULL;
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	80 00 eb    	clr.w     w1
    3150:	61 08 98    	mov.w     w1, [w0+28]

00003152 <.L87>:
    }
    if (self->RTS) {
    3152:	1e 00 78    	mov.w     [w14], w0
    3154:	70 08 90    	mov.w     [w0+30], w0
    3156:	00 00 e0    	cp0.w     w0
    3158:	2f 00 32    	bra       Z, 0x31b8 <.L88>

0000315a <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    315a:	11 3a 80    	mov.w     0x742, w1
    315c:	f0 0b 20    	mov.w     #0xbf, w0
    315e:	00 81 60    	and.w     w1, w0, w2
    3160:	60 04 20    	mov.w     #0x46, w0
    3162:	71 05 20    	mov.w     #0x57, w1
    3164:	23 74 20    	mov.w     #0x742, w3
    3166:	80 49 78    	mov.b     w0, [w3]
    3168:	81 49 78    	mov.b     w1, [w3]
    316a:	82 49 78    	mov.b     w2, [w3]

0000316c <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    316c:	1e 00 78    	mov.w     [w14], w0
    316e:	70 08 90    	mov.w     [w0+30], w0
    3170:	70 00 90    	mov.w     [w0+14], w0
    3172:	9e 00 78    	mov.w     [w14], w1
    3174:	f1 08 90    	mov.w     [w1+30], w1
    3176:	f1 00 90    	mov.w     [w1+14], w1
    3178:	11 01 78    	mov.w     [w1], w2
    317a:	9e 00 78    	mov.w     [w14], w1
    317c:	f1 08 90    	mov.w     [w1+30], w1
    317e:	a1 48 90    	mov.b     [w1+10], w1
    3180:	81 80 fb    	ze        w1, w1
    3182:	f3 03 20    	mov.w     #0x3f, w3
    3184:	81 18 dd    	sl.w      w3, w1, w1
    3186:	81 80 ea    	com.w     w1, w1
    3188:	81 00 61    	and.w     w2, w1, w1
    318a:	01 08 78    	mov.w     w1, [w0]

0000318c <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    318c:	11 3a 80    	mov.w     0x742, w1
    318e:	00 04 20    	mov.w     #0x40, w0
    3190:	01 01 70    	ior.w     w0, w1, w2
    3192:	60 04 20    	mov.w     #0x46, w0
    3194:	71 05 20    	mov.w     #0x57, w1
    3196:	23 74 20    	mov.w     #0x742, w3
    3198:	80 49 78    	mov.b     w0, [w3]
    319a:	81 49 78    	mov.b     w1, [w3]
    319c:	82 49 78    	mov.b     w2, [w3]

0000319e <.LSM247>:
        self->RTS->owner = NULL;
    319e:	1e 00 78    	mov.w     [w14], w0
    31a0:	70 08 90    	mov.w     [w0+30], w0
    31a2:	80 00 eb    	clr.w     w1
    31a4:	01 08 98    	mov.w     w1, [w0+16]

000031a6 <.LSM248>:
        pin_digitalOut(self->RTS);
    31a6:	1e 00 78    	mov.w     [w14], w0
    31a8:	70 08 90    	mov.w     [w0+30], w0
    31aa:	36 05 07    	rcall     0x3c18 <_pin_digitalOut>

000031ac <.LSM249>:
        pin_set(self->RTS);
    31ac:	1e 00 78    	mov.w     [w14], w0
    31ae:	70 08 90    	mov.w     [w0+30], w0
    31b0:	90 05 07    	rcall     0x3cd2 <_pin_set>

000031b2 <.LSM250>:
        self->RTS = NULL;
    31b2:	1e 00 78    	mov.w     [w14], w0
    31b4:	80 00 eb    	clr.w     w1
    31b6:	71 08 98    	mov.w     w1, [w0+30]

000031b8 <.L88>:
    }
    if (self->CTS) {
    31b8:	1e 00 78    	mov.w     [w14], w0
    31ba:	00 10 90    	mov.w     [w0+32], w0
    31bc:	00 00 e0    	cp0.w     w0
    31be:	28 00 32    	bra       Z, 0x3210 <.L85>

000031c0 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    31c0:	11 3a 80    	mov.w     0x742, w1
    31c2:	f0 0b 20    	mov.w     #0xbf, w0
    31c4:	00 81 60    	and.w     w1, w0, w2
    31c6:	60 04 20    	mov.w     #0x46, w0
    31c8:	71 05 20    	mov.w     #0x57, w1
    31ca:	23 74 20    	mov.w     #0x742, w3
    31cc:	80 49 78    	mov.b     w0, [w3]
    31ce:	81 49 78    	mov.b     w1, [w3]
    31d0:	82 49 78    	mov.b     w2, [w3]

000031d2 <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    31d2:	1e 00 78    	mov.w     [w14], w0
    31d4:	10 08 90    	mov.w     [w0+18], w0
    31d6:	9e 00 78    	mov.w     [w14], w1
    31d8:	91 08 90    	mov.w     [w1+18], w1
    31da:	11 01 78    	mov.w     [w1], w2
    31dc:	9e 00 78    	mov.w     [w14], w1
    31de:	d1 50 90    	mov.b     [w1+21], w1
    31e0:	81 80 fb    	ze        w1, w1
    31e2:	f3 03 20    	mov.w     #0x3f, w3
    31e4:	81 18 dd    	sl.w      w3, w1, w1
    31e6:	82 80 70    	ior.w     w1, w2, w1
    31e8:	01 08 78    	mov.w     w1, [w0]

000031ea <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    31ea:	11 3a 80    	mov.w     0x742, w1
    31ec:	00 04 20    	mov.w     #0x40, w0
    31ee:	01 01 70    	ior.w     w0, w1, w2
    31f0:	60 04 20    	mov.w     #0x46, w0
    31f2:	71 05 20    	mov.w     #0x57, w1
    31f4:	23 74 20    	mov.w     #0x742, w3
    31f6:	80 49 78    	mov.b     w0, [w3]
    31f8:	81 49 78    	mov.b     w1, [w3]
    31fa:	82 49 78    	mov.b     w2, [w3]

000031fc <.LSM255>:
        self->CTS->owner = NULL;
    31fc:	1e 00 78    	mov.w     [w14], w0
    31fe:	00 10 90    	mov.w     [w0+32], w0
    3200:	80 00 eb    	clr.w     w1
    3202:	01 08 98    	mov.w     w1, [w0+16]

00003204 <.LSM256>:
        pin_digitalIn(self->CTS);
    3204:	1e 00 78    	mov.w     [w14], w0
    3206:	00 10 90    	mov.w     [w0+32], w0
    3208:	e0 04 07    	rcall     0x3bca <_pin_digitalIn>

0000320a <.LSM257>:
        self->CTS = NULL;
    320a:	1e 00 78    	mov.w     [w14], w0
    320c:	80 00 eb    	clr.w     w1
    320e:	01 10 98    	mov.w     w1, [w0+32]

00003210 <.L85>:
    }
}
    3210:	00 80 fa    	ulnk      
    3212:	00 00 06    	return    

00003214 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    3214:	04 00 fa    	lnk       #0x4
    3216:	00 0f 78    	mov.w     w0, [w14]
    3218:	21 47 98    	mov.b     w1, [w14+2]

0000321a <.LSM260>:
    if (self->putc)
    321a:	1e 00 78    	mov.w     [w14], w0
    321c:	40 18 90    	mov.w     [w0+56], w0
    321e:	00 00 e0    	cp0.w     w0
    3220:	05 00 32    	bra       Z, 0x322c <.L90>

00003222 <.LSM261>:
        self->putc(self, ch);
    3222:	1e 00 78    	mov.w     [w14], w0
    3224:	40 19 90    	mov.w     [w0+56], w2
    3226:	ae 40 90    	mov.b     [w14+2], w1
    3228:	1e 00 78    	mov.w     [w14], w0
    322a:	02 00 01    	call      w2

0000322c <.L90>:
}
    322c:	00 80 fa    	ulnk      
    322e:	00 00 06    	return    

00003230 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    3230:	02 00 fa    	lnk       #0x2
    3232:	00 0f 78    	mov.w     w0, [w14]

00003234 <.LSM264>:
    if (self->getc)
    3234:	1e 00 78    	mov.w     [w14], w0
    3236:	50 18 90    	mov.w     [w0+58], w0
    3238:	00 00 e0    	cp0.w     w0
    323a:	05 00 32    	bra       Z, 0x3246 <.L93>

0000323c <.LSM265>:
        return self->getc(self);
    323c:	1e 00 78    	mov.w     [w14], w0
    323e:	d0 18 90    	mov.w     [w0+58], w1
    3240:	1e 00 78    	mov.w     [w14], w0
    3242:	01 00 01    	call      w1
    3244:	01 00 37    	bra       0x3248 <.L94>

00003246 <.L93>:
    else
        return 0xFF;
    3246:	00 c0 eb    	setm.b    w0

00003248 <.L94>:
}
    3248:	00 80 fa    	ulnk      
    324a:	00 00 06    	return    

0000324c <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    324c:	02 00 fa    	lnk       #0x2
    324e:	00 0f 78    	mov.w     w0, [w14]

00003250 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    3250:	1e 00 78    	mov.w     [w14], w0
    3252:	10 00 90    	mov.w     [w0+2], w0
    3254:	90 00 78    	mov.w     [w0], w1
    3256:	00 40 20    	mov.w     #0x400, w0
    3258:	00 80 60    	and.w     w1, w0, w0
    325a:	00 00 e0    	cp0.w     w0
    325c:	08 00 3a    	bra       NZ, 0x326e <.L95>

0000325e <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    325e:	1e 00 78    	mov.w     [w14], w0
    3260:	10 00 90    	mov.w     [w0+2], w0
    3262:	9e 00 78    	mov.w     [w14], w1
    3264:	91 00 90    	mov.w     [w1+2], w1
    3266:	11 01 78    	mov.w     [w1], w2
    3268:	01 40 20    	mov.w     #0x400, w1
    326a:	82 80 70    	ior.w     w1, w2, w1
    326c:	01 08 78    	mov.w     w1, [w0]

0000326e <.L95>:
}
    326e:	00 80 fa    	ulnk      
    3270:	00 00 06    	return    

00003272 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    3272:	04 00 fa    	lnk       #0x4
    3274:	00 0f 78    	mov.w     w0, [w14]
    3276:	11 07 98    	mov.w     w1, [w14+2]

00003278 <.LSM273>:
    while (*str)
    3278:	08 00 37    	bra       0x328a <.L98>

0000327a <.L99>:
        uart_putc(self, *str++);
    327a:	1e 00 90    	mov.w     [w14+2], w0
    327c:	10 40 78    	mov.b     [w0], w0
    327e:	9e 00 90    	mov.w     [w14+2], w1
    3280:	81 00 e8    	inc.w     w1, w1
    3282:	11 07 98    	mov.w     w1, [w14+2]
    3284:	80 40 78    	mov.b     w0, w1
    3286:	1e 00 78    	mov.w     [w14], w0
    3288:	c5 ff 07    	rcall     0x3214 <_uart_putc>

0000328a <.L98>:
    328a:	1e 00 90    	mov.w     [w14+2], w0
    328c:	10 40 78    	mov.b     [w0], w0
    328e:	00 04 e0    	cp0.b     w0
    3290:	f4 ff 3a    	bra       NZ, 0x327a <.L99>

00003292 <.LSM276>:
    uart_flushTxBuffer(self);
    3292:	1e 00 78    	mov.w     [w14], w0
    3294:	db ff 07    	rcall     0x324c <_uart_flushTxBuffer>

00003296 <.LSM277>:
}
    3296:	00 80 fa    	ulnk      
    3298:	00 00 06    	return    

0000329a <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    329a:	0a 00 fa    	lnk       #0xa
    329c:	20 07 98    	mov.w     w0, [w14+4]
    329e:	31 07 98    	mov.w     w1, [w14+6]
    32a0:	42 07 98    	mov.w     w2, [w14+8]

000032a2 <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    32a2:	4e 00 90    	mov.w     [w14+8], w0
    32a4:	00 00 e0    	cp0.w     w0
    32a6:	87 00 32    	bra       Z, 0x33b6 <.L113>

000032a8 <.LSM280>:
        return;

    if (len==1) {
    32a8:	4e 00 90    	mov.w     [w14+8], w0
    32aa:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32ac:	04 00 3a    	bra       NZ, 0x32b6 <.L103>

000032ae <.LSM281>:
        *str = '\0';
    32ae:	3e 00 90    	mov.w     [w14+6], w0
    32b0:	80 40 eb    	clr.b     w1
    32b2:	01 48 78    	mov.b     w1, [w0]

000032b4 <.LSM282>:
        return;
    32b4:	81 00 37    	bra       0x33b8 <.L100>

000032b6 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    32b6:	b1 c1 b3    	mov.b     #0x1b, w1
    32b8:	2e 00 90    	mov.w     [w14+4], w0
    32ba:	ac ff 07    	rcall     0x3214 <_uart_putc>

000032bc <.LSM284>:
    uart_putc(self, '7');
    32bc:	71 c3 b3    	mov.b     #0x37, w1
    32be:	2e 00 90    	mov.w     [w14+4], w0
    32c0:	a9 ff 07    	rcall     0x3214 <_uart_putc>

000032c2 <.LSM285>:
    uart_flushTxBuffer(self);
    32c2:	2e 00 90    	mov.w     [w14+4], w0
    32c4:	c3 ff 07    	rcall     0x324c <_uart_flushTxBuffer>

000032c6 <.LSM286>:
    start = str;
    32c6:	be 00 90    	mov.w     [w14+6], w1
    32c8:	11 07 98    	mov.w     w1, [w14+2]

000032ca <.LSM287>:
    left = len;
    32ca:	ce 00 90    	mov.w     [w14+8], w1
    32cc:	01 0f 78    	mov.w     w1, [w14]
    32ce:	03 00 37    	bra       0x32d6 <.L112>

000032d0 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    32d0:	00 00 00    	nop       
    32d2:	01 00 37    	bra       0x32d6 <.L112>

000032d4 <.L115>:
    32d4:	00 00 00    	nop       

000032d6 <.L112>:
    32d6:	2e 00 90    	mov.w     [w14+4], w0
    32d8:	ab ff 07    	rcall     0x3230 <_uart_getc>
    32da:	be 00 90    	mov.w     [w14+6], w1
    32dc:	80 48 78    	mov.b     w0, [w1]

000032de <.LSM290>:
    32de:	3e 00 90    	mov.w     [w14+6], w0
    32e0:	10 40 78    	mov.b     [w0], w0
    32e2:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    32e4:	0c 00 3a    	bra       NZ, 0x32fe <.L104>

000032e6 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    32e6:	3e 00 90    	mov.w     [w14+6], w0
    32e8:	80 40 eb    	clr.b     w1
    32ea:	01 48 78    	mov.b     w1, [w0]

000032ec <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    32ec:	a1 c0 b3    	mov.b     #0xa, w1
    32ee:	2e 00 90    	mov.w     [w14+4], w0
    32f0:	91 ff 07    	rcall     0x3214 <_uart_putc>

000032f2 <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    32f2:	d1 c0 b3    	mov.b     #0xd, w1
    32f4:	2e 00 90    	mov.w     [w14+4], w0
    32f6:	8e ff 07    	rcall     0x3214 <_uart_putc>

000032f8 <.LSM294>:
    uart_flushTxBuffer(self);
    32f8:	2e 00 90    	mov.w     [w14+4], w0
    32fa:	a8 ff 07    	rcall     0x324c <_uart_flushTxBuffer>
    32fc:	5d 00 37    	bra       0x33b8 <.L100>

000032fe <.L104>:
    32fe:	3e 00 90    	mov.w     [w14+6], w0
    3300:	10 40 78    	mov.b     [w0], w0
    3302:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    3304:	16 00 3a    	bra       NZ, 0x3332 <.L105>

00003306 <.LSM296>:
    3306:	b1 c1 b3    	mov.b     #0x1b, w1
    3308:	2e 00 90    	mov.w     [w14+4], w0
    330a:	84 ff 07    	rcall     0x3214 <_uart_putc>

0000330c <.LSM297>:
    330c:	81 c3 b3    	mov.b     #0x38, w1
    330e:	2e 00 90    	mov.w     [w14+4], w0
    3310:	81 ff 07    	rcall     0x3214 <_uart_putc>

00003312 <.LSM298>:
    3312:	b1 c1 b3    	mov.b     #0x1b, w1
    3314:	2e 00 90    	mov.w     [w14+4], w0
    3316:	7e ff 07    	rcall     0x3214 <_uart_putc>

00003318 <.LSM299>:
    3318:	b1 c5 b3    	mov.b     #0x5b, w1
    331a:	2e 00 90    	mov.w     [w14+4], w0
    331c:	7b ff 07    	rcall     0x3214 <_uart_putc>

0000331e <.LSM300>:
    331e:	b1 c4 b3    	mov.b     #0x4b, w1
    3320:	2e 00 90    	mov.w     [w14+4], w0
    3322:	78 ff 07    	rcall     0x3214 <_uart_putc>

00003324 <.LSM301>:
    3324:	2e 00 90    	mov.w     [w14+4], w0
    3326:	92 ff 07    	rcall     0x324c <_uart_flushTxBuffer>

00003328 <.LSM302>:
    3328:	9e 00 90    	mov.w     [w14+2], w1
    332a:	31 07 98    	mov.w     w1, [w14+6]

0000332c <.LSM303>:
    332c:	ce 00 90    	mov.w     [w14+8], w1
    332e:	01 0f 78    	mov.w     w1, [w14]

00003330 <.LSM304>:
    3330:	41 00 37    	bra       0x33b4 <.L106>

00003332 <.L105>:
    3332:	3e 00 90    	mov.w     [w14+6], w0
    3334:	10 40 78    	mov.b     [w0], w0
    3336:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    3338:	05 00 32    	bra       Z, 0x3344 <.L107>

0000333a <.LSM306>:
    333a:	3e 00 90    	mov.w     [w14+6], w0
    333c:	90 40 78    	mov.b     [w0], w1

0000333e <.LSM307>:
    333e:	f0 c7 b3    	mov.b     #0x7f, w0
    3340:	80 cf 50    	sub.b     w1, w0, [w15]
    3342:	1a 00 3a    	bra       NZ, 0x3378 <.L108>

00003344 <.L107>:
    3344:	be 00 90    	mov.w     [w14+6], w1
    3346:	1e 00 90    	mov.w     [w14+2], w0
    3348:	80 8f 50    	sub.w     w1, w0, [w15]
    334a:	10 00 36    	bra       LEU, 0x336c <.L109>

0000334c <.LSM309>:
    334c:	81 c0 b3    	mov.b     #0x8, w1
    334e:	2e 00 90    	mov.w     [w14+4], w0
    3350:	61 ff 07    	rcall     0x3214 <_uart_putc>

00003352 <.LSM310>:
    3352:	01 c2 b3    	mov.b     #0x20, w1
    3354:	2e 00 90    	mov.w     [w14+4], w0
    3356:	5e ff 07    	rcall     0x3214 <_uart_putc>

00003358 <.LSM311>:
    3358:	81 c0 b3    	mov.b     #0x8, w1
    335a:	2e 00 90    	mov.w     [w14+4], w0
    335c:	5b ff 07    	rcall     0x3214 <_uart_putc>

0000335e <.LSM312>:
    335e:	2e 00 90    	mov.w     [w14+4], w0
    3360:	75 ff 07    	rcall     0x324c <_uart_flushTxBuffer>

00003362 <.LSM313>:
    3362:	3e 00 90    	mov.w     [w14+6], w0
    3364:	00 00 e9    	dec.w     w0, w0
    3366:	30 07 98    	mov.w     w0, [w14+6]

00003368 <.LSM314>:
    3368:	1e 0f e8    	inc.w     [w14], [w14]
    336a:	05 00 37    	bra       0x3376 <.L110>

0000336c <.L109>:
    336c:	71 c0 b3    	mov.b     #0x7, w1
    336e:	2e 00 90    	mov.w     [w14+4], w0
    3370:	51 ff 07    	rcall     0x3214 <_uart_putc>

00003372 <.LSM316>:
    3372:	2e 00 90    	mov.w     [w14+4], w0
    3374:	6b ff 07    	rcall     0x324c <_uart_flushTxBuffer>

00003376 <.L110>:
    3376:	1e 00 37    	bra       0x33b4 <.L106>

00003378 <.L108>:
    3378:	1e 00 78    	mov.w     [w14], w0
    337a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    337c:	06 00 3a    	bra       NZ, 0x338a <.L111>

0000337e <.LSM319>:
    337e:	71 c0 b3    	mov.b     #0x7, w1
    3380:	2e 00 90    	mov.w     [w14+4], w0
    3382:	48 ff 07    	rcall     0x3214 <_uart_putc>

00003384 <.LSM320>:
    3384:	2e 00 90    	mov.w     [w14+4], w0
    3386:	62 ff 07    	rcall     0x324c <_uart_flushTxBuffer>

00003388 <.LSM321>:
    3388:	15 00 37    	bra       0x33b4 <.L106>

0000338a <.L111>:
    338a:	3e 00 90    	mov.w     [w14+6], w0
    338c:	10 40 78    	mov.b     [w0], w0
    338e:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    3390:	9f ff 36    	bra       LEU, 0x32d0 <.L114>
    3392:	3e 00 90    	mov.w     [w14+6], w0
    3394:	90 40 78    	mov.b     [w0], w1
    3396:	e0 c7 b3    	mov.b     #0x7e, w0
    3398:	80 cf 50    	sub.b     w1, w0, [w15]
    339a:	9c ff 3e    	bra       GTU, 0x32d4 <.L115>

0000339c <.LSM323>:
    339c:	3e 00 90    	mov.w     [w14+6], w0
    339e:	10 40 78    	mov.b     [w0], w0
    33a0:	80 40 78    	mov.b     w0, w1
    33a2:	2e 00 90    	mov.w     [w14+4], w0
    33a4:	37 ff 07    	rcall     0x3214 <_uart_putc>

000033a6 <.LSM324>:
    33a6:	2e 00 90    	mov.w     [w14+4], w0
    33a8:	51 ff 07    	rcall     0x324c <_uart_flushTxBuffer>

000033aa <.LSM325>:
    33aa:	3e 00 90    	mov.w     [w14+6], w0
    33ac:	00 00 e8    	inc.w     w0, w0
    33ae:	30 07 98    	mov.w     w0, [w14+6]

000033b0 <.LSM326>:
    33b0:	1e 0f e9    	dec.w     [w14], [w14]

000033b2 <.LSM327>:
    33b2:	91 ff 37    	bra       0x32d6 <.L112>

000033b4 <.L106>:
    33b4:	90 ff 37    	bra       0x32d6 <.L112>

000033b6 <.L113>:
    33b6:	00 00 00    	nop       

000033b8 <.L100>:
}
    33b8:	00 80 fa    	ulnk      
    33ba:	00 00 06    	return    

000033bc <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    33bc:	02 00 fa    	lnk       #0x2
    33be:	00 0f 78    	mov.w     w0, [w14]

000033c0 <.LSM1>:
    timer_lower(self);
    33c0:	1e 00 78    	mov.w     [w14], w0
    33c2:	01 02 07    	rcall     0x37c6 <_timer_lower>

000033c4 <.LSM2>:
    if (self->every) {
    33c4:	1e 00 78    	mov.w     [w14], w0
    33c6:	10 08 90    	mov.w     [w0+18], w0
    33c8:	00 00 e0    	cp0.w     w0
    33ca:	05 00 32    	bra       Z, 0x33d6 <.L2>

000033cc <.LSM3>:
        self->every(self);
    33cc:	1e 00 78    	mov.w     [w14], w0
    33ce:	90 08 90    	mov.w     [w0+18], w1
    33d0:	1e 00 78    	mov.w     [w14], w0
    33d2:	01 00 01    	call      w1
    33d4:	1a 00 37    	bra       0x340a <.L1>

000033d6 <.L2>:
    } else if (self->after) {
    33d6:	1e 00 78    	mov.w     [w14], w0
    33d8:	20 08 90    	mov.w     [w0+20], w0
    33da:	00 00 e0    	cp0.w     w0
    33dc:	14 00 32    	bra       Z, 0x3406 <.L4>

000033de <.LSM5>:
        if (self->aftercount) {
    33de:	1e 00 78    	mov.w     [w14], w0
    33e0:	00 08 90    	mov.w     [w0+16], w0
    33e2:	00 00 e0    	cp0.w     w0
    33e4:	0a 00 32    	bra       Z, 0x33fa <.L5>

000033e6 <.LSM6>:
            self->after(self);
    33e6:	1e 00 78    	mov.w     [w14], w0
    33e8:	a0 08 90    	mov.w     [w0+20], w1
    33ea:	1e 00 78    	mov.w     [w14], w0
    33ec:	01 00 01    	call      w1

000033ee <.LSM7>:
            self->aftercount--;
    33ee:	1e 00 78    	mov.w     [w14], w0
    33f0:	00 08 90    	mov.w     [w0+16], w0
    33f2:	80 00 e9    	dec.w     w0, w1
    33f4:	1e 00 78    	mov.w     [w14], w0
    33f6:	01 08 98    	mov.w     w1, [w0+16]
    33f8:	08 00 37    	bra       0x340a <.L1>

000033fa <.L5>:
        } else {
            timer_disableInterrupt(self);
    33fa:	1e 00 78    	mov.w     [w14], w0
    33fc:	0c 02 07    	rcall     0x3816 <_timer_disableInterrupt>

000033fe <.LSM9>:
            self->after = NULL;
    33fe:	1e 00 78    	mov.w     [w14], w0
    3400:	80 00 eb    	clr.w     w1
    3402:	21 08 98    	mov.w     w1, [w0+20]
    3404:	02 00 37    	bra       0x340a <.L1>

00003406 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    3406:	1e 00 78    	mov.w     [w14], w0
    3408:	06 02 07    	rcall     0x3816 <_timer_disableInterrupt>

0000340a <.L1>:
    }
}
    340a:	00 80 fa    	ulnk      
    340c:	00 00 06    	return    

0000340e <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    340e:	36 00 f8    	push      0x36
    3410:	80 9f be    	mov.d     w0, [w15++]
    3412:	82 9f be    	mov.d     w2, [w15++]
    3414:	84 9f be    	mov.d     w4, [w15++]
    3416:	86 9f be    	mov.d     w6, [w15++]
    3418:	32 00 f8    	push      0x32
    341a:	34 00 f8    	push      0x34
    341c:	10 00 20    	mov.w     #0x1, w0
    341e:	a0 01 88    	mov.w     w0, 0x34
    3420:	00 20 20    	mov.w     #0x200, w0
    3422:	90 01 88    	mov.w     w0, 0x32
    3424:	00 00 fa    	lnk       #0x0

00003426 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    3426:	00 b6 20    	mov.w     #0xb60, w0
    3428:	c9 ff 07    	rcall     0x33bc <_timer_serviceInterrupt>

0000342a <.LSM14>:
}
    342a:	00 80 fa    	ulnk      
    342c:	34 00 f9    	pop       0x34
    342e:	32 00 f9    	pop       0x32
    3430:	4f 03 be    	mov.d     [--w15], w6
    3432:	4f 02 be    	mov.d     [--w15], w4
    3434:	4f 01 be    	mov.d     [--w15], w2
    3436:	4f 00 be    	mov.d     [--w15], w0
    3438:	36 00 f9    	pop       0x36
    343a:	00 40 06    	retfie    

0000343c <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    343c:	36 00 f8    	push      0x36
    343e:	80 9f be    	mov.d     w0, [w15++]
    3440:	82 9f be    	mov.d     w2, [w15++]
    3442:	84 9f be    	mov.d     w4, [w15++]
    3444:	86 9f be    	mov.d     w6, [w15++]
    3446:	32 00 f8    	push      0x32
    3448:	34 00 f8    	push      0x34
    344a:	10 00 20    	mov.w     #0x1, w0
    344c:	a0 01 88    	mov.w     w0, 0x34
    344e:	00 20 20    	mov.w     #0x200, w0
    3450:	90 01 88    	mov.w     w0, 0x32
    3452:	00 00 fa    	lnk       #0x0

00003454 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    3454:	60 b7 20    	mov.w     #0xb76, w0
    3456:	b2 ff 07    	rcall     0x33bc <_timer_serviceInterrupt>

00003458 <.LSM17>:
}
    3458:	00 80 fa    	ulnk      
    345a:	34 00 f9    	pop       0x34
    345c:	32 00 f9    	pop       0x32
    345e:	4f 03 be    	mov.d     [--w15], w6
    3460:	4f 02 be    	mov.d     [--w15], w4
    3462:	4f 01 be    	mov.d     [--w15], w2
    3464:	4f 00 be    	mov.d     [--w15], w0
    3466:	36 00 f9    	pop       0x36
    3468:	00 40 06    	retfie    

0000346a <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    346a:	36 00 f8    	push      0x36
    346c:	80 9f be    	mov.d     w0, [w15++]
    346e:	82 9f be    	mov.d     w2, [w15++]
    3470:	84 9f be    	mov.d     w4, [w15++]
    3472:	86 9f be    	mov.d     w6, [w15++]
    3474:	32 00 f8    	push      0x32
    3476:	34 00 f8    	push      0x34
    3478:	10 00 20    	mov.w     #0x1, w0
    347a:	a0 01 88    	mov.w     w0, 0x34
    347c:	00 20 20    	mov.w     #0x200, w0
    347e:	90 01 88    	mov.w     w0, 0x32
    3480:	00 00 fa    	lnk       #0x0

00003482 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    3482:	c0 b8 20    	mov.w     #0xb8c, w0
    3484:	9b ff 07    	rcall     0x33bc <_timer_serviceInterrupt>

00003486 <.LSM20>:
}
    3486:	00 80 fa    	ulnk      
    3488:	34 00 f9    	pop       0x34
    348a:	32 00 f9    	pop       0x32
    348c:	4f 03 be    	mov.d     [--w15], w6
    348e:	4f 02 be    	mov.d     [--w15], w4
    3490:	4f 01 be    	mov.d     [--w15], w2
    3492:	4f 00 be    	mov.d     [--w15], w0
    3494:	36 00 f9    	pop       0x36
    3496:	00 40 06    	retfie    

00003498 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    3498:	36 00 f8    	push      0x36
    349a:	80 9f be    	mov.d     w0, [w15++]
    349c:	82 9f be    	mov.d     w2, [w15++]
    349e:	84 9f be    	mov.d     w4, [w15++]
    34a0:	86 9f be    	mov.d     w6, [w15++]
    34a2:	32 00 f8    	push      0x32
    34a4:	34 00 f8    	push      0x34
    34a6:	10 00 20    	mov.w     #0x1, w0
    34a8:	a0 01 88    	mov.w     w0, 0x34
    34aa:	00 20 20    	mov.w     #0x200, w0
    34ac:	90 01 88    	mov.w     w0, 0x32
    34ae:	00 00 fa    	lnk       #0x0

000034b0 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    34b0:	20 ba 20    	mov.w     #0xba2, w0
    34b2:	84 ff 07    	rcall     0x33bc <_timer_serviceInterrupt>

000034b4 <.LSM23>:
}
    34b4:	00 80 fa    	ulnk      
    34b6:	34 00 f9    	pop       0x34
    34b8:	32 00 f9    	pop       0x32
    34ba:	4f 03 be    	mov.d     [--w15], w6
    34bc:	4f 02 be    	mov.d     [--w15], w4
    34be:	4f 01 be    	mov.d     [--w15], w2
    34c0:	4f 00 be    	mov.d     [--w15], w0
    34c2:	36 00 f9    	pop       0x36
    34c4:	00 40 06    	retfie    

000034c6 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    34c6:	36 00 f8    	push      0x36
    34c8:	80 9f be    	mov.d     w0, [w15++]
    34ca:	82 9f be    	mov.d     w2, [w15++]
    34cc:	84 9f be    	mov.d     w4, [w15++]
    34ce:	86 9f be    	mov.d     w6, [w15++]
    34d0:	32 00 f8    	push      0x32
    34d2:	34 00 f8    	push      0x34
    34d4:	10 00 20    	mov.w     #0x1, w0
    34d6:	a0 01 88    	mov.w     w0, 0x34
    34d8:	00 20 20    	mov.w     #0x200, w0
    34da:	90 01 88    	mov.w     w0, 0x32
    34dc:	00 00 fa    	lnk       #0x0

000034de <.LSM25>:
    timer_serviceInterrupt(&timer5);
    34de:	80 bb 20    	mov.w     #0xbb8, w0
    34e0:	6d ff 07    	rcall     0x33bc <_timer_serviceInterrupt>

000034e2 <.LSM26>:
}
    34e2:	00 80 fa    	ulnk      
    34e4:	34 00 f9    	pop       0x34
    34e6:	32 00 f9    	pop       0x32
    34e8:	4f 03 be    	mov.d     [--w15], w6
    34ea:	4f 02 be    	mov.d     [--w15], w4
    34ec:	4f 01 be    	mov.d     [--w15], w2
    34ee:	4f 00 be    	mov.d     [--w15], w0
    34f0:	36 00 f9    	pop       0x36
    34f2:	00 40 06    	retfie    

000034f4 <_init_timer>:

void init_timer(void) {
    34f4:	00 00 fa    	lnk       #0x0

000034f6 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    34f6:	b0 00 20    	mov.w     #0xb, w0
    34f8:	80 1f 78    	mov.w     w0, [w15++]
    34fa:	47 00 20    	mov.w     #0x4, w7
    34fc:	36 c0 b3    	mov.b     #0x3, w6
    34fe:	45 09 20    	mov.w     #0x94, w5
    3500:	44 08 20    	mov.w     #0x84, w4
    3502:	03 10 20    	mov.w     #0x100, w3
    3504:	22 10 20    	mov.w     #0x102, w2
    3506:	41 10 20    	mov.w     #0x104, w1
    3508:	00 b6 20    	mov.w     #0xb60, w0
    350a:	33 00 07    	rcall     0x3572 <_timer_init>
    350c:	8f 87 e9    	dec2.w    w15, w15

0000350e <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    350e:	c0 00 20    	mov.w     #0xc, w0
    3510:	80 1f 78    	mov.w     w0, [w15++]
    3512:	80 03 eb    	clr.w     w7
    3514:	76 c0 b3    	mov.b     #0x7, w6
    3516:	45 09 20    	mov.w     #0x94, w5
    3518:	44 08 20    	mov.w     #0x84, w4
    351a:	63 10 20    	mov.w     #0x106, w3
    351c:	c2 10 20    	mov.w     #0x10c, w2
    351e:	01 11 20    	mov.w     #0x110, w1
    3520:	60 b7 20    	mov.w     #0xb76, w0
    3522:	27 00 07    	rcall     0x3572 <_timer_init>
    3524:	8f 87 e9    	dec2.w    w15, w15

00003526 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    3526:	d0 00 20    	mov.w     #0xd, w0
    3528:	80 1f 78    	mov.w     w0, [w15++]
    352a:	17 00 20    	mov.w     #0x1, w7
    352c:	86 c0 b3    	mov.b     #0x8, w6
    352e:	45 09 20    	mov.w     #0x94, w5
    3530:	44 08 20    	mov.w     #0x84, w4
    3532:	a3 10 20    	mov.w     #0x10a, w3
    3534:	e2 10 20    	mov.w     #0x10e, w2
    3536:	21 11 20    	mov.w     #0x112, w1
    3538:	c0 b8 20    	mov.w     #0xb8c, w0
    353a:	1b 00 07    	rcall     0x3572 <_timer_init>
    353c:	8f 87 e9    	dec2.w    w15, w15

0000353e <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    353e:	e0 00 20    	mov.w     #0xe, w0
    3540:	80 1f 78    	mov.w     w0, [w15++]
    3542:	27 00 20    	mov.w     #0x2, w7
    3544:	b6 c0 b3    	mov.b     #0xb, w6
    3546:	65 09 20    	mov.w     #0x96, w5
    3548:	64 08 20    	mov.w     #0x86, w4
    354a:	43 11 20    	mov.w     #0x114, w3
    354c:	a2 11 20    	mov.w     #0x11a, w2
    354e:	e1 11 20    	mov.w     #0x11e, w1
    3550:	20 ba 20    	mov.w     #0xba2, w0
    3552:	0f 00 07    	rcall     0x3572 <_timer_init>
    3554:	8f 87 e9    	dec2.w    w15, w15

00003556 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    3556:	f0 00 20    	mov.w     #0xf, w0
    3558:	80 1f 78    	mov.w     w0, [w15++]
    355a:	37 00 20    	mov.w     #0x3, w7
    355c:	c6 c0 b3    	mov.b     #0xc, w6
    355e:	65 09 20    	mov.w     #0x96, w5
    3560:	64 08 20    	mov.w     #0x86, w4
    3562:	83 11 20    	mov.w     #0x118, w3
    3564:	c2 11 20    	mov.w     #0x11c, w2
    3566:	01 12 20    	mov.w     #0x120, w1
    3568:	80 bb 20    	mov.w     #0xbb8, w0
    356a:	03 00 07    	rcall     0x3572 <_timer_init>
    356c:	8f 87 e9    	dec2.w    w15, w15

0000356e <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    356e:	00 80 fa    	ulnk      
    3570:	00 00 06    	return    

00003572 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3572:	10 00 fa    	lnk       #0x10
    3574:	00 0f 78    	mov.w     w0, [w14]
    3576:	11 07 98    	mov.w     w1, [w14+2]
    3578:	22 07 98    	mov.w     w2, [w14+4]
    357a:	33 07 98    	mov.w     w3, [w14+6]
    357c:	44 07 98    	mov.w     w4, [w14+8]
    357e:	55 07 98    	mov.w     w5, [w14+10]
    3580:	46 4f 98    	mov.b     w6, [w14+12]
    3582:	77 07 98    	mov.w     w7, [w14+14]

00003584 <.LSM35>:
    self->TxCON = TxCON;
    3584:	1e 00 78    	mov.w     [w14], w0
    3586:	9e 00 90    	mov.w     [w14+2], w1
    3588:	01 08 78    	mov.w     w1, [w0]

0000358a <.LSM36>:
    self->PRx = PRx;
    358a:	1e 00 78    	mov.w     [w14], w0
    358c:	ae 00 90    	mov.w     [w14+4], w1
    358e:	11 00 98    	mov.w     w1, [w0+2]

00003590 <.LSM37>:
    self->TMRx = TMRx;
    3590:	1e 00 78    	mov.w     [w14], w0
    3592:	be 00 90    	mov.w     [w14+6], w1
    3594:	21 00 98    	mov.w     w1, [w0+4]

00003596 <.LSM38>:
    self->IFSy = IFSy;
    3596:	1e 00 78    	mov.w     [w14], w0
    3598:	ce 00 90    	mov.w     [w14+8], w1
    359a:	31 00 98    	mov.w     w1, [w0+6]

0000359c <.LSM39>:
    self->IECy = IECy;
    359c:	1e 00 78    	mov.w     [w14], w0
    359e:	de 00 90    	mov.w     [w14+10], w1
    35a0:	41 00 98    	mov.w     w1, [w0+8]

000035a2 <.LSM40>:
    self->flagbit = flagbit;
    35a2:	1e 00 78    	mov.w     [w14], w0
    35a4:	ce 48 90    	mov.b     [w14+12], w1
    35a6:	21 48 98    	mov.b     w1, [w0+10]

000035a8 <.LSM41>:
    self->octselnum = octselnum;
    35a8:	1e 00 78    	mov.w     [w14], w0
    35aa:	fe 00 90    	mov.w     [w14+14], w1
    35ac:	61 00 98    	mov.w     w1, [w0+12]

000035ae <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    35ae:	1e 00 78    	mov.w     [w14], w0
    35b0:	ce b8 97    	mov.w     [w14-8], w1
    35b2:	71 00 98    	mov.w     w1, [w0+14]

000035b4 <.LSM43>:
    self->aftercount = 0;
    35b4:	1e 00 78    	mov.w     [w14], w0
    35b6:	80 00 eb    	clr.w     w1
    35b8:	01 08 98    	mov.w     w1, [w0+16]

000035ba <.LSM44>:
    self->every = NULL;
    35ba:	1e 00 78    	mov.w     [w14], w0
    35bc:	80 00 eb    	clr.w     w1
    35be:	11 08 98    	mov.w     w1, [w0+18]

000035c0 <.LSM45>:
    self->after = NULL;
    35c0:	1e 00 78    	mov.w     [w14], w0
    35c2:	80 00 eb    	clr.w     w1
    35c4:	21 08 98    	mov.w     w1, [w0+20]

000035c6 <.LSM46>:
}
    35c6:	00 80 fa    	ulnk      
    35c8:	00 00 06    	return    

000035ca <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    35ca:	06 00 fa    	lnk       #0x6
    35cc:	88 1f 78    	mov.w     w8, [w15++]
    35ce:	00 0f 78    	mov.w     w0, [w14]
    35d0:	12 07 98    	mov.w     w2, [w14+2]
    35d2:	23 07 98    	mov.w     w3, [w14+4]

000035d4 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    35d4:	18 c0 b3    	mov.b     #0x1, w8
    35d6:	d2 7b 23    	mov.w     #0x37bd, w2
    35d8:	63 f8 23    	mov.w     #0x3f86, w3
    35da:	1e 00 90    	mov.w     [w14+2], w0
    35dc:	ae 00 90    	mov.w     [w14+4], w1
    35de:	ea ee 07    	rcall     0x13b4 <___gesf2>
    35e0:	00 00 e0    	cp0.w     w0
    35e2:	01 00 3c    	bra       GT, 0x35e6 <.L14>
    35e4:	00 44 eb    	clr.b     w8

000035e6 <.L14>:
    35e6:	08 04 e0    	cp0.b     w8
    35e8:	69 00 3a    	bra       NZ, 0x36bc <.L23>

000035ea <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    35ea:	18 c0 b3    	mov.b     #0x1, w8
    35ec:	d2 7b 23    	mov.w     #0x37bd, w2
    35ee:	63 e8 23    	mov.w     #0x3e86, w3
    35f0:	1e 00 90    	mov.w     [w14+2], w0
    35f2:	ae 00 90    	mov.w     [w14+4], w1
    35f4:	df ee 07    	rcall     0x13b4 <___gesf2>
    35f6:	00 00 e0    	cp0.w     w0
    35f8:	01 00 3c    	bra       GT, 0x35fc <.L17>
    35fa:	00 44 eb    	clr.b     w8

000035fc <.L17>:
    35fc:	08 04 e0    	cp0.b     w8
    35fe:	12 00 32    	bra       Z, 0x3624 <.L18>

00003600 <.LSM50>:
        timer_stop(self);
    3600:	1e 00 78    	mov.w     [w14], w0
    3602:	c4 00 07    	rcall     0x378c <_timer_stop>

00003604 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3604:	1e 00 78    	mov.w     [w14], w0
    3606:	10 00 78    	mov.w     [w0], w0
    3608:	01 03 20    	mov.w     #0x30, w1
    360a:	01 08 78    	mov.w     w1, [w0]

0000360c <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    360c:	1e 00 78    	mov.w     [w14], w0
    360e:	10 04 90    	mov.w     [w0+2], w8
    3610:	02 40 22    	mov.w     #0x2400, w2
    3612:	43 77 24    	mov.w     #0x4774, w3
    3614:	1e 00 90    	mov.w     [w14+2], w0
    3616:	ae 00 90    	mov.w     [w14+4], w1
    3618:	3f ef 07    	rcall     0x1498 <___mulsf3>
    361a:	ce ee 07    	rcall     0x13b8 <___fixunssfsi>
    361c:	00 00 78    	mov.w     w0, w0
    361e:	00 00 e9    	dec.w     w0, w0
    3620:	00 0c 78    	mov.w     w0, [w8]
    3622:	4d 00 37    	bra       0x36be <.L13>

00003624 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3624:	18 c0 b3    	mov.b     #0x1, w8
    3626:	d2 7b 23    	mov.w     #0x37bd, w2
    3628:	63 d0 23    	mov.w     #0x3d06, w3
    362a:	1e 00 90    	mov.w     [w14+2], w0
    362c:	ae 00 90    	mov.w     [w14+4], w1
    362e:	c2 ee 07    	rcall     0x13b4 <___gesf2>
    3630:	00 00 e0    	cp0.w     w0
    3632:	01 00 3c    	bra       GT, 0x3636 <.L19>
    3634:	00 44 eb    	clr.b     w8

00003636 <.L19>:
    3636:	08 04 e0    	cp0.b     w8
    3638:	12 00 32    	bra       Z, 0x365e <.L20>

0000363a <.LSM54>:
        timer_stop(self);
    363a:	1e 00 78    	mov.w     [w14], w0
    363c:	a7 00 07    	rcall     0x378c <_timer_stop>

0000363e <.LSM55>:
        poke(self->TxCON, 0x0020);
    363e:	1e 00 78    	mov.w     [w14], w0
    3640:	10 00 78    	mov.w     [w0], w0
    3642:	01 02 20    	mov.w     #0x20, w1
    3644:	01 08 78    	mov.w     w1, [w0]

00003646 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3646:	1e 00 78    	mov.w     [w14], w0
    3648:	10 04 90    	mov.w     [w0+2], w8
    364a:	02 40 22    	mov.w     #0x2400, w2
    364c:	43 87 24    	mov.w     #0x4874, w3
    364e:	1e 00 90    	mov.w     [w14+2], w0
    3650:	ae 00 90    	mov.w     [w14+4], w1
    3652:	22 ef 07    	rcall     0x1498 <___mulsf3>
    3654:	b1 ee 07    	rcall     0x13b8 <___fixunssfsi>
    3656:	00 00 78    	mov.w     w0, w0
    3658:	00 00 e9    	dec.w     w0, w0
    365a:	00 0c 78    	mov.w     w0, [w8]
    365c:	30 00 37    	bra       0x36be <.L13>

0000365e <.L20>:
    } else if (period>(65536.*TCY)) {
    365e:	18 c0 b3    	mov.b     #0x1, w8
    3660:	d2 7b 23    	mov.w     #0x37bd, w2
    3662:	63 b8 23    	mov.w     #0x3b86, w3
    3664:	1e 00 90    	mov.w     [w14+2], w0
    3666:	ae 00 90    	mov.w     [w14+4], w1
    3668:	a5 ee 07    	rcall     0x13b4 <___gesf2>
    366a:	00 00 e0    	cp0.w     w0
    366c:	01 00 3c    	bra       GT, 0x3670 <.L21>
    366e:	00 44 eb    	clr.b     w8

00003670 <.L21>:
    3670:	08 04 e0    	cp0.b     w8
    3672:	12 00 32    	bra       Z, 0x3698 <.L22>

00003674 <.LSM58>:
        timer_stop(self);
    3674:	1e 00 78    	mov.w     [w14], w0
    3676:	8a 00 07    	rcall     0x378c <_timer_stop>

00003678 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3678:	1e 00 78    	mov.w     [w14], w0
    367a:	10 00 78    	mov.w     [w0], w0
    367c:	01 01 20    	mov.w     #0x10, w1
    367e:	01 08 78    	mov.w     w1, [w0]

00003680 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3680:	1e 00 78    	mov.w     [w14], w0
    3682:	10 04 90    	mov.w     [w0+2], w8
    3684:	02 40 22    	mov.w     #0x2400, w2
    3686:	43 9f 24    	mov.w     #0x49f4, w3
    3688:	1e 00 90    	mov.w     [w14+2], w0
    368a:	ae 00 90    	mov.w     [w14+4], w1
    368c:	05 ef 07    	rcall     0x1498 <___mulsf3>
    368e:	94 ee 07    	rcall     0x13b8 <___fixunssfsi>
    3690:	00 00 78    	mov.w     w0, w0
    3692:	00 00 e9    	dec.w     w0, w0
    3694:	00 0c 78    	mov.w     w0, [w8]
    3696:	13 00 37    	bra       0x36be <.L13>

00003698 <.L22>:
    } else {
        timer_stop(self);
    3698:	1e 00 78    	mov.w     [w14], w0
    369a:	78 00 07    	rcall     0x378c <_timer_stop>

0000369c <.LSM62>:
        poke(self->TxCON, 0x0000);
    369c:	1e 00 78    	mov.w     [w14], w0
    369e:	10 00 78    	mov.w     [w0], w0
    36a0:	80 00 eb    	clr.w     w1
    36a2:	01 08 78    	mov.w     w1, [w0]

000036a4 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    36a4:	1e 00 78    	mov.w     [w14], w0
    36a6:	10 04 90    	mov.w     [w0+2], w8
    36a8:	02 40 22    	mov.w     #0x2400, w2
    36aa:	43 b7 24    	mov.w     #0x4b74, w3
    36ac:	1e 00 90    	mov.w     [w14+2], w0
    36ae:	ae 00 90    	mov.w     [w14+4], w1
    36b0:	f3 ee 07    	rcall     0x1498 <___mulsf3>
    36b2:	82 ee 07    	rcall     0x13b8 <___fixunssfsi>
    36b4:	00 00 78    	mov.w     w0, w0
    36b6:	00 00 e9    	dec.w     w0, w0
    36b8:	00 0c 78    	mov.w     w0, [w8]
    36ba:	01 00 37    	bra       0x36be <.L13>

000036bc <.L23>:
    36bc:	00 00 00    	nop       

000036be <.L13>:
    }
}
    36be:	4f 04 78    	mov.w     [--w15], w8
    36c0:	00 80 fa    	ulnk      
    36c2:	00 00 06    	return    

000036c4 <_timer_period>:

float timer_period(_TIMER *self) {
    36c4:	04 00 fa    	lnk       #0x4
    36c6:	88 9f be    	mov.d     w8, [w15++]
    36c8:	10 07 98    	mov.w     w0, [w14+2]

000036ca <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    36ca:	1e 00 90    	mov.w     [w14+2], w0
    36cc:	10 00 78    	mov.w     [w0], w0
    36ce:	90 00 78    	mov.w     [w0], w1
    36d0:	00 03 20    	mov.w     #0x30, w0
    36d2:	00 80 60    	and.w     w1, w0, w0
    36d4:	44 00 de    	lsr.w     w0, #0x4, w0
    36d6:	00 0f 78    	mov.w     w0, [w14]

000036d8 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    36d8:	1e 00 78    	mov.w     [w14], w0
    36da:	c2 00 dd    	sl.w      w0, #0x2, w1
    36dc:	20 c3 20    	mov.w     #0xc32, w0
    36de:	00 80 40    	add.w     w1, w0, w0
    36e0:	10 04 be    	mov.d     [w0], w8
    36e2:	1e 00 90    	mov.w     [w14+2], w0
    36e4:	10 00 90    	mov.w     [w0+2], w0
    36e6:	10 00 78    	mov.w     [w0], w0
    36e8:	80 00 eb    	clr.w     w1
    36ea:	81 ee 07    	rcall     0x13ee <___floatunsisf>
    36ec:	02 00 20    	mov.w     #0x0, w2
    36ee:	03 f8 23    	mov.w     #0x3f80, w3
    36f0:	c0 ed 07    	rcall     0x1272 <___addsf3>
    36f2:	00 01 be    	mov.d     w0, w2
    36f4:	08 00 be    	mov.d     w8, w0
    36f6:	d0 ee 07    	rcall     0x1498 <___mulsf3>

000036f8 <.LSM69>:
}
    36f8:	4f 04 be    	mov.d     [--w15], w8
    36fa:	00 80 fa    	ulnk      
    36fc:	00 00 06    	return    

000036fe <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    36fe:	06 00 fa    	lnk       #0x6
    3700:	00 0f 78    	mov.w     w0, [w14]
    3702:	12 07 98    	mov.w     w2, [w14+2]
    3704:	23 07 98    	mov.w     w3, [w14+4]

00003706 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3706:	1e 01 90    	mov.w     [w14+2], w2
    3708:	ae 01 90    	mov.w     [w14+4], w3
    370a:	00 00 20    	mov.w     #0x0, w0
    370c:	01 f8 23    	mov.w     #0x3f80, w1
    370e:	0e ee 07    	rcall     0x132c <___divsf3>
    3710:	00 01 be    	mov.d     w0, w2
    3712:	1e 00 78    	mov.w     [w14], w0
    3714:	5a ff 07    	rcall     0x35ca <_timer_setPeriod>

00003716 <.LSM72>:
}
    3716:	00 80 fa    	ulnk      
    3718:	00 00 06    	return    

0000371a <_timer_freq>:

float timer_freq(_TIMER *self) {
    371a:	02 00 fa    	lnk       #0x2
    371c:	00 0f 78    	mov.w     w0, [w14]

0000371e <.LSM74>:
    return 1./timer_period(self);
    371e:	1e 00 78    	mov.w     [w14], w0
    3720:	d1 ff 07    	rcall     0x36c4 <_timer_period>
    3722:	00 01 be    	mov.d     w0, w2
    3724:	00 00 20    	mov.w     #0x0, w0
    3726:	01 f8 23    	mov.w     #0x3f80, w1
    3728:	01 ee 07    	rcall     0x132c <___divsf3>

0000372a <.LSM75>:
}
    372a:	00 80 fa    	ulnk      
    372c:	00 00 06    	return    

0000372e <_timer_time>:

float timer_time(_TIMER *self) {
    372e:	04 00 fa    	lnk       #0x4
    3730:	88 9f be    	mov.d     w8, [w15++]
    3732:	10 07 98    	mov.w     w0, [w14+2]

00003734 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3734:	1e 00 90    	mov.w     [w14+2], w0
    3736:	10 00 78    	mov.w     [w0], w0
    3738:	90 00 78    	mov.w     [w0], w1
    373a:	00 03 20    	mov.w     #0x30, w0
    373c:	00 80 60    	and.w     w1, w0, w0
    373e:	44 00 de    	lsr.w     w0, #0x4, w0
    3740:	00 0f 78    	mov.w     w0, [w14]

00003742 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3742:	1e 00 78    	mov.w     [w14], w0
    3744:	c2 00 dd    	sl.w      w0, #0x2, w1
    3746:	20 c3 20    	mov.w     #0xc32, w0
    3748:	00 80 40    	add.w     w1, w0, w0
    374a:	10 04 be    	mov.d     [w0], w8
    374c:	1e 00 90    	mov.w     [w14+2], w0
    374e:	10 00 90    	mov.w     [w0+2], w0
    3750:	10 00 78    	mov.w     [w0], w0
    3752:	80 00 eb    	clr.w     w1
    3754:	4c ee 07    	rcall     0x13ee <___floatunsisf>
    3756:	02 00 20    	mov.w     #0x0, w2
    3758:	03 f8 23    	mov.w     #0x3f80, w3
    375a:	8b ed 07    	rcall     0x1272 <___addsf3>
    375c:	00 01 be    	mov.d     w0, w2
    375e:	08 00 be    	mov.d     w8, w0
    3760:	9b ee 07    	rcall     0x1498 <___mulsf3>

00003762 <.LSM79>:
}
    3762:	4f 04 be    	mov.d     [--w15], w8
    3764:	00 80 fa    	ulnk      
    3766:	00 00 06    	return    

00003768 <_timer_start>:

void timer_start(_TIMER *self) {
    3768:	02 00 fa    	lnk       #0x2
    376a:	00 0f 78    	mov.w     w0, [w14]

0000376c <.LSM81>:
    timer_lower(self);
    376c:	1e 00 78    	mov.w     [w14], w0
    376e:	2b 00 07    	rcall     0x37c6 <_timer_lower>

00003770 <.LSM82>:
    poke(self->TMRx, 0);
    3770:	1e 00 78    	mov.w     [w14], w0
    3772:	20 00 90    	mov.w     [w0+4], w0
    3774:	80 00 eb    	clr.w     w1
    3776:	01 08 78    	mov.w     w1, [w0]

00003778 <.LSM83>:
    bitset(self->TxCON, 15);
    3778:	1e 00 78    	mov.w     [w14], w0
    377a:	10 00 78    	mov.w     [w0], w0
    377c:	9e 00 78    	mov.w     [w14], w1
    377e:	91 00 78    	mov.w     [w1], w1
    3780:	11 01 78    	mov.w     [w1], w2
    3782:	01 00 28    	mov.w     #0x8000, w1
    3784:	82 80 70    	ior.w     w1, w2, w1
    3786:	01 08 78    	mov.w     w1, [w0]

00003788 <.LSM84>:
}
    3788:	00 80 fa    	ulnk      
    378a:	00 00 06    	return    

0000378c <_timer_stop>:

void timer_stop(_TIMER *self) {
    378c:	02 00 fa    	lnk       #0x2
    378e:	00 0f 78    	mov.w     w0, [w14]

00003790 <.LSM86>:
    bitclear(self->TxCON, 15);
    3790:	1e 00 78    	mov.w     [w14], w0
    3792:	10 00 78    	mov.w     [w0], w0
    3794:	9e 00 78    	mov.w     [w14], w1
    3796:	91 00 78    	mov.w     [w1], w1
    3798:	11 01 78    	mov.w     [w1], w2
    379a:	f1 ff 27    	mov.w     #0x7fff, w1
    379c:	81 00 61    	and.w     w2, w1, w1
    379e:	01 08 78    	mov.w     w1, [w0]

000037a0 <.LSM87>:
}
    37a0:	00 80 fa    	ulnk      
    37a2:	00 00 06    	return    

000037a4 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    37a4:	02 00 fa    	lnk       #0x2
    37a6:	00 0f 78    	mov.w     w0, [w14]

000037a8 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    37a8:	1e 00 78    	mov.w     [w14], w0
    37aa:	30 00 90    	mov.w     [w0+6], w0
    37ac:	90 00 78    	mov.w     [w0], w1
    37ae:	1e 00 78    	mov.w     [w14], w0
    37b0:	20 48 90    	mov.b     [w0+10], w0
    37b2:	00 80 fb    	ze        w0, w0
    37b4:	12 00 20    	mov.w     #0x1, w2
    37b6:	00 10 dd    	sl.w      w2, w0, w0
    37b8:	00 80 60    	and.w     w1, w0, w0
    37ba:	00 f0 a7    	btsc.w    w0, #0xf
    37bc:	00 00 ea    	neg.w     w0, w0
    37be:	00 00 ea    	neg.w     w0, w0
    37c0:	4f 00 de    	lsr.w     w0, #0xf, w0

000037c2 <.LSM90>:
}
    37c2:	00 80 fa    	ulnk      
    37c4:	00 00 06    	return    

000037c6 <_timer_lower>:

void timer_lower(_TIMER *self) {
    37c6:	02 00 fa    	lnk       #0x2
    37c8:	00 0f 78    	mov.w     w0, [w14]

000037ca <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    37ca:	1e 00 78    	mov.w     [w14], w0
    37cc:	30 00 90    	mov.w     [w0+6], w0
    37ce:	9e 00 78    	mov.w     [w14], w1
    37d0:	b1 00 90    	mov.w     [w1+6], w1
    37d2:	11 01 78    	mov.w     [w1], w2
    37d4:	9e 00 78    	mov.w     [w14], w1
    37d6:	a1 48 90    	mov.b     [w1+10], w1
    37d8:	81 80 fb    	ze        w1, w1
    37da:	13 00 20    	mov.w     #0x1, w3
    37dc:	81 18 dd    	sl.w      w3, w1, w1
    37de:	81 80 ea    	com.w     w1, w1
    37e0:	81 00 61    	and.w     w2, w1, w1
    37e2:	01 08 78    	mov.w     w1, [w0]

000037e4 <.LSM93>:
}
    37e4:	00 80 fa    	ulnk      
    37e6:	00 00 06    	return    

000037e8 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    37e8:	02 00 fa    	lnk       #0x2
    37ea:	00 0f 78    	mov.w     w0, [w14]

000037ec <.LSM95>:
    return peek(self->TMRx);
    37ec:	1e 00 78    	mov.w     [w14], w0
    37ee:	20 00 90    	mov.w     [w0+4], w0
    37f0:	10 00 78    	mov.w     [w0], w0

000037f2 <.LSM96>:
}
    37f2:	00 80 fa    	ulnk      
    37f4:	00 00 06    	return    

000037f6 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    37f6:	02 00 fa    	lnk       #0x2
    37f8:	00 0f 78    	mov.w     w0, [w14]

000037fa <.LSM98>:
    bitset(self->IECy, self->flagbit);
    37fa:	1e 00 78    	mov.w     [w14], w0
    37fc:	40 00 90    	mov.w     [w0+8], w0
    37fe:	9e 00 78    	mov.w     [w14], w1
    3800:	c1 00 90    	mov.w     [w1+8], w1
    3802:	11 01 78    	mov.w     [w1], w2
    3804:	9e 00 78    	mov.w     [w14], w1
    3806:	a1 48 90    	mov.b     [w1+10], w1
    3808:	81 80 fb    	ze        w1, w1
    380a:	13 00 20    	mov.w     #0x1, w3
    380c:	81 18 dd    	sl.w      w3, w1, w1
    380e:	82 80 70    	ior.w     w1, w2, w1
    3810:	01 08 78    	mov.w     w1, [w0]

00003812 <.LSM99>:
}
    3812:	00 80 fa    	ulnk      
    3814:	00 00 06    	return    

00003816 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3816:	02 00 fa    	lnk       #0x2
    3818:	00 0f 78    	mov.w     w0, [w14]

0000381a <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    381a:	1e 00 78    	mov.w     [w14], w0
    381c:	40 00 90    	mov.w     [w0+8], w0
    381e:	9e 00 78    	mov.w     [w14], w1
    3820:	c1 00 90    	mov.w     [w1+8], w1
    3822:	11 01 78    	mov.w     [w1], w2
    3824:	9e 00 78    	mov.w     [w14], w1
    3826:	a1 48 90    	mov.b     [w1+10], w1
    3828:	81 80 fb    	ze        w1, w1
    382a:	13 00 20    	mov.w     #0x1, w3
    382c:	81 18 dd    	sl.w      w3, w1, w1
    382e:	81 80 ea    	com.w     w1, w1
    3830:	81 00 61    	and.w     w2, w1, w1
    3832:	01 08 78    	mov.w     w1, [w0]

00003834 <.LSM102>:
}
    3834:	00 80 fa    	ulnk      
    3836:	00 00 06    	return    

00003838 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3838:	08 00 fa    	lnk       #0x8
    383a:	00 0f 78    	mov.w     w0, [w14]
    383c:	12 07 98    	mov.w     w2, [w14+2]
    383e:	23 07 98    	mov.w     w3, [w14+4]
    3840:	31 07 98    	mov.w     w1, [w14+6]

00003842 <.LSM104>:
    timer_disableInterrupt(self);
    3842:	1e 00 78    	mov.w     [w14], w0
    3844:	e8 ff 07    	rcall     0x3816 <_timer_disableInterrupt>

00003846 <.LSM105>:
    timer_setPeriod(self, interval);
    3846:	1e 01 90    	mov.w     [w14+2], w2
    3848:	ae 01 90    	mov.w     [w14+4], w3
    384a:	1e 00 78    	mov.w     [w14], w0
    384c:	be fe 07    	rcall     0x35ca <_timer_setPeriod>

0000384e <.LSM106>:
    self->aftercount = 0;
    384e:	1e 00 78    	mov.w     [w14], w0
    3850:	80 00 eb    	clr.w     w1
    3852:	01 08 98    	mov.w     w1, [w0+16]

00003854 <.LSM107>:
    self->every = callback;
    3854:	1e 00 78    	mov.w     [w14], w0
    3856:	be 00 90    	mov.w     [w14+6], w1
    3858:	11 08 98    	mov.w     w1, [w0+18]

0000385a <.LSM108>:
    self->after = NULL;
    385a:	1e 00 78    	mov.w     [w14], w0
    385c:	80 00 eb    	clr.w     w1
    385e:	21 08 98    	mov.w     w1, [w0+20]

00003860 <.LSM109>:
    timer_enableInterrupt(self);
    3860:	1e 00 78    	mov.w     [w14], w0
    3862:	c9 ff 07    	rcall     0x37f6 <_timer_enableInterrupt>

00003864 <.LSM110>:
    timer_start(self);
    3864:	1e 00 78    	mov.w     [w14], w0
    3866:	80 ff 07    	rcall     0x3768 <_timer_start>

00003868 <.LSM111>:
}
    3868:	00 80 fa    	ulnk      
    386a:	00 00 06    	return    

0000386c <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    386c:	0a 00 fa    	lnk       #0xa
    386e:	00 0f 78    	mov.w     w0, [w14]
    3870:	12 07 98    	mov.w     w2, [w14+2]
    3872:	23 07 98    	mov.w     w3, [w14+4]
    3874:	31 07 98    	mov.w     w1, [w14+6]
    3876:	44 07 98    	mov.w     w4, [w14+8]

00003878 <.LSM113>:
    timer_disableInterrupt(self);
    3878:	1e 00 78    	mov.w     [w14], w0
    387a:	cd ff 07    	rcall     0x3816 <_timer_disableInterrupt>

0000387c <.LSM114>:
    timer_setPeriod(self, delay);
    387c:	1e 01 90    	mov.w     [w14+2], w2
    387e:	ae 01 90    	mov.w     [w14+4], w3
    3880:	1e 00 78    	mov.w     [w14], w0
    3882:	a3 fe 07    	rcall     0x35ca <_timer_setPeriod>

00003884 <.LSM115>:
    self->aftercount = num_times;
    3884:	1e 00 78    	mov.w     [w14], w0
    3886:	be 00 90    	mov.w     [w14+6], w1
    3888:	01 08 98    	mov.w     w1, [w0+16]

0000388a <.LSM116>:
    self->every = NULL;
    388a:	1e 00 78    	mov.w     [w14], w0
    388c:	80 00 eb    	clr.w     w1
    388e:	11 08 98    	mov.w     w1, [w0+18]

00003890 <.LSM117>:
    self->after = callback;
    3890:	1e 00 78    	mov.w     [w14], w0
    3892:	ce 00 90    	mov.w     [w14+8], w1
    3894:	21 08 98    	mov.w     w1, [w0+20]

00003896 <.LSM118>:
    timer_enableInterrupt(self);
    3896:	1e 00 78    	mov.w     [w14], w0
    3898:	ae ff 07    	rcall     0x37f6 <_timer_enableInterrupt>

0000389a <.LSM119>:
    timer_start(self);
    389a:	1e 00 78    	mov.w     [w14], w0
    389c:	65 ff 07    	rcall     0x3768 <_timer_start>

0000389e <.LSM120>:
}
    389e:	00 80 fa    	ulnk      
    38a0:	00 00 06    	return    

000038a2 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    38a2:	02 00 fa    	lnk       #0x2
    38a4:	00 0f 78    	mov.w     w0, [w14]

000038a6 <.LSM122>:
    timer_disableInterrupt(self);
    38a6:	1e 00 78    	mov.w     [w14], w0
    38a8:	b6 ff 07    	rcall     0x3816 <_timer_disableInterrupt>

000038aa <.LSM123>:
    timer_lower(self);
    38aa:	1e 00 78    	mov.w     [w14], w0
    38ac:	8c ff 07    	rcall     0x37c6 <_timer_lower>

000038ae <.LSM124>:
    timer_stop(self);
    38ae:	1e 00 78    	mov.w     [w14], w0
    38b0:	6d ff 07    	rcall     0x378c <_timer_stop>

000038b2 <.LSM125>:
    self->aftercount = 0;
    38b2:	1e 00 78    	mov.w     [w14], w0
    38b4:	80 00 eb    	clr.w     w1
    38b6:	01 08 98    	mov.w     w1, [w0+16]

000038b8 <.LSM126>:
    self->every = NULL;
    38b8:	1e 00 78    	mov.w     [w14], w0
    38ba:	80 00 eb    	clr.w     w1
    38bc:	11 08 98    	mov.w     w1, [w0+18]

000038be <.LSM127>:
    self->after = NULL;
    38be:	1e 00 78    	mov.w     [w14], w0
    38c0:	80 00 eb    	clr.w     w1
    38c2:	21 08 98    	mov.w     w1, [w0+20]

000038c4 <.LSM128>:
}
    38c4:	00 80 fa    	ulnk      
    38c6:	00 00 06    	return    

000038c8 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    38c8:	04 00 fa    	lnk       #0x4
    38ca:	00 0f 78    	mov.w     w0, [w14]
    38cc:	11 07 98    	mov.w     w1, [w14+2]

000038ce <.LSM1>:
    if (val)
    38ce:	1e 00 90    	mov.w     [w14+2], w0
    38d0:	00 00 e0    	cp0.w     w0
    38d2:	0d 00 32    	bra       Z, 0x38ee <.L2>

000038d4 <.LSM2>:
        bitset(self->port, self->bit);
    38d4:	1e 00 78    	mov.w     [w14], w0
    38d6:	10 00 78    	mov.w     [w0], w0
    38d8:	9e 00 78    	mov.w     [w14], w1
    38da:	91 00 78    	mov.w     [w1], w1
    38dc:	11 01 78    	mov.w     [w1], w2
    38de:	9e 00 78    	mov.w     [w14], w1
    38e0:	e1 40 90    	mov.b     [w1+6], w1
    38e2:	81 80 fb    	ze        w1, w1
    38e4:	13 00 20    	mov.w     #0x1, w3
    38e6:	81 18 dd    	sl.w      w3, w1, w1
    38e8:	82 80 70    	ior.w     w1, w2, w1
    38ea:	01 08 78    	mov.w     w1, [w0]
    38ec:	0d 00 37    	bra       0x3908 <.L1>

000038ee <.L2>:
    else
        bitclear(self->port, self->bit);
    38ee:	1e 00 78    	mov.w     [w14], w0
    38f0:	10 00 78    	mov.w     [w0], w0
    38f2:	9e 00 78    	mov.w     [w14], w1
    38f4:	91 00 78    	mov.w     [w1], w1
    38f6:	11 01 78    	mov.w     [w1], w2
    38f8:	9e 00 78    	mov.w     [w14], w1
    38fa:	e1 40 90    	mov.b     [w1+6], w1
    38fc:	81 80 fb    	ze        w1, w1
    38fe:	13 00 20    	mov.w     #0x1, w3
    3900:	81 18 dd    	sl.w      w3, w1, w1
    3902:	81 80 ea    	com.w     w1, w1
    3904:	81 00 61    	and.w     w2, w1, w1
    3906:	01 08 78    	mov.w     w1, [w0]

00003908 <.L1>:
}
    3908:	00 80 fa    	ulnk      
    390a:	00 00 06    	return    

0000390c <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    390c:	02 00 fa    	lnk       #0x2
    390e:	00 0f 78    	mov.w     w0, [w14]

00003910 <.LSM6>:
    return bitread(self->port, self->bit);
    3910:	1e 00 78    	mov.w     [w14], w0
    3912:	10 00 78    	mov.w     [w0], w0
    3914:	90 00 78    	mov.w     [w0], w1
    3916:	1e 00 78    	mov.w     [w14], w0
    3918:	60 40 90    	mov.b     [w0+6], w0
    391a:	00 80 fb    	ze        w0, w0
    391c:	12 00 20    	mov.w     #0x1, w2
    391e:	00 10 dd    	sl.w      w2, w0, w0
    3920:	00 80 60    	and.w     w1, w0, w0
    3922:	00 f0 a7    	btsc.w    w0, #0xf
    3924:	00 00 ea    	neg.w     w0, w0
    3926:	00 00 ea    	neg.w     w0, w0
    3928:	4f 00 de    	lsr.w     w0, #0xf, w0

0000392a <.LSM7>:
}
    392a:	00 80 fa    	ulnk      
    392c:	00 00 06    	return    

0000392e <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    392e:	02 00 fa    	lnk       #0x2
    3930:	00 0f 78    	mov.w     w0, [w14]

00003932 <.LSM9>:
    AD1CHS = self->annum;
    3932:	1e 00 78    	mov.w     [w14], w0
    3934:	40 00 90    	mov.w     [w0+8], w0
    3936:	40 19 88    	mov.w     w0, 0x328

00003938 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3938:	20 23 a8    	bset.b    0x320, #0x1

0000393a <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    393a:	00 00 00    	nop       

0000393c <.L6>:
    393c:	00 19 80    	mov.w     0x320, w0
    393e:	61 00 60    	and.w     w0, #0x1, w0
    3940:	00 00 e0    	cp0.w     w0
    3942:	fc ff 32    	bra       Z, 0x393c <.L6>

00003944 <.LSM12>:
    return ADC1BUF0;
    3944:	00 18 80    	mov.w     0x300, w0

00003946 <.LSM13>:
}
    3946:	00 80 fa    	ulnk      
    3948:	00 00 06    	return    

0000394a <_init_pin>:

void init_pin(void) {
    394a:	02 00 fa    	lnk       #0x2

0000394c <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    394c:	40 6d 20    	mov.w     #0x6d4, w0
    394e:	80 1f 78    	mov.w     w0, [w15++]
    3950:	47 01 20    	mov.w     #0x14, w7
    3952:	00 43 eb    	clr.b     w6
    3954:	80 82 eb    	setm.w    w5
    3956:	54 c0 b3    	mov.b     #0x5, w4
    3958:	80 01 eb    	clr.w     w3
    395a:	82 2d 20    	mov.w     #0x2d8, w2
    395c:	a1 2d 20    	mov.w     #0x2da, w1
    395e:	40 80 20    	mov.w     #0x804, w0
    3960:	08 01 07    	rcall     0x3b72 <_pin_init>
    3962:	8f 87 e9    	dec2.w    w15, w15

00003964 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3964:	80 6d 20    	mov.w     #0x6d8, w0
    3966:	80 1f 78    	mov.w     w0, [w15++]
    3968:	97 01 20    	mov.w     #0x19, w7
    396a:	86 c0 b3    	mov.b     #0x8, w6
    396c:	80 82 eb    	setm.w    w5
    396e:	44 c0 b3    	mov.b     #0x4, w4
    3970:	80 01 eb    	clr.w     w3
    3972:	82 2d 20    	mov.w     #0x2d8, w2
    3974:	a1 2d 20    	mov.w     #0x2da, w1
    3976:	a0 81 20    	mov.w     #0x81a, w0
    3978:	fc 00 07    	rcall     0x3b72 <_pin_init>
    397a:	8f 87 e9    	dec2.w    w15, w15

0000397c <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    397c:	a0 6c 20    	mov.w     #0x6ca, w0
    397e:	80 1f 78    	mov.w     w0, [w15++]
    3980:	a7 00 20    	mov.w     #0xa, w7
    3982:	00 43 eb    	clr.b     w6
    3984:	80 82 eb    	setm.w    w5
    3986:	44 c0 b3    	mov.b     #0x4, w4
    3988:	80 01 eb    	clr.w     w3
    398a:	82 2e 20    	mov.w     #0x2e8, w2
    398c:	a1 2e 20    	mov.w     #0x2ea, w1
    398e:	00 83 20    	mov.w     #0x830, w0
    3990:	f0 00 07    	rcall     0x3b72 <_pin_init>
    3992:	8f 87 e9    	dec2.w    w15, w15

00003994 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3994:	00 6d 20    	mov.w     #0x6d0, w0
    3996:	80 1f 78    	mov.w     w0, [w15++]
    3998:	17 01 20    	mov.w     #0x11, w7
    399a:	86 c0 b3    	mov.b     #0x8, w6
    399c:	80 82 eb    	setm.w    w5
    399e:	54 c0 b3    	mov.b     #0x5, w4
    39a0:	80 01 eb    	clr.w     w3
    39a2:	82 2e 20    	mov.w     #0x2e8, w2
    39a4:	a1 2e 20    	mov.w     #0x2ea, w1
    39a6:	60 84 20    	mov.w     #0x846, w0
    39a8:	e4 00 07    	rcall     0x3b72 <_pin_init>
    39aa:	8f 87 e9    	dec2.w    w15, w15

000039ac <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    39ac:	c0 6d 20    	mov.w     #0x6dc, w0
    39ae:	80 1f 78    	mov.w     w0, [w15++]
    39b0:	d7 01 20    	mov.w     #0x1d, w7
    39b2:	86 c0 b3    	mov.b     #0x8, w6
    39b4:	f5 00 20    	mov.w     #0xf, w5
    39b6:	f4 c0 b3    	mov.b     #0xf, w4
    39b8:	23 4e 20    	mov.w     #0x4e2, w3
    39ba:	82 2c 20    	mov.w     #0x2c8, w2
    39bc:	a1 2c 20    	mov.w     #0x2ca, w1
    39be:	c0 85 20    	mov.w     #0x85c, w0
    39c0:	d8 00 07    	rcall     0x3b72 <_pin_init>
    39c2:	8f 87 e9    	dec2.w    w15, w15

000039c4 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    39c4:	00 6d 20    	mov.w     #0x6d0, w0
    39c6:	80 1f 78    	mov.w     w0, [w15++]
    39c8:	07 01 20    	mov.w     #0x10, w7
    39ca:	00 43 eb    	clr.b     w6
    39cc:	80 82 eb    	setm.w    w5
    39ce:	34 c0 b3    	mov.b     #0x3, w4
    39d0:	80 01 eb    	clr.w     w3
    39d2:	82 2e 20    	mov.w     #0x2e8, w2
    39d4:	a1 2e 20    	mov.w     #0x2ea, w1
    39d6:	20 87 20    	mov.w     #0x872, w0
    39d8:	cc 00 07    	rcall     0x3b72 <_pin_init>
    39da:	8f 87 e9    	dec2.w    w15, w15

000039dc <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    39dc:	20 6c 20    	mov.w     #0x6c2, w0
    39de:	80 1f 78    	mov.w     w0, [w15++]
    39e0:	27 00 20    	mov.w     #0x2, w7
    39e2:	00 43 eb    	clr.b     w6
    39e4:	80 82 eb    	setm.w    w5
    39e6:	84 c0 b3    	mov.b     #0x8, w4
    39e8:	80 01 eb    	clr.w     w3
    39ea:	82 2d 20    	mov.w     #0x2d8, w2
    39ec:	a1 2d 20    	mov.w     #0x2da, w1
    39ee:	80 88 20    	mov.w     #0x888, w0
    39f0:	c0 00 07    	rcall     0x3b72 <_pin_init>
    39f2:	8f 87 e9    	dec2.w    w15, w15

000039f4 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    39f4:	c0 6c 20    	mov.w     #0x6cc, w0
    39f6:	80 1f 78    	mov.w     w0, [w15++]
    39f8:	c7 00 20    	mov.w     #0xc, w7
    39fa:	00 43 eb    	clr.b     w6
    39fc:	80 82 eb    	setm.w    w5
    39fe:	b4 c0 b3    	mov.b     #0xb, w4
    3a00:	80 01 eb    	clr.w     w3
    3a02:	82 2d 20    	mov.w     #0x2d8, w2
    3a04:	a1 2d 20    	mov.w     #0x2da, w1
    3a06:	e0 89 20    	mov.w     #0x89e, w0
    3a08:	b4 00 07    	rcall     0x3b72 <_pin_init>
    3a0a:	8f 87 e9    	dec2.w    w15, w15

00003a0c <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a0c:	40 6c 20    	mov.w     #0x6c4, w0
    3a0e:	80 1f 78    	mov.w     w0, [w15++]
    3a10:	47 00 20    	mov.w     #0x4, w7
    3a12:	00 43 eb    	clr.b     w6
    3a14:	80 82 eb    	setm.w    w5
    3a16:	94 c0 b3    	mov.b     #0x9, w4
    3a18:	80 01 eb    	clr.w     w3
    3a1a:	82 2d 20    	mov.w     #0x2d8, w2
    3a1c:	a1 2d 20    	mov.w     #0x2da, w1
    3a1e:	40 8b 20    	mov.w     #0x8b4, w0
    3a20:	a8 00 07    	rcall     0x3b72 <_pin_init>
    3a22:	8f 87 e9    	dec2.w    w15, w15

00003a24 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a24:	20 6c 20    	mov.w     #0x6c2, w0
    3a26:	80 1f 78    	mov.w     w0, [w15++]
    3a28:	37 00 20    	mov.w     #0x3, w7
    3a2a:	86 c0 b3    	mov.b     #0x8, w6
    3a2c:	80 82 eb    	setm.w    w5
    3a2e:	a4 c0 b3    	mov.b     #0xa, w4
    3a30:	80 01 eb    	clr.w     w3
    3a32:	82 2d 20    	mov.w     #0x2d8, w2
    3a34:	a1 2d 20    	mov.w     #0x2da, w1
    3a36:	a0 8c 20    	mov.w     #0x8ca, w0
    3a38:	9c 00 07    	rcall     0x3b72 <_pin_init>
    3a3a:	8f 87 e9    	dec2.w    w15, w15

00003a3c <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a3c:	a0 6c 20    	mov.w     #0x6ca, w0
    3a3e:	80 1f 78    	mov.w     w0, [w15++]
    3a40:	b7 00 20    	mov.w     #0xb, w7
    3a42:	86 c0 b3    	mov.b     #0x8, w6
    3a44:	80 82 eb    	setm.w    w5
    3a46:	00 42 eb    	clr.b     w4
    3a48:	80 01 eb    	clr.w     w3
    3a4a:	82 2d 20    	mov.w     #0x2d8, w2
    3a4c:	a1 2d 20    	mov.w     #0x2da, w1
    3a4e:	00 8e 20    	mov.w     #0x8e0, w0
    3a50:	90 00 07    	rcall     0x3b72 <_pin_init>
    3a52:	8f 87 e9    	dec2.w    w15, w15

00003a54 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a54:	80 6d 20    	mov.w     #0x6d8, w0
    3a56:	80 1f 78    	mov.w     w0, [w15++]
    3a58:	87 01 20    	mov.w     #0x18, w7
    3a5a:	00 43 eb    	clr.b     w6
    3a5c:	80 82 eb    	setm.w    w5
    3a5e:	14 c0 b3    	mov.b     #0x1, w4
    3a60:	80 01 eb    	clr.w     w3
    3a62:	82 2d 20    	mov.w     #0x2d8, w2
    3a64:	a1 2d 20    	mov.w     #0x2da, w1
    3a66:	60 8f 20    	mov.w     #0x8f6, w0
    3a68:	84 00 07    	rcall     0x3b72 <_pin_init>
    3a6a:	8f 87 e9    	dec2.w    w15, w15

00003a6c <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a6c:	60 6d 20    	mov.w     #0x6d6, w0
    3a6e:	80 1f 78    	mov.w     w0, [w15++]
    3a70:	77 01 20    	mov.w     #0x17, w7
    3a72:	86 c0 b3    	mov.b     #0x8, w6
    3a74:	80 82 eb    	setm.w    w5
    3a76:	24 c0 b3    	mov.b     #0x2, w4
    3a78:	80 01 eb    	clr.w     w3
    3a7a:	82 2d 20    	mov.w     #0x2d8, w2
    3a7c:	a1 2d 20    	mov.w     #0x2da, w1
    3a7e:	c0 90 20    	mov.w     #0x90c, w0
    3a80:	78 00 07    	rcall     0x3b72 <_pin_init>
    3a82:	8f 87 e9    	dec2.w    w15, w15

00003a84 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a84:	60 6d 20    	mov.w     #0x6d6, w0
    3a86:	80 1f 78    	mov.w     w0, [w15++]
    3a88:	67 01 20    	mov.w     #0x16, w7
    3a8a:	00 43 eb    	clr.b     w6
    3a8c:	80 82 eb    	setm.w    w5
    3a8e:	34 c0 b3    	mov.b     #0x3, w4
    3a90:	80 01 eb    	clr.w     w3
    3a92:	82 2d 20    	mov.w     #0x2d8, w2
    3a94:	a1 2d 20    	mov.w     #0x2da, w1
    3a96:	20 92 20    	mov.w     #0x922, w0
    3a98:	6c 00 07    	rcall     0x3b72 <_pin_init>
    3a9a:	8f 87 e9    	dec2.w    w15, w15

00003a9c <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3a9c:	00 6c 20    	mov.w     #0x6c0, w0
    3a9e:	80 1f 78    	mov.w     w0, [w15++]
    3aa0:	80 03 eb    	clr.w     w7
    3aa2:	00 43 eb    	clr.b     w6
    3aa4:	80 02 eb    	clr.w     w5
    3aa6:	00 42 eb    	clr.b     w4
    3aa8:	23 4e 20    	mov.w     #0x4e2, w3
    3aaa:	82 2c 20    	mov.w     #0x2c8, w2
    3aac:	a1 2c 20    	mov.w     #0x2ca, w1
    3aae:	60 9a 20    	mov.w     #0x9a6, w0
    3ab0:	60 00 07    	rcall     0x3b72 <_pin_init>
    3ab2:	8f 87 e9    	dec2.w    w15, w15

00003ab4 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ab4:	00 6c 20    	mov.w     #0x6c0, w0
    3ab6:	80 1f 78    	mov.w     w0, [w15++]
    3ab8:	17 00 20    	mov.w     #0x1, w7
    3aba:	86 c0 b3    	mov.b     #0x8, w6
    3abc:	15 00 20    	mov.w     #0x1, w5
    3abe:	14 c0 b3    	mov.b     #0x1, w4
    3ac0:	23 4e 20    	mov.w     #0x4e2, w3
    3ac2:	82 2c 20    	mov.w     #0x2c8, w2
    3ac4:	a1 2c 20    	mov.w     #0x2ca, w1
    3ac6:	00 99 20    	mov.w     #0x990, w0
    3ac8:	54 00 07    	rcall     0x3b72 <_pin_init>
    3aca:	8f 87 e9    	dec2.w    w15, w15

00003acc <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3acc:	c0 6c 20    	mov.w     #0x6cc, w0
    3ace:	80 1f 78    	mov.w     w0, [w15++]
    3ad0:	d7 00 20    	mov.w     #0xd, w7
    3ad2:	86 c0 b3    	mov.b     #0x8, w6
    3ad4:	25 00 20    	mov.w     #0x2, w5
    3ad6:	24 c0 b3    	mov.b     #0x2, w4
    3ad8:	23 4e 20    	mov.w     #0x4e2, w3
    3ada:	82 2c 20    	mov.w     #0x2c8, w2
    3adc:	a1 2c 20    	mov.w     #0x2ca, w1
    3ade:	a0 97 20    	mov.w     #0x97a, w0
    3ae0:	48 00 07    	rcall     0x3b72 <_pin_init>
    3ae2:	8f 87 e9    	dec2.w    w15, w15

00003ae4 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ae4:	00 00 eb    	clr.w     w0
    3ae6:	80 1f 78    	mov.w     w0, [w15++]
    3ae8:	80 83 eb    	setm.w    w7
    3aea:	00 43 eb    	clr.b     w6
    3aec:	35 00 20    	mov.w     #0x3, w5
    3aee:	34 c0 b3    	mov.b     #0x3, w4
    3af0:	23 4e 20    	mov.w     #0x4e2, w3
    3af2:	82 2c 20    	mov.w     #0x2c8, w2
    3af4:	a1 2c 20    	mov.w     #0x2ca, w1
    3af6:	40 96 20    	mov.w     #0x964, w0
    3af8:	3c 00 07    	rcall     0x3b72 <_pin_init>
    3afa:	8f 87 e9    	dec2.w    w15, w15

00003afc <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3afc:	c0 6d 20    	mov.w     #0x6dc, w0
    3afe:	80 1f 78    	mov.w     w0, [w15++]
    3b00:	c7 01 20    	mov.w     #0x1c, w7
    3b02:	00 43 eb    	clr.b     w6
    3b04:	45 00 20    	mov.w     #0x4, w5
    3b06:	44 c0 b3    	mov.b     #0x4, w4
    3b08:	23 4e 20    	mov.w     #0x4e2, w3
    3b0a:	82 2c 20    	mov.w     #0x2c8, w2
    3b0c:	a1 2c 20    	mov.w     #0x2ca, w1
    3b0e:	e0 94 20    	mov.w     #0x94e, w0
    3b10:	30 00 07    	rcall     0x3b72 <_pin_init>
    3b12:	8f 87 e9    	dec2.w    w15, w15

00003b14 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b14:	20 6d 20    	mov.w     #0x6d2, w0
    3b16:	80 1f 78    	mov.w     w0, [w15++]
    3b18:	27 01 20    	mov.w     #0x12, w7
    3b1a:	00 43 eb    	clr.b     w6
    3b1c:	55 00 20    	mov.w     #0x5, w5
    3b1e:	54 c0 b3    	mov.b     #0x5, w4
    3b20:	23 4e 20    	mov.w     #0x4e2, w3
    3b22:	82 2c 20    	mov.w     #0x2c8, w2
    3b24:	a1 2c 20    	mov.w     #0x2ca, w1
    3b26:	80 93 20    	mov.w     #0x938, w0
    3b28:	24 00 07    	rcall     0x3b72 <_pin_init>
    3b2a:	8f 87 e9    	dec2.w    w15, w15

00003b2c <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3b2c:	00 00 eb    	clr.w     w0
    3b2e:	00 0f 78    	mov.w     w0, [w14]
    3b30:	07 00 37    	bra       0x3b40 <.L8>

00003b32 <.L9>:
        pin_digitalIn(&D[i]);
    3b32:	1e 00 78    	mov.w     [w14], w0
    3b34:	76 00 b9    	mul.su    w0, #0x16, w0
    3b36:	80 00 78    	mov.w     w0, w1
    3b38:	40 80 20    	mov.w     #0x804, w0
    3b3a:	00 80 40    	add.w     w1, w0, w0
    3b3c:	46 00 07    	rcall     0x3bca <_pin_digitalIn>

00003b3e <.LSM37>:
    3b3e:	1e 0f e8    	inc.w     [w14], [w14]

00003b40 <.L8>:
    3b40:	1e 00 78    	mov.w     [w14], w0
    3b42:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3b44:	f6 ff 36    	bra       LEU, 0x3b32 <.L9>

00003b46 <.LSM38>:
    for (i = 0; i<6; i++)
    3b46:	00 00 eb    	clr.w     w0
    3b48:	00 0f 78    	mov.w     w0, [w14]
    3b4a:	07 00 37    	bra       0x3b5a <.L10>

00003b4c <.L11>:
        pin_analogIn(&A[i]);
    3b4c:	1e 00 78    	mov.w     [w14], w0
    3b4e:	76 00 b9    	mul.su    w0, #0x16, w0
    3b50:	80 00 78    	mov.w     w0, w1
    3b52:	80 93 20    	mov.w     #0x938, w0
    3b54:	00 80 40    	add.w     w1, w0, w0
    3b56:	95 00 07    	rcall     0x3c82 <_pin_analogIn>

00003b58 <.LSM40>:
    3b58:	1e 0f e8    	inc.w     [w14], [w14]

00003b5a <.L10>:
    3b5a:	1e 00 78    	mov.w     [w14], w0
    3b5c:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3b5e:	f6 ff 36    	bra       LEU, 0x3b4c <.L11>

00003b60 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3b60:	00 2e 20    	mov.w     #0x2e0, w0
    3b62:	00 19 88    	mov.w     w0, 0x320

00003b64 <.LSM42>:
    AD1CON2 = 0;
    3b64:	22 23 ef    	clr.w     0x322

00003b66 <.LSM43>:
    AD1CON3 = 0x0C40;
    3b66:	00 c4 20    	mov.w     #0xc40, w0
    3b68:	20 19 88    	mov.w     w0, 0x324

00003b6a <.LSM44>:
    AD1CHS = 0;
    3b6a:	28 23 ef    	clr.w     0x328

00003b6c <.LSM45>:
    AD1CON1bits.ADON = 1;
    3b6c:	21 e3 a8    	bset.b    0x321, #0x7

00003b6e <.LSM46>:
}
    3b6e:	00 80 fa    	ulnk      
    3b70:	00 00 06    	return    

00003b72 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3b72:	10 00 fa    	lnk       #0x10
    3b74:	00 0f 78    	mov.w     w0, [w14]
    3b76:	11 07 98    	mov.w     w1, [w14+2]
    3b78:	22 07 98    	mov.w     w2, [w14+4]
    3b7a:	33 07 98    	mov.w     w3, [w14+6]
    3b7c:	04 4f 98    	mov.b     w4, [w14+8]
    3b7e:	55 07 98    	mov.w     w5, [w14+10]
    3b80:	46 4f 98    	mov.b     w6, [w14+12]
    3b82:	77 07 98    	mov.w     w7, [w14+14]

00003b84 <.LSM48>:
    self->port = port;
    3b84:	1e 00 78    	mov.w     [w14], w0
    3b86:	9e 00 90    	mov.w     [w14+2], w1
    3b88:	01 08 78    	mov.w     w1, [w0]

00003b8a <.LSM49>:
    self->tris = tris;
    3b8a:	1e 00 78    	mov.w     [w14], w0
    3b8c:	ae 00 90    	mov.w     [w14+4], w1
    3b8e:	11 00 98    	mov.w     w1, [w0+2]

00003b90 <.LSM50>:
    self->ans = ans;
    3b90:	1e 00 78    	mov.w     [w14], w0
    3b92:	be 00 90    	mov.w     [w14+6], w1
    3b94:	21 00 98    	mov.w     w1, [w0+4]

00003b96 <.LSM51>:
    self->bit = bit;
    3b96:	1e 00 78    	mov.w     [w14], w0
    3b98:	8e 48 90    	mov.b     [w14+8], w1
    3b9a:	61 40 98    	mov.b     w1, [w0+6]

00003b9c <.LSM52>:
    self->annum = annum;
    3b9c:	1e 00 78    	mov.w     [w14], w0
    3b9e:	de 00 90    	mov.w     [w14+10], w1
    3ba0:	41 00 98    	mov.w     w1, [w0+8]

00003ba2 <.LSM53>:
    self->rpshift = rpshift;
    3ba2:	1e 00 78    	mov.w     [w14], w0
    3ba4:	ce 48 90    	mov.b     [w14+12], w1
    3ba6:	21 48 98    	mov.b     w1, [w0+10]

00003ba8 <.LSM54>:
    self->rpnum = rpnum;
    3ba8:	fe 00 90    	mov.w     [w14+14], w1
    3baa:	1e 00 78    	mov.w     [w14], w0
    3bac:	61 00 98    	mov.w     w1, [w0+12]

00003bae <.LSM55>:
    self->rpor = rpor;
    3bae:	1e 00 78    	mov.w     [w14], w0
    3bb0:	ce b8 97    	mov.w     [w14-8], w1
    3bb2:	71 00 98    	mov.w     w1, [w0+14]

00003bb4 <.LSM56>:
    self->owner = NULL;
    3bb4:	1e 00 78    	mov.w     [w14], w0
    3bb6:	80 00 eb    	clr.w     w1
    3bb8:	01 08 98    	mov.w     w1, [w0+16]

00003bba <.LSM57>:
    self->write = NULL;
    3bba:	1e 00 78    	mov.w     [w14], w0
    3bbc:	80 00 eb    	clr.w     w1
    3bbe:	11 08 98    	mov.w     w1, [w0+18]

00003bc0 <.LSM58>:
    self->read = NULL;
    3bc0:	1e 00 78    	mov.w     [w14], w0
    3bc2:	80 00 eb    	clr.w     w1
    3bc4:	21 08 98    	mov.w     w1, [w0+20]

00003bc6 <.LSM59>:
}
    3bc6:	00 80 fa    	ulnk      
    3bc8:	00 00 06    	return    

00003bca <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3bca:	02 00 fa    	lnk       #0x2
    3bcc:	00 0f 78    	mov.w     w0, [w14]

00003bce <.LSM61>:
    if (self->ans)
    3bce:	1e 00 78    	mov.w     [w14], w0
    3bd0:	20 00 90    	mov.w     [w0+4], w0
    3bd2:	00 00 e0    	cp0.w     w0
    3bd4:	0d 00 32    	bra       Z, 0x3bf0 <.L14>

00003bd6 <.LSM62>:
        bitclear(self->ans, self->bit);
    3bd6:	1e 00 78    	mov.w     [w14], w0
    3bd8:	20 00 90    	mov.w     [w0+4], w0
    3bda:	9e 00 78    	mov.w     [w14], w1
    3bdc:	a1 00 90    	mov.w     [w1+4], w1
    3bde:	11 01 78    	mov.w     [w1], w2
    3be0:	9e 00 78    	mov.w     [w14], w1
    3be2:	e1 40 90    	mov.b     [w1+6], w1
    3be4:	81 80 fb    	ze        w1, w1
    3be6:	13 00 20    	mov.w     #0x1, w3
    3be8:	81 18 dd    	sl.w      w3, w1, w1
    3bea:	81 80 ea    	com.w     w1, w1
    3bec:	81 00 61    	and.w     w2, w1, w1
    3bee:	01 08 78    	mov.w     w1, [w0]

00003bf0 <.L14>:
    bitset(self->tris, self->bit);
    3bf0:	1e 00 78    	mov.w     [w14], w0
    3bf2:	10 00 90    	mov.w     [w0+2], w0
    3bf4:	9e 00 78    	mov.w     [w14], w1
    3bf6:	91 00 90    	mov.w     [w1+2], w1
    3bf8:	11 01 78    	mov.w     [w1], w2
    3bfa:	9e 00 78    	mov.w     [w14], w1
    3bfc:	e1 40 90    	mov.b     [w1+6], w1
    3bfe:	81 80 fb    	ze        w1, w1
    3c00:	13 00 20    	mov.w     #0x1, w3
    3c02:	81 18 dd    	sl.w      w3, w1, w1
    3c04:	82 80 70    	ior.w     w1, w2, w1
    3c06:	01 08 78    	mov.w     w1, [w0]

00003c08 <.LSM64>:
    self->write = NULL;
    3c08:	1e 00 78    	mov.w     [w14], w0
    3c0a:	80 00 eb    	clr.w     w1
    3c0c:	11 08 98    	mov.w     w1, [w0+18]

00003c0e <.LSM65>:
    self->read = __digitalRead;    
    3c0e:	1e 00 78    	mov.w     [w14], w0
    3c10:	c1 90 23    	mov.w     #0x390c, w1
    3c12:	21 08 98    	mov.w     w1, [w0+20]

00003c14 <.LSM66>:
}
    3c14:	00 80 fa    	ulnk      
    3c16:	00 00 06    	return    

00003c18 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3c18:	02 00 fa    	lnk       #0x2
    3c1a:	00 0f 78    	mov.w     w0, [w14]

00003c1c <.LSM68>:
    if (self->ans)
    3c1c:	1e 00 78    	mov.w     [w14], w0
    3c1e:	20 00 90    	mov.w     [w0+4], w0
    3c20:	00 00 e0    	cp0.w     w0
    3c22:	0d 00 32    	bra       Z, 0x3c3e <.L16>

00003c24 <.LSM69>:
        bitclear(self->ans, self->bit);
    3c24:	1e 00 78    	mov.w     [w14], w0
    3c26:	20 00 90    	mov.w     [w0+4], w0
    3c28:	9e 00 78    	mov.w     [w14], w1
    3c2a:	a1 00 90    	mov.w     [w1+4], w1
    3c2c:	11 01 78    	mov.w     [w1], w2
    3c2e:	9e 00 78    	mov.w     [w14], w1
    3c30:	e1 40 90    	mov.b     [w1+6], w1
    3c32:	81 80 fb    	ze        w1, w1
    3c34:	13 00 20    	mov.w     #0x1, w3
    3c36:	81 18 dd    	sl.w      w3, w1, w1
    3c38:	81 80 ea    	com.w     w1, w1
    3c3a:	81 00 61    	and.w     w2, w1, w1
    3c3c:	01 08 78    	mov.w     w1, [w0]

00003c3e <.L16>:
    bitclear(self->port, self->bit);
    3c3e:	1e 00 78    	mov.w     [w14], w0
    3c40:	10 00 78    	mov.w     [w0], w0
    3c42:	9e 00 78    	mov.w     [w14], w1
    3c44:	91 00 78    	mov.w     [w1], w1
    3c46:	11 01 78    	mov.w     [w1], w2
    3c48:	9e 00 78    	mov.w     [w14], w1
    3c4a:	e1 40 90    	mov.b     [w1+6], w1
    3c4c:	81 80 fb    	ze        w1, w1
    3c4e:	13 00 20    	mov.w     #0x1, w3
    3c50:	81 18 dd    	sl.w      w3, w1, w1
    3c52:	81 80 ea    	com.w     w1, w1
    3c54:	81 00 61    	and.w     w2, w1, w1
    3c56:	01 08 78    	mov.w     w1, [w0]

00003c58 <.LSM71>:
    bitclear(self->tris, self->bit);
    3c58:	1e 00 78    	mov.w     [w14], w0
    3c5a:	10 00 90    	mov.w     [w0+2], w0
    3c5c:	9e 00 78    	mov.w     [w14], w1
    3c5e:	91 00 90    	mov.w     [w1+2], w1
    3c60:	11 01 78    	mov.w     [w1], w2
    3c62:	9e 00 78    	mov.w     [w14], w1
    3c64:	e1 40 90    	mov.b     [w1+6], w1
    3c66:	81 80 fb    	ze        w1, w1
    3c68:	13 00 20    	mov.w     #0x1, w3
    3c6a:	81 18 dd    	sl.w      w3, w1, w1
    3c6c:	81 80 ea    	com.w     w1, w1
    3c6e:	81 00 61    	and.w     w2, w1, w1
    3c70:	01 08 78    	mov.w     w1, [w0]

00003c72 <.LSM72>:
    self->write = __digitalWrite;
    3c72:	1e 00 78    	mov.w     [w14], w0
    3c74:	81 8c 23    	mov.w     #0x38c8, w1
    3c76:	11 08 98    	mov.w     w1, [w0+18]

00003c78 <.LSM73>:
    self->read = __digitalRead;
    3c78:	1e 00 78    	mov.w     [w14], w0
    3c7a:	c1 90 23    	mov.w     #0x390c, w1
    3c7c:	21 08 98    	mov.w     w1, [w0+20]

00003c7e <.LSM74>:
}
    3c7e:	00 80 fa    	ulnk      
    3c80:	00 00 06    	return    

00003c82 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3c82:	02 00 fa    	lnk       #0x2
    3c84:	00 0f 78    	mov.w     w0, [w14]

00003c86 <.LSM76>:
    if (!(self->ans))
    3c86:	1e 00 78    	mov.w     [w14], w0
    3c88:	20 00 90    	mov.w     [w0+4], w0
    3c8a:	00 00 e0    	cp0.w     w0
    3c8c:	1f 00 32    	bra       Z, 0x3ccc <.L20>

00003c8e <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3c8e:	1e 00 78    	mov.w     [w14], w0
    3c90:	10 00 90    	mov.w     [w0+2], w0
    3c92:	9e 00 78    	mov.w     [w14], w1
    3c94:	91 00 90    	mov.w     [w1+2], w1
    3c96:	11 01 78    	mov.w     [w1], w2
    3c98:	9e 00 78    	mov.w     [w14], w1
    3c9a:	e1 40 90    	mov.b     [w1+6], w1
    3c9c:	81 80 fb    	ze        w1, w1
    3c9e:	13 00 20    	mov.w     #0x1, w3
    3ca0:	81 18 dd    	sl.w      w3, w1, w1
    3ca2:	82 80 70    	ior.w     w1, w2, w1
    3ca4:	01 08 78    	mov.w     w1, [w0]

00003ca6 <.LSM78>:
    bitset(self->ans, self->bit);
    3ca6:	1e 00 78    	mov.w     [w14], w0
    3ca8:	20 00 90    	mov.w     [w0+4], w0
    3caa:	9e 00 78    	mov.w     [w14], w1
    3cac:	a1 00 90    	mov.w     [w1+4], w1
    3cae:	11 01 78    	mov.w     [w1], w2
    3cb0:	9e 00 78    	mov.w     [w14], w1
    3cb2:	e1 40 90    	mov.b     [w1+6], w1
    3cb4:	81 80 fb    	ze        w1, w1
    3cb6:	13 00 20    	mov.w     #0x1, w3
    3cb8:	81 18 dd    	sl.w      w3, w1, w1
    3cba:	82 80 70    	ior.w     w1, w2, w1
    3cbc:	01 08 78    	mov.w     w1, [w0]

00003cbe <.LSM79>:
    self->write = NULL;
    3cbe:	1e 00 78    	mov.w     [w14], w0
    3cc0:	80 00 eb    	clr.w     w1
    3cc2:	11 08 98    	mov.w     w1, [w0+18]

00003cc4 <.LSM80>:
    self->read = __analogRead;
    3cc4:	1e 00 78    	mov.w     [w14], w0
    3cc6:	e1 92 23    	mov.w     #0x392e, w1
    3cc8:	21 08 98    	mov.w     w1, [w0+20]
    3cca:	01 00 37    	bra       0x3cce <.L17>

00003ccc <.L20>:
    3ccc:	00 00 00    	nop       

00003cce <.L17>:
}
    3cce:	00 80 fa    	ulnk      
    3cd0:	00 00 06    	return    

00003cd2 <_pin_set>:

void pin_set(_PIN *self) {
    3cd2:	02 00 fa    	lnk       #0x2
    3cd4:	00 0f 78    	mov.w     w0, [w14]

00003cd6 <.LSM84>:
    if (self->write==__digitalWrite)
    3cd6:	1e 00 78    	mov.w     [w14], w0
    3cd8:	90 08 90    	mov.w     [w0+18], w1
    3cda:	80 8c 23    	mov.w     #0x38c8, w0
    3cdc:	80 8f 50    	sub.w     w1, w0, [w15]
    3cde:	0c 00 3a    	bra       NZ, 0x3cf8 <.L21>

00003ce0 <.LSM85>:
        bitset(self->port, self->bit);
    3ce0:	1e 00 78    	mov.w     [w14], w0
    3ce2:	10 00 78    	mov.w     [w0], w0
    3ce4:	9e 00 78    	mov.w     [w14], w1
    3ce6:	91 00 78    	mov.w     [w1], w1
    3ce8:	11 01 78    	mov.w     [w1], w2
    3cea:	9e 00 78    	mov.w     [w14], w1
    3cec:	e1 40 90    	mov.b     [w1+6], w1
    3cee:	81 80 fb    	ze        w1, w1
    3cf0:	13 00 20    	mov.w     #0x1, w3
    3cf2:	81 18 dd    	sl.w      w3, w1, w1
    3cf4:	82 80 70    	ior.w     w1, w2, w1
    3cf6:	01 08 78    	mov.w     w1, [w0]

00003cf8 <.L21>:
}
    3cf8:	00 80 fa    	ulnk      
    3cfa:	00 00 06    	return    

00003cfc <_pin_clear>:

void pin_clear(_PIN *self) {
    3cfc:	02 00 fa    	lnk       #0x2
    3cfe:	00 0f 78    	mov.w     w0, [w14]

00003d00 <.LSM88>:
    if (self->write==__digitalWrite)
    3d00:	1e 00 78    	mov.w     [w14], w0
    3d02:	90 08 90    	mov.w     [w0+18], w1
    3d04:	80 8c 23    	mov.w     #0x38c8, w0
    3d06:	80 8f 50    	sub.w     w1, w0, [w15]
    3d08:	0d 00 3a    	bra       NZ, 0x3d24 <.L23>

00003d0a <.LSM89>:
        bitclear(self->port, self->bit);
    3d0a:	1e 00 78    	mov.w     [w14], w0
    3d0c:	10 00 78    	mov.w     [w0], w0
    3d0e:	9e 00 78    	mov.w     [w14], w1
    3d10:	91 00 78    	mov.w     [w1], w1
    3d12:	11 01 78    	mov.w     [w1], w2
    3d14:	9e 00 78    	mov.w     [w14], w1
    3d16:	e1 40 90    	mov.b     [w1+6], w1
    3d18:	81 80 fb    	ze        w1, w1
    3d1a:	13 00 20    	mov.w     #0x1, w3
    3d1c:	81 18 dd    	sl.w      w3, w1, w1
    3d1e:	81 80 ea    	com.w     w1, w1
    3d20:	81 00 61    	and.w     w2, w1, w1
    3d22:	01 08 78    	mov.w     w1, [w0]

00003d24 <.L23>:
}
    3d24:	00 80 fa    	ulnk      
    3d26:	00 00 06    	return    

00003d28 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3d28:	02 00 fa    	lnk       #0x2
    3d2a:	00 0f 78    	mov.w     w0, [w14]

00003d2c <.LSM92>:
    if (self->write==__digitalWrite)
    3d2c:	1e 00 78    	mov.w     [w14], w0
    3d2e:	90 08 90    	mov.w     [w0+18], w1
    3d30:	80 8c 23    	mov.w     #0x38c8, w0
    3d32:	80 8f 50    	sub.w     w1, w0, [w15]
    3d34:	0c 00 3a    	bra       NZ, 0x3d4e <.L25>

00003d36 <.LSM93>:
        bitflip(self->port, self->bit);
    3d36:	1e 00 78    	mov.w     [w14], w0
    3d38:	10 00 78    	mov.w     [w0], w0
    3d3a:	9e 00 78    	mov.w     [w14], w1
    3d3c:	91 00 78    	mov.w     [w1], w1
    3d3e:	11 01 78    	mov.w     [w1], w2
    3d40:	9e 00 78    	mov.w     [w14], w1
    3d42:	e1 40 90    	mov.b     [w1+6], w1
    3d44:	81 80 fb    	ze        w1, w1
    3d46:	13 00 20    	mov.w     #0x1, w3
    3d48:	81 18 dd    	sl.w      w3, w1, w1
    3d4a:	81 00 69    	xor.w     w2, w1, w1
    3d4c:	01 08 78    	mov.w     w1, [w0]

00003d4e <.L25>:
}
    3d4e:	00 80 fa    	ulnk      
    3d50:	00 00 06    	return    

00003d52 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3d52:	04 00 fa    	lnk       #0x4
    3d54:	00 0f 78    	mov.w     w0, [w14]
    3d56:	11 07 98    	mov.w     w1, [w14+2]

00003d58 <.LSM96>:
    if (self->write)
    3d58:	1e 00 78    	mov.w     [w14], w0
    3d5a:	10 08 90    	mov.w     [w0+18], w0
    3d5c:	00 00 e0    	cp0.w     w0
    3d5e:	05 00 32    	bra       Z, 0x3d6a <.L27>

00003d60 <.LSM97>:
        self->write(self, val);
    3d60:	1e 00 78    	mov.w     [w14], w0
    3d62:	10 09 90    	mov.w     [w0+18], w2
    3d64:	9e 00 90    	mov.w     [w14+2], w1
    3d66:	1e 00 78    	mov.w     [w14], w0
    3d68:	02 00 01    	call      w2

00003d6a <.L27>:
}
    3d6a:	00 80 fa    	ulnk      
    3d6c:	00 00 06    	return    

00003d6e <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3d6e:	02 00 fa    	lnk       #0x2
    3d70:	00 0f 78    	mov.w     w0, [w14]

00003d72 <.LSM100>:
    if (self->read)
    3d72:	1e 00 78    	mov.w     [w14], w0
    3d74:	20 08 90    	mov.w     [w0+20], w0
    3d76:	00 00 e0    	cp0.w     w0
    3d78:	05 00 32    	bra       Z, 0x3d84 <.L30>

00003d7a <.LSM101>:
        return self->read(self);
    3d7a:	1e 00 78    	mov.w     [w14], w0
    3d7c:	a0 08 90    	mov.w     [w0+20], w1
    3d7e:	1e 00 78    	mov.w     [w14], w0
    3d80:	01 00 01    	call      w1
    3d82:	01 00 37    	bra       0x3d86 <.L31>

00003d84 <.L30>:
    else
        return 0xFFFF;
    3d84:	00 80 eb    	setm.w    w0

00003d86 <.L31>:
}
    3d86:	00 80 fa    	ulnk      
    3d88:	00 00 06    	return    
Disassembly of section .dinit:

00003d8a <.dinit>:
    3d8a:	ce 0b 00    	nop       
    3d8c:	28 00 00    	nop       
    3d8e:	80 00 00    	nop       
    3d90:	04 08 00    	nop       
    3d92:	b8 01 00    	nop       
    3d94:	80 00 00    	nop       
    3d96:	32 0c 00    	nop       
    3d98:	10 00 00    	nop       
    3d9a:	82 00 00    	nop       
    3d9c:	bd 37 86    	mov.w     0xc6f6, w13
    3d9e:	33 bd 37    	bra       0xffffb806
    3da0:	06 35 bd    	subr.w    0x1506
    3da2:	37 86 36    	bra       LEU, 0xffff4a12
    3da4:	bd 37 86    	mov.w     0xc6f6, w13
    3da6:	37 00 00    	nop       
    3da8:	60 0b 00    	nop       
    3daa:	6e 00 00    	nop       
    3dac:	80 00 00    	nop       
    3dae:	bc 09 00    	nop       
    3db0:	1c 01 00    	nop       
    3db2:	80 00 00    	nop       
    3db4:	00 08 00    	nop       
    3db6:	04 00 00    	nop       
    3db8:	80 00 00    	nop       
    3dba:	d8 0a 00    	nop       
    3dbc:	88 00 00    	nop       
    3dbe:	82 00 00    	nop       
    3dc0:	01 00 00    	nop       
    3dc2:	00 fe 0a    	.pword 0x0afe00
    3dc4:	ff 0a fe    	.pword 0xfe0aff
    3dc6:	0a fe 0a    	.pword 0x0afe0a
    3dc8:	fe 0a fe    	.pword 0xfe0afe
    3dca:	0a ee 0a    	.pword 0x0aee0a
	...
    3dda:	00 02 08    	do        #0x200, 0x3fe0
    3ddc:	01 01 26 
    3dde:	0b 27 0b    	.pword 0x0b270b
    3de0:	26 0b 26    	mov.w     #0x60b2, w6
    3de2:	0b 26 0b    	.pword 0x0b260b
    3de4:	26 0b 16    	subr.w    w12, [w6--], [w6]
    3de6:	0b 00 00    	nop       
	...
    3df4:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207c132>
    3df6:	08 02 02 
    3df8:	4e 0b 4f    	addc.w    w14, [--w14], [w6]
    3dfa:	0b 4e 0b    	.pword 0x0b4e0b
    3dfc:	4e 0b 4e    	addc.w    w12, [--w14], [w6]
    3dfe:	0b 4e 0b    	.pword 0x0b4e0b
    3e00:	3e 0b 00    	nop       
	...
    3e10:	d8 0a 00    	nop       
    3e12:	0b 28 0b    	.pword 0x0b280b
	...
    3e1c:	18 0c 00    	nop       
    3e1e:	1a 00 00    	nop       
    3e20:	82 00 00    	nop       
    3e22:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    3e24:	74 7a 4c    	.pword 0x4c7a74
    3e26:	00 00 01    	call      w0
    3e28:	00 02 00    	nop       
    3e2a:	04 00 08    	do        #0x4, 0x5e2e
    3e2c:	00 10 00 
    3e2e:	00 00 20    	mov.w     #0x0, w0
    3e30:	2b 2d 23    	mov.w     #0x32d2, w11
    3e32:	30 00 00    	nop       
    3e34:	4a 0c 00    	nop       
    3e36:	02 00 00    	nop       
    3e38:	80 00 00    	nop       
    3e3a:	42 0c 00    	nop       
    3e3c:	04 00 00    	nop       
    3e3e:	82 00 00    	nop       
    3e40:	06 00 00    	nop       
    3e42:	00 00 00    	nop       
    3e44:	46 0c 00    	nop       
    3e46:	04 00 00    	nop       
    3e48:	80 00 00    	nop       
    3e4a:	f6 0b 00    	nop       
    3e4c:	22 00 00    	nop       
    3e4e:	82 00 00    	nop       
    3e50:	30 31 32    	bra       Z, 0xa0b2
    3e52:	33 34 35    	bra       LT, 0xa6ba
    3e54:	36 37 38    	bra       NOV, 0xacc2
    3e56:	39 41 42    	add.b     w4, [w9++], w2
    3e58:	43 44 45    	add.b     w10, [--w3], w8
    3e5a:	46 00 30    	bra       OV, 0x3ee8
    3e5c:	31 32 33    	bra       N, 0xa2c0
    3e5e:	34 35 36    	bra       LEU, 0xa8c8
    3e60:	37 38 39    	bra       NC, 0xaed0
    3e62:	61 62 63    	and.b     w6, #0x1, [--w4]
    3e64:	64 65 66    	and.b     w12, #0x4, [--w10]
    3e66:	00 00 00    	nop       
    3e68:	4c 0c 00    	nop       
    3e6a:	02 00 00    	nop       
    3e6c:	80 00 00    	nop       
    3e6e:	00 00 00    	nop       
Disassembly of section .text:

00003e70 <_main>:
#include <stdio.h>

uint8_t string[40];

int16_t main(void) {
    3e70:	00 00 fa    	lnk       #0x0

00003e72 <.LSM1>:
    init_clock();
    3e72:	00 10 20    	mov.w     #0x100, w0
    3e74:	20 3a 88    	mov.w     w0, 0x744

00003e76 <.LSM2>:
    init_uart();
    3e76:	9d f5 07    	rcall     0x29b2 <_init_uart>

00003e78 <.LSM3>:
    init_timer();
    3e78:	3d fb 07    	rcall     0x34f4 <_init_timer>

00003e7a <.LSM4>:

    timer_setPeriod(&timer2, 1.25);
    3e7a:	02 00 20    	mov.w     #0x0, w2
    3e7c:	03 fa 23    	mov.w     #0x3fa0, w3
    3e7e:	60 b7 20    	mov.w     #0xb76, w0
    3e80:	a4 fb 07    	rcall     0x35ca <_timer_setPeriod>

00003e82 <.LSM5>:
    timer_start(&timer2);
    3e82:	60 b7 20    	mov.w     #0xb76, w0
    3e84:	71 fc 07    	rcall     0x3768 <_timer_start>

00003e86 <.LSM6>:

    printf("Hello World!\n");
    3e86:	00 58 2a    	mov.w     #0xa580, w0
    3e88:	85 eb 07    	rcall     0x1594 <_puts>

00003e8a <.LSM7>:

    printf("What is your name? ");
    3e8a:	d0 58 2a    	mov.w     #0xa58d, w0
    3e8c:	80 1f 78    	mov.w     w0, [w15++]
    3e8e:	81 ec 07    	rcall     0x1792 <__printf_cdnopsuxX>
    3e90:	8f 87 e9    	dec2.w    w15, w15

00003e92 <.LSM8>:
    uart_gets(&uart1, string, 40);
    3e92:	82 02 20    	mov.w     #0x28, w2
    3e94:	e1 bc 20    	mov.w     #0xbce, w1
    3e96:	c0 9b 20    	mov.w     #0x9bc, w0
    3e98:	00 fa 07    	rcall     0x329a <_uart_gets>

00003e9a <.LSM9>:
    printf("Hello %s!\n", string);
    3e9a:	e0 bc 20    	mov.w     #0xbce, w0
    3e9c:	80 1f 78    	mov.w     w0, [w15++]
    3e9e:	10 5a 2a    	mov.w     #0xa5a1, w0
    3ea0:	80 1f 78    	mov.w     w0, [w15++]
    3ea2:	77 ec 07    	rcall     0x1792 <__printf_cdnopsuxX>
    3ea4:	e4 87 57    	sub.w     w15, #0x4, w15

00003ea6 <.LSM10>:

    printf("Type something at the prompt.\n");
    3ea6:	c0 5a 2a    	mov.w     #0xa5ac, w0
    3ea8:	75 eb 07    	rcall     0x1594 <_puts>

00003eaa <.L2>:

    while (1) {
        printf(">> ");
    3eaa:	a0 5c 2a    	mov.w     #0xa5ca, w0
    3eac:	80 1f 78    	mov.w     w0, [w15++]
    3eae:	71 ec 07    	rcall     0x1792 <__printf_cdnopsuxX>
    3eb0:	8f 87 e9    	dec2.w    w15, w15

00003eb2 <.LSM12>:
        uart_gets(&uart1, string, 40);
    3eb2:	82 02 20    	mov.w     #0x28, w2
    3eb4:	e1 bc 20    	mov.w     #0xbce, w1
    3eb6:	c0 9b 20    	mov.w     #0x9bc, w0
    3eb8:	f0 f9 07    	rcall     0x329a <_uart_gets>

00003eba <.LSM13>:
        printf("You typed '%s' and the timer period is %d \n", string, timer_period(&timer2));
    3eba:	60 b7 20    	mov.w     #0xb76, w0
    3ebc:	03 fc 07    	rcall     0x36c4 <_timer_period>
    3ebe:	80 9f be    	mov.d     w0, [w15++]
    3ec0:	e0 bc 20    	mov.w     #0xbce, w0
    3ec2:	80 1f 78    	mov.w     w0, [w15++]
    3ec4:	e0 5c 2a    	mov.w     #0xa5ce, w0
    3ec6:	80 1f 78    	mov.w     w0, [w15++]
    3ec8:	64 ec 07    	rcall     0x1792 <__printf_cdnopsuxX>
    3eca:	e8 87 57    	sub.w     w15, #0x8, w15

00003ecc <.LSM14>:

    }
    3ecc:	ee ff 37    	bra       0x3eaa <.L2>
Disassembly of section .isr:

00003ece <__DefaultInterrupt>:
    3ece:	00 40 da    	.pword 0xda4000
    3ed0:	00 00 fe    	reset     
